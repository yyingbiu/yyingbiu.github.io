<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>电影观后感</title>
      <link href="/2019/09/11/dian-ying-guan-hou-gan/"/>
      <url>/2019/09/11/dian-ying-guan-hou-gan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>onnx2ncnn并在pc端调用ncnn模型</title>
      <link href="/2019/09/09/onnx2ncnn-bing-zai-pc-duan-diao-yong-ncnn-mo-xing/"/>
      <url>/2019/09/09/onnx2ncnn-bing-zai-pc-duan-diao-yong-ncnn-mo-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="onnx2ncnn并在pc端调用ncnn模型"><a href="#onnx2ncnn并在pc端调用ncnn模型" class="headerlink" title="onnx2ncnn并在pc端调用ncnn模型"></a>onnx2ncnn并在pc端调用ncnn模型</h1><h2 id="1、编译安装ncnn"><a href="#1、编译安装ncnn" class="headerlink" title="1、编译安装ncnn"></a>1、编译安装ncnn</h2><p>首先应该在电脑上编译安装ncnn，配置安装过程可以参考笔者的这篇博文<a href="https://yyingbiu.github.io/2019/08/21/linux-xia-bian-yi-an-zhuang-ncnn/">Linux下编译安装NCNN</a></p><h2 id="2、确保已经转换好onnx模型"><a href="#2、确保已经转换好onnx模型" class="headerlink" title="2、确保已经转换好onnx模型"></a>2、确保已经转换好onnx模型</h2><p>pytorch转onnx模型可以参考笔者的这篇 <a href="https://yyingbiu.github.io/2019/09/09/pytorch2onnx/">pytorch2onnx</a></p><h2 id="3、onnx2ncnn"><a href="#3、onnx2ncnn" class="headerlink" title="3、onnx2ncnn"></a>3、onnx2ncnn</h2><p>在经过步骤1的编译后，在目录ncnn/build/tools/onnx下，有onnx2ncnn这个可执行文件，这个文件是将模型onnx转化为ncnn模型。在ncnn/build/tools/caffe文件夹下有caffe2ncnn这个可执行文件，是将caffe模型转为ncnn，在ncnn/build/tools下有一个ncnn2mem 这个文件用来将ncnn模型进行加密的。onnx转化为ncnn模型时，我们需要使用的是onnx2ncnn这个可执行文件。</p><p>例如在笔者的这个模型中，使用</p><pre class="line-numbers language-shell"><code class="language-shell">./onnx2ncnn lw50.onnx lw50.param lw50.bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4、ncnn模型说明"><a href="#4、ncnn模型说明" class="headerlink" title="4、ncnn模型说明"></a>4、ncnn模型说明</h2><p>ncnn模型有两个文件一个.param文件，一个是.bin文件，前者是神经网络的结构，后者是神经网络的参数。下面以一个简单的神经网络结构来说明.param文件的意义。</p><h3 id="4-1-LeNet为例"><a href="#4-1-LeNet为例" class="headerlink" title="4.1 LeNet为例"></a>4.1 LeNet为例</h3><p>caffe模型文件内容为，关于caffe模型文件的解析可以参考笔者的这篇博文  <a href="https://yyingbiu.github.io/2019/07/08/tensorflow-mo-xing-zhuan-hua-wei-caffe-mo-xing-bing-diao-yong-yu-ce/#toc-heading-2">tensorflow2caffe</a></p><pre class="line-numbers language-caffe"><code class="language-caffe">name: "LeNet"layer {  name: "data"  type: "Input"  top: "data"  input_param { shape: { dim: 1 dim: 1 dim: 28 dim: 28 } }}layer {  name: "conv1"  type: "Convolution"  bottom: "data"  top: "conv1"  param {    lr_mult: 1  }  param {    lr_mult: 2  }  convolution_param {    num_output: 20    kernel_size: 5    stride: 1    weight_filler {      type: "xavier"    }    bias_filler {      type: "constant"    }  }}layer {  name: "pool1"  type: "Pooling"  bottom: "conv1"  top: "pool1"  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }}layer {  name: "conv2"  type: "Convolution"  bottom: "pool1"  top: "conv2"  param {    lr_mult: 1  }  param {    lr_mult: 2  }  convolution_param {    num_output: 50    kernel_size: 5    stride: 1    weight_filler {      type: "xavier"    }    bias_filler {      type: "constant"    }  }}layer {  name: "pool2"  type: "Pooling"  bottom: "conv2"  top: "pool2"  pooling_param {    pool: MAX    kernel_size: 2    stride: 2  }}layer {  name: "ip1"  type: "InnerProduct"  bottom: "pool2"  top: "ip1"  param {    lr_mult: 1  }  param {    lr_mult: 2  }  inner_product_param {    num_output: 500    weight_filler {      type: "xavier"    }    bias_filler {      type: "constant"    }  }}layer {  name: "relu1"  type: "ReLU"  bottom: "ip1"  top: "ip1"}layer {  name: "ip2"  type: "InnerProduct"  bottom: "ip1"  top: "ip2"  param {    lr_mult: 1  }  param {    lr_mult: 2  }  inner_product_param {    num_output: 10    weight_filler {      type: "xavier"    }    bias_filler {      type: "constant"    }  }}layer {  name: "prob"  type: "Softmax"  bottom: "ip2"  top: "prob"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="1568029980292.png" alt="网络可视化"></p><p>这个网络转换的.param模型文件为：</p><pre><code>77675179 9Input            data             0 1 data 0=28 1=28 2=1Convolution      conv1            1 1 data conv1 0=20 1=5 2=1 3=1 4=0 5=1 6=500Pooling          pool1            1 1 conv1 pool1 0=0 1=2 2=2 3=0 4=0Convolution      conv2            1 1 pool1 conv2 0=50 1=5 2=1 3=1 4=0 5=1 6=25000Pooling          pool2            1 1 conv2 pool2 0=0 1=2 2=2 3=0 4=0InnerProduct     ip1              1 1 pool2 ip1 0=500 1=1 2=400000ReLU             relu1            1 1 ip1 ip1_relu1InnerProduct     ip2              1 1 ip1_relu1 ip2 0=10 1=1 2=5000Softmax          prob             1 1 ip2 prob 0=0</code></pre><h3 id="4-2-模型解析"><a href="#4-2-模型解析" class="headerlink" title="4.2 模型解析"></a>4.2 模型解析</h3><p><strong>第一行：版本信息</strong><br>数值为此param文件的版本<br><strong>第二行：层与数据交换结构数量</strong><br>第一个数字：层（layer）的数量<br>第二个数字：数据交换结构（blob）的数量<br><strong>第三行及以下：相关层的具体信息</strong><br>input层比较特殊一点<br>前4个值的含义固定：<br>（1）层类型<br>（2）层名称<br>（3）输入数据结构数量（bottom blob）<br>（4）输出数据结构数量（top blob）<br>后面跟有三个不同类型的值，严格按照顺序排序：<br>（1） 网络输入层名（一个层可能有多个输入，则有多个网络输入层名）<br>（2） 网络输出层名（一个层可能有多个输出，则有多个网络输出层名）<br>（3）特殊参数(可能没有)： 一种是k=v的类型；另一种是k=len,v1,v2,v3….（数组类型）。该层在ncnn中是存放到paramDict结构中，不同类型层，各种参数意义不一样。</p><p><strong>以第一个卷积层为例</strong><br>层类型：Convolution<br>层名称：conv1<br>输入数据结构数量：1<br>输出数据结构数量（top blob）：1<br>网络输入层名：data<br>网络输出层名：conv1<br>特殊参数1：0=20，num_output: 20<br>特殊参数2：1=5，kernel_size: 5<br>特殊参数3：2=1，stride: 1<br>特殊参数4：3=1<br>特殊参数5：4=0<br>特殊参数6：5=1<br>特殊参数7：6=500，该层的参数量，5<em>5</em>1*20=500</p><h3 id="4-3-可能出错的地方"><a href="#4-3-可能出错的地方" class="headerlink" title="4.3 可能出错的地方"></a>4.3 可能出错的地方</h3><p>在这一步还是有可能会出错，因为笔者的模型有上采样，所以有UpSampling，在ONNX中相应操作的参数是output scale，在NCNN中默认转成了output factor。而由于精度的问题，可能会导致feature map尺寸到后面就对不上，所以需要确认NCNN param中Interp的参数是否为正确的，如果不是就将这个参数相应的修改成相应的尺寸。</p><p>如笔者转换之后interp的size其实为0,0。而笔者正确的输出的尺寸是240*135，所以笔者直接将正确的尺寸写进去。</p><pre><code>Interp           574                      1 1 573 574 0=2 3=240 4=135</code></pre><h2 id="5、在pc端调用ncnn模型验证结构"><a href="#5、在pc端调用ncnn模型验证结构" class="headerlink" title="5、在pc端调用ncnn模型验证结构"></a>5、在pc端调用ncnn模型验证结构</h2><p>其实验证有两种方法，一种是世界将调用模型的C++代码文件放在原来ncnn源码的example文件下，重新编译，生成可执行文件，但这种方法如果自己想debug自己的代码会显得很不方便，所以我还是推荐自己新建一个C++工程，然后写CMakeLists.txt进行编译。笔者比较推荐的是在clion这个ide下完成C++工程。</p><h3 id="5-1-CMakeLists-txt书写"><a href="#5-1-CMakeLists-txt书写" class="headerlink" title="5.1 CMakeLists.txt书写"></a>5.1 CMakeLists.txt书写</h3><p>话不多说自己上代码，自己的工程里面想使用ncnn都可以仿照笔者如下代码书写</p><pre class="line-numbers language-cmake"><code class="language-cmake">cmake_minimum_required(VERSION 3.13)project(lw50ncnn)set(INC_DIR /usr/include        /usr/local/cuda/include #cuda的include位置 修改为正确的地方        /home/litchi/project/ncnn/build/install/include # ncnn的安装位置        )set(LINK_DIR /usr/lib        /usr/lib/x86_64-linux-gnu/        /usr/local/cuda/lib64 #cuda的lib位置 修改为正确的地方        /home/litchi/project/ncnn/build/install/lib/libncnn.a #ncnn.a所在位置        )set(OpenCV_DIR /usr/local/share/OpenCV) #opencv的位置find_package(OpenCV REQUIRED)find_package(OpenMP REQUIRED)if(OPENMP_FOUND)        message("OPENMP FOUND")        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")endif()include_directories(${INC_DIR}${OpenCV_INCLUDE_DIRS})link_directories(${LINK_DIR}${OpenCV_LIBS})set(CMAKE_CXX_STANDARD 14)add_executable(lw50ncnn main.cpp)target_link_libraries(lw50ncnn        ${OpenCV_LIBS}        ${LINK_DIR}        )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-调用模型代码"><a href="#5-2-调用模型代码" class="headerlink" title="5.2 调用模型代码"></a>5.2 调用模型代码</h3><p>main.cpp代码如下，其实代码还是很好读懂。主要需要注意的有如下两点</p><p>1、我们在对图片进行归一化处理的时候是对三个通道分别进行减去均值除以方差，在python中我们经常写为：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">prepare_img</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    IMG_SCALE  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token number">255</span>    IMG_MEAN <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    IMG_STD <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>img <span class="token operator">*</span> IMG_SCALE <span class="token operator">-</span> IMG_MEAN<span class="token punctuation">)</span> <span class="token operator">/</span> IMG_STD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是在ncnn中已经写好的一个函数是 in.substract_mean_normalizeS(mean_vals, std_vals),所以相应的std_vals的值应该为方差分之一。</p><pre class="line-numbers language-c++"><code class="language-c++"> const float mean_vals[3] = {123.675f, 116.28f, 103.53f}; const float std_vals[3] = {1/58.395f, 1/57.12f, 1/57.375f};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>笔者的这个数据是imagenet这个数据集的均值方差</p><p>2、在opencv中Mat数据是H*W*C，但是在ncnn中Mat的数据是C*H*W，所以第i行，第j列，第k通道的数值的取法为：</p><pre class="line-numbers language-c++"><code class="language-c++">out[k*out.h*out.w+i*out.w+j]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>#include <stdio.h>#include <algorithm>#include <vector>#include <opencv2/core/core.hpp>#include <opencv2/opencv.hpp>#include <opencv2/highgui/highgui.hpp>#include "/home/litchi/project/ncnn/build/install/include/ncnn/platform.h"#include "/home/litchi/project/ncnn/build/install/include/ncnn/net.h"using namespace std;#if NCNN_VULKAN#include "gpu.h"#endif // NCNN_VULKAN//将ncnn的mat类型数据转化为opencv的mat类型数据，第三个通道为前两个通道中较大的那个vector<vector<int>> ncnntovec(const ncnn::Mat &out){    //构造一个    cv::Mat cvimage = cv::Mat();    //CV_8UC3中的8表示8位、浮点数类型、3表示三个通道,CV_32FC3,CV_8UC3    cvimage.create(out.h,out.w,CV_32FC3);    for(int i=0;i<out.h;i++){        for(int j=0;j<out.w;j++){            cvimage.at<cv::Vec2f>(i,j)[0]=float(out[0*out.h*out.w+i*out.w+j]);            cvimage.at<cv::Vec2f>(i,j)[1]=float(out[1*out.h*out.w+i*out.w+j]);//            std::cout<<out[0*out.h*out.w+i*out.w+j]<<";"<<out[1*out.h*out.w+i*out.w+j]<<std::endl;//            std::cout<<cvimage.at<cv::Vec2f>(i,j)<<std::endl;        }    }    vector<vector<int>> armax(out.h,vector<int>(out.w));    for(int i=0;i<cvimage.rows;i++){        for(int j=0;j<cvimage.cols;j++){            if(cvimage.at<cv::Vec2f>(i,j)[0]>cvimage.at<cv::Vec2f>(i,j)[1]){                std::cout<<cvimage.at<cv::Vec2f>(i,j)<<std::endl;                armax[i][j]=0;            }            else{                armax[i][j]=1;            }        }    }   return armax;}cv::Mat vectocv(vector<vector<int>> &armax){    cv::Mat cvimg=cv::Mat();    cvimg.create(armax.size(),armax[0].size(),CV_8UC3);    for(int i=0;i<armax.size();i++){        for(int j=0;j<armax[0].size();j++){            if(armax[i][j]==0){                cvimg.at<cv::Vec3b>(i,j)=(0,0,0);            }            else{                cvimg.at<cv::Vec3b>(i,j)[0]=128;                cvimg.at<cv::Vec3b>(i,j)[1]=0;                cvimg.at<cv::Vec3b>(i,j)[2]=0;            }        }    }    cv::Mat recvimg=cv::Mat();    //恢复之前的size    cv::resize(cvimg,recvimg,cv::Size(540,960),cv::INTER_CUBIC);    return recvimg;}//为了对比读入数据long int cvsum(const cv::Mat &img){    float sum=0;    std::cout<<img.channels()<<std::endl;    for(int i=0;i<img.rows;i++){        for(int j=0;j<img.cols;j++){            for(int k=0;k<img.channels();k++){                sum=sum+int(img.at<cv::Vec3b>(i,j)[k]);                std::cout<<float(img.at<cv::Vec3b>(i,j)[k])<<" ";            }            std::cout<<std::endl;        }    }    return sum;}//ncnn为c*h*w//opencv为h*w*ccv::Mat  detect(const cv::Mat& bgr){    ncnn::Net net;#if NCNN_VULKAN    net.opt.use_vulkan_compute = true;#endif // NCNN_VULKAN    net.load_param("lw50.param");    net.load_model("lw50.bin");    ncnn::Mat in = ncnn::Mat::from_pixels(bgr.data, ncnn::Mat::PIXEL_BGR, bgr.cols, bgr.rows);    const float mean_vals[3] = {123.675f, 116.28f, 103.53f};    const float std_vals[3] = {1/58.395f, 1/57.12f, 1/57.375f};    in.substract_mean_normalize(mean_vals, std_vals);    ncnn::Extractor ex = net.create_extractor();    // 在.param文件中找到输入数据的名字，在笔者的模型中为“0”    ex.input("0", in);    ncnn::Mat out;    //在.param文件中找到出数据的名字，在笔者的模型中为“591”    ex.extract("591", out);    //插值后找argmax    vector<vector<int>> armax=ncnntovec(out);    cv::Mat cvimg=vectocv(armax);    return cvimg;}int main(int argc, char** argv){    if (argc != 2)    {        fprintf(stderr, "Usage: %s [imagepath]\n", argv[0]);        return -1;    }    const char* imagepath = argv[1];    cv::Mat m = cv::imread(imagepath);    if (m.empty())    {        fprintf(stderr, "cv::imread %s failed\n", imagepath);        return -1;    }#if NCNN_VULKAN    ncnn::create_gpu_instance();#endif // NCNN_VULKAN    cv::Mat preimg=detect(m);    cv::imshow("predict",preimg);    cv::waitKey(0);#if NCNN_VULKAN    ncnn::destroy_gpu_instance();#endif // NCNN_VULKAN    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染问题，空白的include部分分别为：</p><p>#include &lt;iostream&gt;</p><p>#include &lt;stdio.h&gt;</p><p>#include &lt;algorithm&gt;</p><p>#include &lt;vector&gt;</p><p>#include &lt;opencv2/core/core.hpp&gt;</p><p>#include &lt;opencv2/opencv.hpp&gt;</p><p>#include &lt;opencv2/highgui/highgui.hpp&gt;</p><p><img src="1568033154506.png" alt="测试图片"></p><p><img src="1568033209943.png" alt="预测结果"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> onnx </tag>
            
            <tag> ncnn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch2onnx</title>
      <link href="/2019/09/09/pytorch2onnx/"/>
      <url>/2019/09/09/pytorch2onnx/</url>
      
        <content type="html"><![CDATA[<h1 id="pytorch2onnx"><a href="#pytorch2onnx" class="headerlink" title="pytorch2onnx"></a>pytorch2onnx</h1><p>最近做的项目需要把训练好的模型移植到移动端，安卓手机上，实验室选择了ncnn这个框架，所以我选择了pytoch2onnx2ncnn框架的这个思路。下面主要是记录一下pytorch转onnx模型的步骤和踩过的坑。</p><p><a href="https://github.com/onnx/onnx" target="_blank" rel="noopener">项目地址</a>ONNX 定义了一种可扩展的计算图模型、一系列内置的运算单元（OP）和标准数据类型。每一个计算流图都定义为由节点组成的列表，并构建有向无环图。其中每一个节点都有一个或多个输入与输出，每一个节点称之为一个 OP。这相当于一种通用的计算图，不同深度学习框架构建的计算图都能转化为它。</p><p>如下所示，目前 ONNX 已经支持大多数框架，使用这些框架构建的模型可以转换为通用的 ONNX 计算图和 OP。现阶段 ONNX 只支持推理，所以导入的模型都需要在原框架完成训练。</p><p><img src="1568009953188.png" alt="支持的框架"></p><h2 id="1、操作步骤"><a href="#1、操作步骤" class="headerlink" title="1、操作步骤"></a>1、操作步骤</h2><p>首先一般情况下torch本身就是支持onnx类型的模型输出的，所以一般情况下，根据如下的脚本，基本就可以输出onnx类型的模型文件。以下脚本主要分为这三大部分：加载模型和模型参数，给定一个确定的输入，保存输出onnx类型的文件，至于这三步的代码具体应该怎么写完全根据自己，只要这三大步都有。笔者转的模型是一个二分类的分割任务，具体代码如下，完整代码会考虑上传到github上面。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">import</span> six<span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'../../'</span><span class="token punctuation">)</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> models<span class="token punctuation">.</span>resnet <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> utils<span class="token punctuation">.</span>helpers <span class="token keyword">import</span> prepare_img<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagehas_cuda <span class="token operator">=</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 加载模型和参数 笔者这里的加载调用了其他函数，贴在下面了</span><span class="token comment" spellcheck="true"># Initialise models</span>model_inits <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'rf_lw50_voc'</span>   <span class="token punctuation">:</span> rf_lw50<span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># key / constructor</span><span class="token punctuation">}</span>n_classes<span class="token operator">=</span><span class="token number">2</span>models <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> key<span class="token punctuation">,</span>fun <span class="token keyword">in</span> six<span class="token punctuation">.</span>iteritems<span class="token punctuation">(</span>model_inits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里调用的其实是def rf_lw50(num_classes, imagenet=False, pretrained=True, **kwargs)</span>    net <span class="token operator">=</span> fun<span class="token punctuation">(</span>n_classes<span class="token punctuation">,</span> pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> has_cuda<span class="token punctuation">:</span>        net <span class="token operator">=</span> net<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    models<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> net    model<span class="token operator">=</span>net<span class="token comment" spellcheck="true">#给定一个确定的输入 实际上可以随机初始化一个和需要的尺寸一致的numpy</span>img_path<span class="token operator">=</span><span class="token string">"/home/litchi/PycharmProjects/light-weight-refinenet/examples/imgs/blind/1110a.png"</span>img <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span><span class="token punctuation">)</span>input <span class="token operator">=</span>  <span class="token punctuation">(</span>torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>prepare_img<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>float<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> has_cuda<span class="token punctuation">:</span>    input <span class="token operator">=</span> input<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># onnx模型文件输出</span>torch_out <span class="token operator">=</span> torch<span class="token punctuation">.</span>onnx<span class="token punctuation">.</span>_export<span class="token punctuation">(</span>model<span class="token punctuation">,</span> input<span class="token punctuation">,</span> <span class="token string">"lw50.onnx"</span><span class="token punctuation">,</span>export_params<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是创建模型和加载模型参数的代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建模型</span><span class="token keyword">class</span> <span class="token class-name">ResNetLW</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> block<span class="token punctuation">,</span> layers<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>inplanes <span class="token operator">=</span> <span class="token number">64</span>        super<span class="token punctuation">(</span>ResNetLW<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>do <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>                               bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>maxpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> layers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer2 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> layers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer3 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> layers<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer4 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> layers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>p_ims1d2_outl1_dimred <span class="token operator">=</span> conv1x1<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mflow_conv_g1_pool <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_crp<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mflow_conv_g1_b3_joint_varout_dimred <span class="token operator">=</span> conv1x1<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>p_ims1d2_outl2_dimred <span class="token operator">=</span> conv1x1<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>adapt_stage2_b2_joint_varout_dimred <span class="token operator">=</span> conv1x1<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mflow_conv_g2_pool <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_crp<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mflow_conv_g2_b3_joint_varout_dimred <span class="token operator">=</span> conv1x1<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>p_ims1d2_outl3_dimred <span class="token operator">=</span> conv1x1<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>adapt_stage3_b2_joint_varout_dimred <span class="token operator">=</span> conv1x1<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mflow_conv_g3_pool <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_crp<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mflow_conv_g3_b3_joint_varout_dimred <span class="token operator">=</span> conv1x1<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>p_ims1d2_outl4_dimred <span class="token operator">=</span> conv1x1<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>adapt_stage4_b2_joint_varout_dimred <span class="token operator">=</span> conv1x1<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mflow_conv_g4_pool <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_crp<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>clf_conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                                  padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_make_crp</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_planes<span class="token punctuation">,</span> out_planes<span class="token punctuation">,</span> stages<span class="token punctuation">)</span><span class="token punctuation">:</span>        layers <span class="token operator">=</span> <span class="token punctuation">[</span>CRPBlock<span class="token punctuation">(</span>in_planes<span class="token punctuation">,</span> out_planes<span class="token punctuation">,</span>stages<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>layers<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_make_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> block<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> blocks<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        downsample <span class="token operator">=</span> None        <span class="token keyword">if</span> stride <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">or</span> self<span class="token punctuation">.</span>inplanes <span class="token operator">!=</span> planes <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">:</span>            downsample <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inplanes<span class="token punctuation">,</span> planes <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">,</span>                          kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>        layers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>block<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> downsample<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inplanes <span class="token operator">=</span> planes <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> blocks<span class="token punctuation">)</span><span class="token punctuation">:</span>            layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>block<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>layers<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        l1 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        l2 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer2<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>        l3 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer3<span class="token punctuation">(</span>l2<span class="token punctuation">)</span>        l4 <span class="token operator">=</span> self<span class="token punctuation">.</span>layer4<span class="token punctuation">(</span>l3<span class="token punctuation">)</span>        l4 <span class="token operator">=</span> self<span class="token punctuation">.</span>do<span class="token punctuation">(</span>l4<span class="token punctuation">)</span>        l3 <span class="token operator">=</span> self<span class="token punctuation">.</span>do<span class="token punctuation">(</span>l3<span class="token punctuation">)</span>        x4 <span class="token operator">=</span> self<span class="token punctuation">.</span>p_ims1d2_outl1_dimred<span class="token punctuation">(</span>l4<span class="token punctuation">)</span>        x4 <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x4<span class="token punctuation">)</span>        x4 <span class="token operator">=</span> self<span class="token punctuation">.</span>mflow_conv_g1_pool<span class="token punctuation">(</span>x4<span class="token punctuation">)</span>        x4 <span class="token operator">=</span> self<span class="token punctuation">.</span>mflow_conv_g1_b3_joint_varout_dimred<span class="token punctuation">(</span>x4<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># </span>        <span class="token comment" spellcheck="true">#x4=F.interpolate(x4,size=l3.size()[2:],mode='bilinear',align_corners=True)</span>        <span class="token comment" spellcheck="true">#x4 = nn.Upsample(size=l3.size()[2:], mode='bilinear', align_corners=False)(x4) #[60,34]</span>        x4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Upsample<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">,</span> align_corners<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x4<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l3<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x3 <span class="token operator">=</span> self<span class="token punctuation">.</span>p_ims1d2_outl2_dimred<span class="token punctuation">(</span>l3<span class="token punctuation">)</span>        x3 <span class="token operator">=</span> self<span class="token punctuation">.</span>adapt_stage2_b2_joint_varout_dimred<span class="token punctuation">(</span>x3<span class="token punctuation">)</span>        x3 <span class="token operator">=</span> x3 <span class="token operator">+</span> x4        x3 <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x3<span class="token punctuation">)</span>        x3 <span class="token operator">=</span> self<span class="token punctuation">.</span>mflow_conv_g2_pool<span class="token punctuation">(</span>x3<span class="token punctuation">)</span>        x3 <span class="token operator">=</span> self<span class="token punctuation">.</span>mflow_conv_g2_b3_joint_varout_dimred<span class="token punctuation">(</span>x3<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># x3 = F.interpolate(x3,size=l2.size()[2:],mode='bilinear',align_corners=True)</span>       <span class="token comment" spellcheck="true"># x3 = nn.Upsample(size=l2.size()[2:], mode='bilinear', align_corners=False)(x3)</span>        x3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Upsample<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">,</span> align_corners<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x3<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l2<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x2 <span class="token operator">=</span> self<span class="token punctuation">.</span>p_ims1d2_outl3_dimred<span class="token punctuation">(</span>l2<span class="token punctuation">)</span>        x2 <span class="token operator">=</span> self<span class="token punctuation">.</span>adapt_stage3_b2_joint_varout_dimred<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>        x2 <span class="token operator">=</span> x2 <span class="token operator">+</span> x3        x2 <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>        x2 <span class="token operator">=</span> self<span class="token punctuation">.</span>mflow_conv_g3_pool<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>        x2 <span class="token operator">=</span> self<span class="token punctuation">.</span>mflow_conv_g3_b3_joint_varout_dimred<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#x2 = nn.Upsample(size=l1.size()[2:], mode='bilinear', align_corners=False)(x2)</span>        <span class="token comment" spellcheck="true">#x2=F.interpolate(x2,size=l1.size()[2:],mode='bilinear',align_corners=True)</span>        x2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Upsample<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">,</span> align_corners<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x1 <span class="token operator">=</span> self<span class="token punctuation">.</span>p_ims1d2_outl4_dimred<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>        x1 <span class="token operator">=</span> self<span class="token punctuation">.</span>adapt_stage4_b2_joint_varout_dimred<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>        x1 <span class="token operator">=</span> x1 <span class="token operator">+</span> x2        x1 <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>        x1 <span class="token operator">=</span> self<span class="token punctuation">.</span>mflow_conv_g4_pool<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>clf_conv<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span class="token keyword">def</span> <span class="token function">rf_lw50</span><span class="token punctuation">(</span>num_classes<span class="token punctuation">,</span> imagenet<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建了模型</span>    model <span class="token operator">=</span> ResNetLW<span class="token punctuation">(</span>Bottleneck<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span>num_classes<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 加载模型参数,模型参数文件为./src/ckpt/checkpoint.pth.tar</span>    <span class="token keyword">if</span> imagenet<span class="token punctuation">:</span>        key <span class="token operator">=</span> <span class="token string">'50_imagenet'</span>        url <span class="token operator">=</span> models_urls<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>maybe_download<span class="token punctuation">(</span>key<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">,</span> strict<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> pretrained<span class="token punctuation">:</span>        dataset <span class="token operator">=</span> data_info<span class="token punctuation">.</span>get<span class="token punctuation">(</span>num_classes<span class="token punctuation">,</span> None<span class="token punctuation">)</span>        <span class="token keyword">if</span> dataset<span class="token operator">==</span><span class="token string">'blind'</span><span class="token punctuation">:</span>            data<span class="token operator">=</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'./src/ckpt/checkpoint.pth.tar'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'segmenter'</span><span class="token punctuation">]</span>            newdata<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token keyword">for</span> key <span class="token keyword">in</span> data<span class="token punctuation">:</span>                newdata<span class="token punctuation">[</span>key<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>newdata<span class="token punctuation">,</span>strict<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> dataset<span class="token punctuation">:</span>            bname <span class="token operator">=</span> <span class="token string">'50_'</span> <span class="token operator">+</span> dataset<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>            key <span class="token operator">=</span> <span class="token string">'rf_lw'</span> <span class="token operator">+</span> bname            url <span class="token operator">=</span> models_urls<span class="token punctuation">[</span>bname<span class="token punctuation">]</span>            model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>maybe_download<span class="token punctuation">(</span>key<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">,</span> strict<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、添加操作符号"><a href="#2、添加操作符号" class="headerlink" title="2、添加操作符号"></a>2、添加操作符号</h2><p>在模型转换的过程中，可能遇到的一个问题是，在pytorch模型中存在的一个操作在onnx中可能不支持，所以我们就需要在onnx的源码中添加这个操作符的运算。其实详细的说明在torch的官方文档中都有。<a href="https://pytorch-cn.readthedocs.io/zh/latest/package_references/torch/" target="_blank" rel="noopener">torch中文官方文档</a>可以搜索onnx来看相关知识和用法。</p><p>以下是onnx模型一定支持的一些操作：</p><pre class="line-numbers language-python"><code class="language-python">add <span class="token punctuation">(</span>nonzero alpha <span class="token operator">not</span> supported<span class="token punctuation">)</span>sub <span class="token punctuation">(</span>nonzero alpha <span class="token operator">not</span> supported<span class="token punctuation">)</span>muldivcatmmaddmmnegsqrttanhsigmoidmeansumprodtexpand <span class="token punctuation">(</span>only when used before a broadcasting ONNX operator<span class="token punctuation">;</span> e<span class="token punctuation">.</span>g<span class="token punctuation">.</span><span class="token punctuation">,</span> add<span class="token punctuation">)</span>transposeviewsplitsqueezeprelu <span class="token punctuation">(</span>single weight shared among input channels <span class="token operator">not</span> supported<span class="token punctuation">)</span>threshold <span class="token punctuation">(</span>non<span class="token operator">-</span>zero threshold<span class="token operator">/</span>non<span class="token operator">-</span>zero value <span class="token operator">not</span> supported<span class="token punctuation">)</span>leaky_reluglusoftmax <span class="token punctuation">(</span>only dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> supported<span class="token punctuation">)</span>avg_pool2d <span class="token punctuation">(</span>ceil_mode <span class="token operator">not</span> supported<span class="token punctuation">)</span>log_softmaxunfold <span class="token punctuation">(</span>experimental support <span class="token keyword">with</span> ATen<span class="token operator">-</span>Caffe2 integration<span class="token punctuation">)</span>eluconcatabsindex_selectpowclampmaxmineqgtltgeleexpsincostanasinacosatanpermuteConvBatchNormMaxPool1d <span class="token punctuation">(</span>ceil_mode <span class="token operator">not</span> supported<span class="token punctuation">)</span>MaxPool2d <span class="token punctuation">(</span>ceil_mode <span class="token operator">not</span> supported<span class="token punctuation">)</span>MaxPool3d <span class="token punctuation">(</span>ceil_mode <span class="token operator">not</span> supported<span class="token punctuation">)</span>Embedding <span class="token punctuation">(</span>no optional arguments supported<span class="token punctuation">)</span>RNNConstantPadNdDropoutFeatureDropout <span class="token punctuation">(</span>training mode <span class="token operator">not</span> supported<span class="token punctuation">)</span>Index <span class="token punctuation">(</span>constant integer <span class="token operator">and</span> tuple indices supported<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的实现过程可以在torch.onnx.symbolic.py中查看，这里有一句_onnx_opset_version = 6，此外还有8,9等差别可以自己查询一下。笔者这里贴出其中两个来举例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> self<span class="token punctuation">,</span> other<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> _scalar<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _unimplemented<span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token string">"alpha != 1"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># See Note [Pointwise by scalar]</span>    <span class="token keyword">return</span> g<span class="token punctuation">.</span>op<span class="token punctuation">(</span><span class="token string">"Add"</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> _if_scalar_type_as<span class="token punctuation">(</span>other<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">**</span>_broadcast_if_scalar<span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> self<span class="token punctuation">,</span> other<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> _scalar<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _unimplemented<span class="token punctuation">(</span><span class="token string">"sub"</span><span class="token punctuation">,</span> <span class="token string">"alpha != 1"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># See Note [Pointwise by scalar]</span>    <span class="token keyword">return</span> g<span class="token punctuation">.</span>op<span class="token punctuation">(</span><span class="token string">"Sub"</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> _if_scalar_type_as<span class="token punctuation">(</span>other<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">**</span>_broadcast_if_scalar<span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">mul</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># See Note [Pointwise by scalar]</span>    <span class="token keyword">return</span> g<span class="token punctuation">.</span>op<span class="token punctuation">(</span><span class="token string">"Mul"</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> _if_scalar_type_as<span class="token punctuation">(</span>other<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">**</span>_broadcast_if_scalar<span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">div</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># See Note [Pointwise by scalar]</span>    <span class="token keyword">return</span> g<span class="token punctuation">.</span>op<span class="token punctuation">(</span><span class="token string">"Div"</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> _if_scalar_type_as<span class="token punctuation">(</span>other<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">**</span>_broadcast_if_scalar<span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上分别是加减乘除运算的实现过程，所以加入自己要自定义操作符号，也应该仿照如上的运算符进行实现。</p><p>添加的时候也分为两种情况，一种是在Aten中存在的运算符，一种是没有的。</p><h3 id="2-1在Aten中有的运算符"><a href="#2-1在Aten中有的运算符" class="headerlink" title="2.1在Aten中有的运算符"></a>2.1在Aten中有的运算符</h3><p>如果增加的operation可以用ATen operation(ATen是pyTorch底层调用的C++ 11库，由pytorch团队开发的)实现，则可以在torch/csrc/autograd/generated/VariableType.h中找到他的声明，在torch/onnx/symbolic.py中添加它，按以下步骤：</p><ol><li>在torch/onnx/symbolic.py中定义声明函数，确保函数名与在头文件中VariableType.h的ATen operation的函数名一样.</li><li>函数中的第一个参数必须为ONNX模型图，如add operation的函数名def add(g, self, other, alpha):第一个参数必须是g，其他参数名必须同VariableType.h完全一致. </li><li>参数的顺序没有强制性要求，一般input参数为张量类型，然后是其他参数为非张量参数.<br>如果输入参数是张量，但是ONNX要求标量，我们必须明确地进行转换。 辅助函数_scalar可以将标量张量转换为python标量，_if_scalar_type_as可以将Python标量转换为PyTorch张量</li></ol><p>在笔者的这个模型的转换中，由于这是一个分割项目，所以一定有上采样升高图片的分辨率的这样的一个过程，所以就涉及到了插值，我需要补充的是双线性插值。代码如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">upsample_bilinear2d</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> input<span class="token punctuation">,</span> output_size<span class="token punctuation">,</span> align_corners<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> align_corners<span class="token punctuation">:</span>        <span class="token keyword">return</span> _unimplemented<span class="token punctuation">(</span><span class="token string">"upsample_bilinear2d"</span><span class="token punctuation">,</span> <span class="token string">"align_corners == True"</span><span class="token punctuation">)</span>    height_scale <span class="token operator">=</span> float<span class="token punctuation">(</span>output_size<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> input<span class="token punctuation">.</span>type<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sizes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>    width_scale <span class="token operator">=</span> float<span class="token punctuation">(</span>output_size<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> input<span class="token punctuation">.</span>type<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sizes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    scales <span class="token operator">=</span> g<span class="token punctuation">.</span>op<span class="token punctuation">(</span><span class="token string">"Constant"</span><span class="token punctuation">,</span> value_t<span class="token operator">=</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> height_scale<span class="token punctuation">,</span>                                                    width_scale<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> g<span class="token punctuation">.</span>op<span class="token punctuation">(</span><span class="token string">"Upsample"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> scales<span class="token punctuation">,</span>                mode_s<span class="token operator">=</span><span class="token string">"linear"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，最近邻插值可以重写为:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">upsample_nearest2d</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> input<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    height_scale <span class="token operator">=</span> float<span class="token punctuation">(</span>output_size<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> input<span class="token punctuation">.</span>type<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sizes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>    width_scale <span class="token operator">=</span> float<span class="token punctuation">(</span>output_size<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> input<span class="token punctuation">.</span>type<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sizes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> g<span class="token punctuation">.</span>op<span class="token punctuation">(</span><span class="token string">"Upsample"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span>                scales_f<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> height_scale<span class="token punctuation">,</span> width_scale<span class="token punctuation">)</span><span class="token punctuation">,</span>                mode_s<span class="token operator">=</span><span class="token string">"nearest"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-在Aten中没有的运算符"><a href="#2-2-在Aten中没有的运算符" class="headerlink" title="2.2 在Aten中没有的运算符"></a>2.2 在Aten中没有的运算符</h3><p>如果增加的operation不能用ATen库实现，则需要在相关的pyTorch Function 类中添加声明函数，操作如下：</p><ol><li><p>在相关的Function类中创建一个函数，如命名为symbolic.</p></li><li><p>同样的第一个参数必须是ONNX图g.</p></li><li><p>其他参数命名必须与forward中的名字一致.</p></li><li><p>输出的tuple大小必须与forward的输出大小一致.</p></li><li><p>声明函数应该使用python定义，方法的具体实现使用C++-Python绑定实现，具体接口如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> operator<span class="token operator">/</span>symbolic<span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token operator">*</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""  Modifies Graph (e.g., using "op"), adding the ONNX operations representing  this PyTorch function, and returning a Value or tuple of Values specifying the  ONNX outputs whose values correspond to the original PyTorch return values  of the autograd Function (or None if an output is not supported by ONNX).  Arguments:    g (Graph): graph to write the ONNX representation into    inputs (Value...): list of values representing the variables which contain        the inputs for this function  """</span><span class="token keyword">class</span> <span class="token class-name">Value</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""Represents an intermediate tensor value computed in ONNX."""</span>  <span class="token keyword">def</span> <span class="token function">type</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns the Type of the value."""</span><span class="token keyword">class</span> <span class="token class-name">Type</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">sizes</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns a tuple of ints representing the shape of a tensor this describes."""</span><span class="token keyword">class</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">op</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> opname<span class="token punctuation">,</span> <span class="token operator">*</span>inputs<span class="token punctuation">,</span> <span class="token operator">**</span>attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Create an ONNX operator 'opname', taking 'args' as inputs    and attributes 'kwargs' and add it as a node to the current graph,    returning the value representing the single output of this    operator (see the `outputs` keyword argument for multi-return    nodes).    The set of operators and the inputs/attributes they take    is documented at https://github.com/onnx/onnx/blob/master/docs/Operators.md    Arguments:        opname (string): The ONNX operator name, e.g., `Abs` or `Add`.        args (Value...): The inputs to the operator; usually provided            as arguments to the `symbolic` definition.        kwargs: The attributes of the ONNX operator, with keys named            according to the following convention: `alpha_f` indicates            the `alpha` attribute with type `f`.  The valid type specifiers are            `f` (float), `i` (int), `s` (string) or `t` (Tensor).  An attribute            specified with type float accepts either a single float, or a            list of floats (e.g., you would say `dims_i` for a `dims` attribute            that takes a list of integers).        outputs (int, optional):  The number of outputs this operator returns;            by default an operator is assumed to return a single output.            If `outputs` is greater than one, this functions returns a tuple            of output `Value`, representing each output of the ONNX operator            in positional.    """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3、动态图的尺寸"><a href="#3、动态图的尺寸" class="headerlink" title="3、动态图的尺寸"></a>3、动态图的尺寸</h2><p>由于pytorch是动态图，所以就算是在onnx的源码中添加了运算符操作之后，也可能出现问题，问题就是不知道input的尺寸（当创建模型的时候input尺寸是可变的的话）所以也可以看看笔者上边的创建模型的代码，在def forward(self, x)这个函数中，笔者将原来的 x4 = nn.Upsample(size=l3.size()[2:], mode=’bilinear’, align_corners=False)(x4)注释掉了，而是写成了 x4 = nn.Upsample(size=[60,34], mode=’bilinear’, align_corners=False)(x4)，这样子就是把input的尺寸写死了。所以在调用ncnn模型进行前向传播的时候也要注意在将图片输入网络之前一定要将尺寸处理为与模型中的尺寸一致。</p><p>完成如上操作确定没错，运行在第一部分提到的脚本，可以生成一个lw50.onnx文件</p><p><img src="1568013888302.png" alt="生成模型"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> onnx </tag>
            
            <tag> ncnn </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开学随记</title>
      <link href="/2019/09/08/kai-xue-sui-ji/"/>
      <url>/2019/09/08/kai-xue-sui-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="开学随记"><a href="#开学随记" class="headerlink" title="开学随记"></a>开学随记</h1><p>因为最近发生一些事，和从小一起长大的朋友进行了一次促膝长叹，一直觉得她三观正，这次我终于能静下心认真把她的一些话听进去了。可能因为家庭氛围原因，我一直以来过得比较自我，确实是共情能力较差，到现在为止很多关系也处理的不好，也从没有觉得自己做错过什么事，甚至会想原因为自己辩解，希望现在意识到还不算太晚。</p><p>可能最近水逆，刚刚意识到性格上的问题，又发现现在cv的算法岗超级难拥有好的大厂offer。之前某群群友劝退机器学习的时候我还超级不赞同，然而，在字节跳动实习的师兄告诉我现在的形势后我真的慌了。顶会+大厂实习+比赛top至少两个大厂cv岗才比较稳。想想自己要啥啥没有，真的猛男落泪了。现在这个形势啊，就算上车了也有被优化被裁的风险，所以还要想办法进一个核心能赚钱的业务组。现在人工智能也走上现实的道路，很多公司都烧不起钱了，业务不能落地也就只是鸡肋。之前做的A公司的项目就如此黄掉了。想想师兄编程能力那么强找实习的时候都没有cv组要他，最后被一个nlp组捞了。真的感觉我太南了。</p><p>相比起来确实nlp的岗位和机会更多，但我已经做了这么久的cv了，虽然也没有什么能摆上台面的成果。就此qiut掉，导师那边也不好交代，但是找工作秋招的时候只有一段大厂实习，也是真的难拿到好offer 啊。A公司实习给正式offer 的名额又那么少。我真的太南太纠结了。就怕错过一次又一次的机会。今天开学班级同学自我介绍，发现很多同学都有很多段大厂实习了，阿里的，字节跳动的，网易的…….所以为什么我本科毕业那会儿要偷懒，不听师兄建议去找个实习。躺着的时候的确舒服，然而现在慌了。</p><p>继续cv还是选择相对没有那么内卷的nlp，还是直接转研发去写写java？或者申请去思科实习一年，延毕一年？</p><p>反正现在我是真的实力劝退cv了，nlp好歹还有搜索，广告推荐之类的。想想现在在A公司实习做cv的师兄师姐们，休着12点左右下班的福报，挨着领导的骂，留下来的offer又拿不到，还得费心自己准备秋招。希望我明年能从容一点。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下编译安装NCNN</title>
      <link href="/2019/08/21/linux-xia-bian-yi-an-zhuang-ncnn/"/>
      <url>/2019/08/21/linux-xia-bian-yi-an-zhuang-ncnn/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux下编译安装NCNN"><a href="#Linux下编译安装NCNN" class="headerlink" title="Linux下编译安装NCNN"></a>Linux下编译安装NCNN</h1><p>首先要确保自己的cmake版本为3.10或者以上，低于这个版本的可以按照 <a href="https://yyingbiu.github.io/2019/08/21/sheng-gao-cmake-ban-ben/">这篇博文</a>配置一下</p><p>然后安装g++ cmake protobuf</p><pre class="line-numbers language-shell"><code class="language-shell">$ wget https://sdk.lunarg.com/sdk/download/1.1.92.1/linux/vulkansdk-linux-x86_64-1.1.92.1.tar.gz?Human=true -O vulkansdk-linux-x86_64-1.1.92.1.tar.gz$ tar -xf vulkansdk-linux-x86_64-1.1.92.1.tar.gz# setup env$ export VULKAN_SDK=`pwd`/1.1.92.1/x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再编译NCNN</p><pre class="line-numbers language-shell"><code class="language-shell">$ git clone https://github.com/Tencent/ncnn.git$ cd <ncnn-root-dir>$ mkdir -p build$ cd build# cmake option NCNN_VULKAN for enabling vulkan$ cmake -DNCNN_VULKAN=OFF ..$ make -j4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再编译example验证是否安装成功</p><p>首先应该确保自己已经编译安装好了opencv 没有安装可以 <a href="https://yyingbiu.github.io/2019/07/08/linux-cao-zuo-xi-tong-xia-pei-zhi-opencv-3-2-openpose-caffe/#toc-heading-2">参考博文</a> 安装</p><pre class="line-numbers language-shell"><code class="language-shell">$ cd <ncnn-root-dir><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再用自己喜欢的编辑器打开CMakeLists.txt，找到Opencv的设置，将其设置为ON</p><p><img src="1566398726395.png" alt="找opencv设置"></p><p>然后再找到最后的将add_subdirectory(examples)的注释符号删除</p><p><img src="1566398770296.png" alt="找example设置"></p><p>之后再编译</p><pre class="line-numbers language-shell"><code class="language-shell">$ mkdir -p build$ cd build$ cmake ..$ make -j4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后进行验证</p><pre class="line-numbers language-shell"><code class="language-shell">$ cd <ncnn-root-dir>$ cp examples/squeezenet_v1.1.param  build/examples$ cp examples/squeezenet_v1.1.bin  build/examples$ cd build/examples# yourimage.jpg 自己的图片的路径$ ./squeezenet yourimage.jpg <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后的结果输出的是最像的三种类型的id，可以通过查看 examples/synset_words.txt来确认类型</p><pre class="line-numbers language-shell"><code class="language-shell">output top-3 class-id and score404 = 0.990290908 = 0.004464405 = 0.003941<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安装配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>升高cmake版本</title>
      <link href="/2019/08/21/sheng-gao-cmake-ban-ben/"/>
      <url>/2019/08/21/sheng-gao-cmake-ban-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="升高cmake版本"><a href="#升高cmake版本" class="headerlink" title="升高cmake版本"></a>升高cmake版本</h1><p>1、首先检查现在cmake的版本</p><pre class="line-numbers language-shell"><code class="language-shell">cmake --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1566376230794.png" alt></p><p>2、将现有的卸载掉</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt remove cmake<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、下载符合自己要求的二进制文件，我下载的版本为cmake-3.15.2-Linux-x86_64.sh<a href="https://cmake.org/download/" target="_blank" rel="noopener">下载地址</a></p><p>4、进行安装</p><pre class="line-numbers language-shell"><code class="language-shell">chmod +x /path/to/cmake-3.15.2-Linux-x86_64.shsudo /path/to/cmake-3.15.2-Linux-x86_64.sh# 脚本安装到`/opt/cmake-3.15.2-Linux-x86_64`，因此为了获得`cmake`命令，请创建一个符号链接sudo ln -s /opt/cmake-3.15.2-Linux-x86_64/bin/* /usr/local/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>5、最后验证一下是否安装完成</p><pre class="line-numbers language-shell"><code class="language-shell">cmake --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RefineNet Multi-Path Refinement Networks for High-Resolution Semantic Segmentation</title>
      <link href="/2019/08/21/refinenet/"/>
      <url>/2019/08/21/refinenet/</url>
      
        <content type="html"><![CDATA[<h1 id="RefineNet-Multi-Path-Refinement-Networks-for-High-Resolution-Semantic-Segmentation"><a href="#RefineNet-Multi-Path-Refinement-Networks-for-High-Resolution-Semantic-Segmentation" class="headerlink" title="RefineNet: Multi-Path Refinement Networks for High-Resolution Semantic Segmentation"></a>RefineNet: Multi-Path Refinement Networks for High-Resolution Semantic Segmentation</h1><h2 id="1-Abstract"><a href="#1-Abstract" class="headerlink" title="1.Abstract"></a>1.Abstract</h2><p>最近，很多CNN网络在物体检测领域有很出色的表现，甚至在语义分割中也是首要选择，但是由于这些网络的pooling和卷积步长（convolution stride）的存在，feature map会越来越小，导致损失一些细粒度的信息（低层feature map有较丰富的细粒度信息，高层feature map则拥有更抽象，粗粒度的信息）。所以作者提出了refineNet。这种通用的多路径优化网络（a generic multi-path refinement network），它是基于Resnet的残差连接的思想设计的，可以充分利用下采样过程损失的信息，使dense prediction更为精准。同时也提出了 chained residual pooling，它能够以一种有效的方式来捕捉背景上下文信息。作者的模型在许多数据集上都取得了stateof-the-art的结果，特别是在PASCAL VOC 2012 dataset上，IOU为83.4分。</p><h2 id="2-introduction"><a href="#2-introduction" class="headerlink" title="2.introduction"></a>2.introduction</h2><p>语义分割就是给图像中的每个像素点都分配一个类别的label。目前流行的深度网络，比如VGG，Resnet等，在做语义分割的时候，明显有一些局限性，多阶段的pooling和卷积操作，会损失许多精细的图像结构。所以对于分类问题而言，只需要深层的强语义信息（利用VGG和Resnet网络）就能表现较好，但是对于稠密预测问题，比如逐像素的图像分割问题，除了需要强语义信息之外，还需要高空间分辨率。</p><p>针对这些问题，很多方法都提出了解决方案：</p><ol><li>针对pooling下采样过程中的分辨率损失，采用deconvolution恢复。但是却很难恢复位置信息。</li><li>使用空洞卷积保持分辨率，增大感受野，但是这么做有两个缺点：A.明显增加了计算代价。B.空洞卷积是一种粗糙的sub-sampling，因此容易损失重要信息。</li><li>通过skip connection来产生高分辨率的预测。</li></ol><p>关于skip connection<a href="https://yyingbiu.github.io/2019/08/19/dui-skip-connect-can-chai-lian-jie-de-li-jie/">为什么有效可以参考博文</a></p><p>作者认为高级语义特征可以更好地进行分类识别，而低级别视觉特征有助于生成清晰、详细的边界。所以作者认为第3点是很好的思路。基于此，作者提出了RefineNet，其主要贡献为：</p><ol><li>提出一种多路径refinement网络，称为RefineNet。这种网络可以使用各个层级的features，使得语义分割更为精准。</li><li>RefineNet中所有部分都利用residual connections（identity mappings），使得梯度更容易短向或者长向前传，使段端对端的训练变得更加容易和高效。</li><li>提出了一种叫做chained residual pooling的模块，它可以从一个大的图像区域捕捉背景上下文信息。</li></ol><h2 id="3-Proposed-Method"><a href="#3-Proposed-Method" class="headerlink" title="3.Proposed Method"></a>3.Proposed Method</h2><p><img src="1566223782409.png" alt="图一"></p><p> 标准的多层CNN网络为图（a）所示，经过连续的下采样，丢失了很多信息。如图（b）所示的空洞卷积（Dilated convolutions ）通过atrous filters补救了（a）的缺点，但是这样子会增加参数，从而增加计算量。（c）所示为本文的结构，利用不同层次的细节信息，将不同阶段的卷积特征通过残差连接来融合，从而获得高分辨率预测。下面将信息的叙述（c）图所示的结构是怎么样的。</p><h3 id="3-1Multi-Path-Refinement"><a href="#3-1Multi-Path-Refinement" class="headerlink" title="3.1Multi-Path Refinement"></a>3.1Multi-Path Refinement</h3><p>首先使用RefineNet的残差连接能让梯度在网络的深处和浅处都能很好的传播，保证了可以端到端的训练。我们将pre-trained ResNet （trained with ImageNet）（ps:关于使用如何使用pre-trained ResNet可以参考博文）分为四个blocks，并采用4个RefineNet的级联结构，每个RefinetNet都接收一个相应的Resnet block的输出和之前的RefineNet。如图(c)图所示。</p><p><img src="1566266332759.png" alt="Multi-Path Refinement"></p><p>该网络将在ImageNet上预训练的ResNet根据feature map的尺寸的大小分为4个block，外加一个带有4个RefineNet单元的4级联结构，每一个RefineNet单元与对应的block进行直接相连，同时四个RefineNet单元进行级联。同时，这种结构可以进行多种变换，一个单元可以接受所有block作为输入。每个RefeineNet单元的结构相同，但之间的参数并不相关，因此，每一个单元可以针对对应层次的细节进行调整。</p><p>根据上图c，从ResNet的block4开始，将RefineNet4与ResNet对用的block4进行直接连接。RefineNet4只有一个输入，RefineNet4后接一系列的卷积层用于调整与训练的ResNet权重，下一阶段，RefineNet4的输出与ResNet3的输出作为RefineNet3的2通路输入。RefineNet3的作用时利用从ResNet block3中的较高分辨率的feature map增强RefienNet4输出的低分辨率的feature map。如此重复。最终生成的高分辨率的feature map送入一个密集的soft-max分类层。产生用于预测的score map。得到的score map通过基于双线性插值进行上采样得到与原图大小相同的score map。</p><p>该网路的一个重要部分在于在ResNet block与RefineNet之间引入了长距离的残差连接。在前向过程中，残差连接可以将低层编码的可视化细节信息用于增强粗糙的高级别的feature map。训练时，这些连接可以将梯度直接传递到前端的卷积层中。</p><h3 id="3-2-RefineNet"><a href="#3-2-RefineNet" class="headerlink" title="3.2 RefineNet"></a>3.2 RefineNet</h3><p><img src="1566269235658.png" alt="RefineNet"></p><p>如上图（a）是refineNet的结构，每个RefineNet单元可以被修改为不同数量的尺寸与通道数不限的输入。其包括了以下几种小模块。</p><p><strong>（1）Residual convolution unit</strong></p><p>RefineNet的组成结构中的第一个，包含一系列的可调整的卷积集合，用于针对目标任务对与训练的ResNet权重进行微调。最终，每个输入通路经过两个RCU模块。RCU是原始ResNet中卷积单元的一个精简版本。移除了原始版本中的BN层。RefineNet4的卷积核数量为512，其他的为256。</p><p><strong>（2）Multi-resolution fusion</strong></p><p>所有通路的输入通过一个多尺寸融合模块得到一个高分辨率的feature map。该模块首先用卷积调整输入，生成相同特征维度，然后，通过上采样将所有尺寸调整为输入中最大的尺寸。最终，所有得到的feature map通过相加融合得到最终的feature map。对于输入特征通过卷积的调整可以将不同通路的特征值进行适当的调整，利于后面的特征融合。如果只有一个通路特征（如图Multi-Path Refinement中的(c)的RefineNet-4），则不会发生变化，直接穿过block。</p><p><strong>（3）Chained residual pooling</strong></p><p>该模块的作用是从较大图片区域中捕捉背景上下文信息。利用可学习的权重，通过不同窗口大小的卷积池化操作并将其特征进行融合高效的实现特征池化操作。该组件由一系列不同的pooling block连接组成，每个pooling block由一层max-pooling和stride为1的卷积组成。每个block的输入是前一个block的输出，<strong>因此，当前的block可以再利用前一层block得到的结果，从而再不使用大尺寸窗口的条件下可以访问到更多区域的信息。</strong>所有pooling blocks 输出的结果通过残差连接进行加和融合。block中每一层池化后接一个卷积操作，这作为加权求和的权重层，而在训练过程中，卷积层通过调整自己参数（相当于权值）相当于调整池化block的重要性。</p><p><strong>（4）Output convolutions</strong></p><p>每个RefineNet的最后一个步是另一种类型的RCU组件。为了反应RefineNet-1的block上的效果，在soft-max预测的前面添加了两个额外的RCU模块。这样做的目标是对多路径融合特征图进行非线性操作，生成特征进行进一步处理或最终预测，在经过此模块后，特征的维度并未发生变化。</p><h3 id="3-3-Identity-Mappings-in-RefineNet"><a href="#3-3-Identity-Mappings-in-RefineNet" class="headerlink" title="3.3 Identity Mappings in RefineNet"></a>3.3 Identity Mappings in RefineNet</h3><p><a href="https://yyingbiu.github.io/2019/08/19/dui-skip-connect-can-chai-lian-jie-de-li-jie/">关于什么是identity mapping可以参考博文</a></p><p>RefineNet中的所有卷积组件受ResNet启发，进行恒定映射。这种形式可以进行促进梯度的反向传播，同时可以对多通路的增强网络进行端到端的学习。应用残差连接，可以将梯度从一个block传到另一个block中,这种做法有利于保持一个干净的信息通道，而不会被其他非线性网络层或者组件干扰。而非线性操作主要应用在主信息通路中。在所有的卷积单元中都加了ReLU非线性操作，在链式残差池化中只含有一个ReLU非线性模块。实验发现，加入ReLU操作后，降低了模型对学习率的敏感度，而且对梯度的影响较小。</p><p>RefineNet中由长距离及短距离两种残差连接。短链接是指RCU或链式残差池化中的局部连接，长连接是指RefineNet模型与ResNet blocks之间的连接。经过长连接，梯度可以直接传递到ResNet前端的网络中，进而实现端到端的训练所有网络组件。</p><p>fusion block 将具有一定的维度或者尺寸的残差连接进行求和融合。这里多尺寸融合模块的作用类似于ResNet中传统残差卷积的融合作用。在RefineNet尤其是在fusion block中有特征的线性变换操作，像线性特征维度降低和双线性上采样。ResNet中的两个blocks的连接，用一个卷积层进行特征维度的适应。由于只有线性操作。因此，梯度可以在网络中进行高效的传播。</p><h2 id="4-Experiments"><a href="#4-Experiments" class="headerlink" title="4.Experiments"></a>4.Experiments</h2><p>作者在七个著名的语义分割数据集上做了实验((NYUDv2, PASCAL VOC 2012, SUN-RGBD, PASCAL-Context, Cityscapes, ADE20K MIT)，和Person-Part主要是做（object parsing的）。在语义分割上采用intersection-over-union (IoU)和 pixel accuracy和mean accuracy over all classes来衡量。具体意义可以参考博文<a href="https://yyingbiu.github.io/2019/07/18/tu-xiang-fen-ge/">语义分割综述</a>。</p><p>实验结果如下</p><p><img src="1566310601711.png" alt="Segmentation results on NYUDv2"></p><p><img src="1566310649815.png" alt="Segmentation results on the Cityscapes test set"></p><p><img src="1566310744692.png" alt="Results on the PASCAL VOC 2012 test set"></p><p><img src="1566310804662.png" alt="分割结果"></p><p>更多的实验结果可以在原论文中看，另外作者也做了实验来证明他提出的三个模块的有效性，有兴趣的也可以看一看。</p><p><a href="https://arxiv.org/abs/1611.06612" target="_blank" rel="noopener">refinenet paper</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语义分割 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对skip connect 和Identity Mapping的理解</title>
      <link href="/2019/08/19/dui-skip-connect-can-chai-lian-jie-de-li-jie/"/>
      <url>/2019/08/19/dui-skip-connect-can-chai-lian-jie-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="对skip-connect-和Identity-Mapping的理解"><a href="#对skip-connect-和Identity-Mapping的理解" class="headerlink" title="对skip connect 和Identity Mapping的理解"></a>对skip connect 和Identity Mapping的理解</h1><p><a href="https://arxiv.org/pdf/1512.03385.pdf" target="_blank" rel="noopener">残差网络的论文</a></p><p><img src="1563531567710.png" alt></p><p>如上图所示就是论文中的resnet网络的skip block的示意图。我们可以使用一个非线性变化函数来描述一个网络的输入输出，即输入为X，输出为F（x），F通常包括了卷积，激活等操作。</p><p>当我们强行将一个输入添加到函数的输出的时候，虽然我们仍然可以用G（x）来描述输入输出的关系，但是这个G（x）却可以明确的拆分为F（x）和X的线性叠加。<strong>这就是skip connect的思想，将输出表述为输入和输入的一个非线性变换的线性叠加，没用新的公式，没有新的理论，只是换了一种新的表达。</strong>它解决了深层网络的训练问题</p><h2 id="1、为什么使用skip-connect"><a href="#1、为什么使用skip-connect" class="headerlink" title="1、为什么使用skip connect"></a>1、为什么使用skip connect</h2><p>在深度学习中，网络越深表达能力越强，性能越好。但随着网络深度的加深，一些其他的问题也会产生，比如梯度消失，梯度爆炸，解决这些问题也有一些方法，比如BN层，Relu等各种激活函数，这些方法的改善能力有限。</p><h3 id="关于梯度问题"><a href="#关于梯度问题" class="headerlink" title="关于梯度问题"></a>关于梯度问题</h3><p>深度学习依靠误差的链式反向传播来进行参数更新，假如我们有这样一个函数<br>$$<br>\begin{array}{c}{f^{\prime}=f\left(\boldsymbol{x}, \boldsymbol{w}_{\boldsymbol{f}}\right)} \\ {g^{\prime}=g\left(f^{\prime}\right)} \\ {y^{\prime}=k\left(g^{\prime}\right)} \\ {\text {cost}=\text {criterion}\left(y, y^{\prime}\right)}\end{array}<br>$$<br>假设f为卷积层，g为激活层，k为分类层，则cost对f的导数为：<br>$$<br>\frac{d\left(f^{\prime}\right)}{d\left(\boldsymbol{w}_{f}\right)} \times \frac{d\left(g^{\prime}\right)}{d\left(f^{\prime}\right)} \times \frac{d\left(y^{\prime}\right)}{d\left(g^{\prime}\right)} \times \frac{d(\cos t)}{y^{\prime}}<br>$$<br>其存在的问题也很明显了，一旦其中某一个导数很小，多次连乘后梯度可能越来越小，<strong>这就是常说的梯度消散</strong>，对于深层网络，传到浅层几乎就没了。但是如果使用了残差，<strong>每一个导数就加上了一个恒等项目1</strong><br>$$<br>\frac{dh}{dx}=\frac{d\left(f+x\right)}{dx}=\frac{df}{dx}+1<br>$$<br>此时就算原来的导数df/dx很小，这时候误差仍然能够有效的反向传播，这就是核心思想。</p><h3 id="模型退化"><a href="#模型退化" class="headerlink" title="模型退化"></a>模型退化</h3><p><a href="http://www.10tiao.com/html/162/201801/2650735824/1.html" target="_blank" rel="noopener">对于模型退化的详细解读</a></p><p>神经网络的退化才是难以训练深层网络根本原因所在，而不是梯度消散。<strong>虽然梯度范数大，但是如果网络的可用自由度对这些范数的贡献非常不均衡，</strong>也就是每个层中只有少量的隐藏单元对不同的输入改变它们的激活值，而大部分隐藏单元对不同的输入都是相同的反应，此时整个权重矩阵的秩不高。并且随着网络层数的增加，连乘后使得整个秩变的更低。</p><p>这也是我们常说的网络退化问题，虽然是一个很高维的矩阵，但是大部分维度却没有信息，表达能力没有看起来那么强大。</p><p>残差连接强制打破了网络的对称性</p><p><img src="1563537824420.png" alt></p><p>第1种（图a），输入权重矩阵(灰色部分)完全退化为0，则输出W已经失去鉴别能力，此时加上残差连接(蓝色部分)，网络又恢复了表达能力。第2种(图b),输入对称的权重矩阵，那输出W一样不具备这两部分的鉴别能力，添加残差连接(蓝色部分)可打破对称性。</p><h2 id="2、Identity-Mapping是什么"><a href="#2、Identity-Mapping是什么" class="headerlink" title="2、Identity Mapping是什么"></a>2、Identity Mapping是什么</h2><p>这个概念出自论文<a href="https://arxiv.org/pdf/1603.05027.pdf" target="_blank" rel="noopener">Identity Mapping in Deep Residual Networks</a>这篇论文也主要分析的是resnet中使用identity mappingx效果好的原因。</p><p><img src="1563531567710.png" alt="residual"></p><p>上图为resnet的结构，shortcut结构为右边链路，可以用h(x)表示，则上图的h(x)=x,这是一个恒等映射。h表示shortcut使用什么形式的变换,作者提出了一个更通用的表达式。作者提出的改进为让$f(y_{l})$直接为$y_{l}$即去掉relu层<br>$$<br>\begin{aligned} \mathbf{y}_{l}=&amp; h\left(\mathbf{x}_{l}\right)+\mathcal{F}\left(\mathbf{x}_{l}, \mathcal{W}_{l}\right) \\ &amp; \mathbf{x}_{l+1}=f\left(\mathbf{y}_{l}\right) \end{aligned}<br>$$<br>而Identity mapping 其实就是h(x)=x，作者提出的改进为让$f(y_{l})$直接为$y_{l}$即去掉relu层。这样子相当于传向下一层的也是一个identity mapping。</p><p>分析shortcut 取其他非 Identity map 的变换时结果不好的原因，取线性映射为例$h(x)=k x$<br>$$<br>\mathbf{x}_{l+1}=\lambda_{l} \mathbf{x}_{l}+\mathcal{F}\left(\mathbf{x}_{l}, \mathcal{W}_{l}\right)<br>$$<br>则第L层可以表示为<br>$$<br>\mathbf{x}_{L}=\left(\prod_{i=l}^{L-1} \lambda_{i}\right) \mathbf{x}_{l}+\sum_{i=l}^{L-1} \hat{\mathcal{F}}\left(\mathbf{x}_{i}, \mathcal{W}_{i}\right)<br>$$<br>进行反向传播时求导为<br>$$<br>\frac{\partial \mathcal{E}}{\partial \mathbf{x}_{l}}=\frac{\partial \mathcal{E}}{\partial \mathbf{x}_{L}}\left(\left(\prod_{i=l}^{L-1} \lambda_{i}\right)+\frac{\partial}{\partial \mathbf{x}_{l}} \sum_{i=l}^{L-1} \hat{\mathcal{F}}\left(\mathbf{x}_{i}, \mathcal{W}_{i}\right)\right)<br>$$<br>此网络的后向传播过程受$\lambda$控制，若$\lambda$&gt;1，则第一项会非常大，因而会导致梯度爆炸；若$\lambda$&lt;1，则第一项会非常小，甚至消失。反向传播的信号只能从第二项传递，但是其优化难度更大。综上，这个结构妨碍了信息的传播，恒等映射更好。</p><p>更深入的理解可以看论文：</p><p><a href="http://openaccess.thecvf.com/content_cvpr_2016/html/He_Deep_Residual_Learning_CVPR_2016_paper.html" target="_blank" rel="noopener">Deep Residual Learning for Image Recognition</a></p><p><a href="https://arxiv.org/pdf/1505.00387.pdf" target="_blank" rel="noopener">Highway Networks</a></p><p><a href="https://arxiv.org/pdf/1701.09175.pdf" target="_blank" rel="noopener">Skip Connections Eliminate Singularities</a></p><p><a href="http://proceedings.mlr.press/v48/shang16.pdf" target="_blank" rel="noopener">Understanding and Improving Convolutional Neural Networks via Concatenated Rectified Linear Units</a></p><p><a href="https://arxiv.org/pdf/1612.07771.pdf" target="_blank" rel="noopener">Highway and Residual Networks learn Unrolled Iterative Estimation</a></p><p><a href="https://arxiv.org/abs/1710.04773" target="_blank" rel="noopener">Residual Connections Encourage Iterative Inference</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码编译pytorch及其编译知识</title>
      <link href="/2019/07/31/yuan-ma-bian-yi-pytorch-ji-qi-bian-yi-zhi-shi/"/>
      <url>/2019/07/31/yuan-ma-bian-yi-pytorch-ji-qi-bian-yi-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="源码编译pytorch及其编译知识"><a href="#源码编译pytorch及其编译知识" class="headerlink" title="源码编译pytorch及其编译知识"></a>源码编译pytorch及其编译知识</h1><h2 id="1、pytorch编译的相关知识"><a href="#1、pytorch编译的相关知识" class="headerlink" title="1、pytorch编译的相关知识"></a>1、pytorch编译的相关知识</h2><h3 id="python-setup-py-install的编译过程"><a href="#python-setup-py-install的编译过程" class="headerlink" title="python setup.py install的编译过程"></a>python setup.py install的编译过程</h3><p>PyTorch的编译首先是python风格的编译，使用了python的setuptools编译系统。以最基本的编译安装命令python setup.py install 为例，这一编译过程包含了如下几个主要阶段：</p><p>1 ，setup.py入口；</p><p>2，提前检查依赖项；</p><p>3，使用cmake生成Makefile；</p><p>4，Make命令——中间源文件的产生；</p><p>5，Make命令——编译三方库；</p><p>6，Make命令——生成静态库、动态库、可执行文件；</p><p>7，Make命令——拷贝文件到合适路径下；</p><p>8，setuptools之build_py；</p><p>9，setuptools之build_ext；</p><p>10，setuptools之install_lib。</p><h3 id="setup-py文件的书写语法"><a href="#setup-py文件的书写语法" class="headerlink" title="setup.py文件的书写语法"></a>setup.py文件的书写语法</h3><p>Python 有非常丰富的第三方库可以使用，很多开发者会向 <a href="https://pypi.org/" target="_blank" rel="noopener">pypi</a> 上提交自己的 Python 包。要想向 pypi 包仓库提交自己开发的包，首先要将自己的代码打包，才能上传分发。</p><p>Python 库打包的格式包括 <code>Wheel</code> 和 <code>Egg</code>。Egg 格式是由 setuptools 在 2004 年引入，而 Wheel 格式是由 PEP427 在 2012 年定义。使用 <code>Wheel</code> 和 <code>Egg</code> 安装都不需要重新构建和编译，其在发布之前就应该完成测试和构建。Egg<code>和</code>Wheel<code>本质上都是一个 zip 格式包，Egg 文件使用</code>.egg<code>扩展名，Wheel 使用</code>.whl` 扩展名。Wheel 的出现是为了替代 Egg，其现在被认为是 Python 的二进制包的标准格式。</p><p>Python 库打包分发的关键在于编写 <code>setup.py</code> 文件。<code>setup.py</code> 文件编写的规则是从 setuptools 或者 distuils 模块导入 setup 函数，并传入各类参数进行调用。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf-8</span><span class="token keyword">from</span> setuptools <span class="token keyword">import</span> setup<span class="token comment" spellcheck="true"># or</span><span class="token comment" spellcheck="true"># from distutils.core import setup  </span>setup<span class="token punctuation">(</span>        name<span class="token operator">=</span><span class="token string">'demo'</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 包名字</span>        version<span class="token operator">=</span><span class="token string">'1.0'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># 包版本</span>        description<span class="token operator">=</span><span class="token string">'This is a test of the setup'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># 简单描述</span>        author<span class="token operator">=</span><span class="token string">'huoty'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 作者</span>        author_email<span class="token operator">=</span><span class="token string">'sudohuoty@163.com'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 作者邮箱</span>        url<span class="token operator">=</span><span class="token string">'https://www.konghy.com'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true"># 包的主页</span>        packages<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'demo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true"># 包</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://setuptools.readthedocs.io/en/latest/setuptools.html" target="_blank" rel="noopener">更多的参数可以参考</a></p><h4 id="find-packages模块"><a href="#find-packages模块" class="headerlink" title="find_packages模块"></a>find_packages模块</h4><p>对于简单工程来说，手动增加 packages 参数是容易。而对于复杂的工程来说，可能添加很多的包，这是手动添加就变得麻烦。Setuptools 模块提供了一个 <code>find_packages</code> 函数,它默认在与 setup.py 文件同一目录下搜索各个含有 <code>__init__.py</code> 的目录做为要添加的包。</p><pre class="line-numbers language-python"><code class="language-python">find_packages<span class="token punctuation">(</span>where<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">,</span> exclude<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> include<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>find_packages</code> 函数的第一个参数用于指定在哪个目录下搜索包，参数 <strong>exclude</strong> 用于指定排除哪些包，参数 <strong>include</strong> 指出要包含的包。</p><p>默认情况下 setup.py 文件只在其所在的目录下搜索包。如果不用 find_packages，想要找到其他目录下的包，也可以设置 package_dir 参数，其指定哪些目录下的文件被映射到哪个源码包，如: <code>package_dir={&#39;&#39;: &#39;src&#39;}</code> 表示 “root package” 中的模块都在 src 目录中。</p><h4 id="生成脚本"><a href="#生成脚本" class="headerlink" title="生成脚本"></a>生成脚本</h4><p>有两个参数 <code>scripts</code> 参数或 <code>console_scripts</code> 可用于生成脚本。</p><p><code>entry_points</code> 参数用来支持自动生成脚本，其值应该为是一个字典，从 entry_point 组名映射到一个表示 entry_point 的字符串或字符串列表，如：</p><pre class="line-numbers language-python"><code class="language-python">setup<span class="token punctuation">(</span>    <span class="token comment" spellcheck="true"># other arguments here...</span>    entry_points<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'console_scripts'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">'foo=foo.entry:main'</span><span class="token punctuation">,</span>            <span class="token string">'bar=foo.entry:main'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>scripts</code> 参数是一个 list，安装包时在该参数中列出的文件会被安装到系统 PATH 路径下。如：</p><pre class="line-numbers language-python"><code class="language-python">scripts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'bin/foo.sh'</span><span class="token punctuation">,</span> <span class="token string">'bar.py'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用如下方法可以将脚本重命名，例如去掉脚本文件的扩展名(.py、.sh):</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> setuptools<span class="token punctuation">.</span>command<span class="token punctuation">.</span>install_scripts <span class="token keyword">import</span> install_scripts<span class="token keyword">class</span> <span class="token class-name">InstallScripts</span><span class="token punctuation">(</span>install_scripts<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        setuptools<span class="token punctuation">.</span>command<span class="token punctuation">.</span>install_scripts<span class="token punctuation">.</span>install_scripts<span class="token punctuation">.</span>run<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Rename some script files</span>        <span class="token keyword">for</span> script <span class="token keyword">in</span> self<span class="token punctuation">.</span>get_outputs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> basename<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".py"</span><span class="token punctuation">)</span> <span class="token operator">or</span> basename<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".sh"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dest <span class="token operator">=</span> script<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"moving %s to %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>script<span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">)</span>            shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>script<span class="token punctuation">,</span> dest<span class="token punctuation">)</span>setup<span class="token punctuation">(</span>    <span class="token comment" spellcheck="true"># other arguments here...</span>    cmdclass<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">"install_scripts"</span><span class="token punctuation">:</span> InstallScripts    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<strong>cmdclass</strong> 参数表示自定制命令</p><h4 id="ext-modules"><a href="#ext-modules" class="headerlink" title="ext_modules"></a>ext_modules</h4><p><code>ext_modules</code> 参数用于构建 C 和 C++ 扩展扩展包。其是 Extension 实例的列表，每一个 Extension 实例描述了一个独立的扩展模块，扩展模块可以设置扩展包名，头文件、源文件、链接库及其路径、宏定义和编辑参数等。如：</p><pre class="line-numbers language-python"><code class="language-python">setup<span class="token punctuation">(</span>    <span class="token comment" spellcheck="true"># other arguments here...</span>    ext_modules<span class="token operator">=</span><span class="token punctuation">[</span>        Extension<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span>                  glob<span class="token punctuation">(</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>here<span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token string">'*.c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  libraries <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'rt'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>                  include_dirs<span class="token operator">=</span><span class="token punctuation">[</span>numpy<span class="token punctuation">.</span>get_include<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://docs.python.org/3.6/distutils/setupscript.html#preprocessor-options" target="_blank" rel="noopener">详细可参照</a></p><h4 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h4><p>Setup.py 文件有很多内置的的命令，可以使用 <code>python setup.py --help-commands</code> 查看。如果想要定制自己需要的命令，可以添加 cmdclass 参数，其值为一个 dict。实现自定义命名需要继承 <code>setuptools.Command</code> 或者 <code>distutils.core.Command</code> 并重写 <strong>run</strong> 方法。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> setuptools <span class="token keyword">import</span> setup<span class="token punctuation">,</span> Command<span class="token keyword">class</span> <span class="token class-name">InstallCommand</span><span class="token punctuation">(</span>Command<span class="token punctuation">)</span><span class="token punctuation">:</span>    description <span class="token operator">=</span> <span class="token string">"Installs the foo."</span>    user_options <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">'foo='</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">'Specify the foo to bar.'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">initialize_options</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>foo <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">finalize_options</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>foo <span class="token keyword">in</span> <span class="token punctuation">(</span>None<span class="token punctuation">,</span> <span class="token string">'myFoo'</span><span class="token punctuation">,</span> <span class="token string">'myFoo2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Invalid foo!'</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        install_all_the_things<span class="token punctuation">(</span><span class="token punctuation">)</span>setup<span class="token punctuation">(</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>    cmdclass<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'install'</span><span class="token punctuation">:</span> InstallCommand<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h4><p>如果包依赖其他的包，可以指定 <code>install_requires</code> 参数，其值为一个 list，如：</p><pre class="line-numbers language-python"><code class="language-python">install_requires<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token string">'requests>=1.0'</span><span class="token punctuation">,</span>    <span class="token string">'flask>=1.0'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>指定该参数后，在安装包时会自定从 pypi 仓库中下载指定的依赖包安装。</p><p>此外，还支持从指定链接下载依赖，即指定 <code>dependency_links</code> 参数，如：</p><pre class="line-numbers language-python"><code class="language-python">dependency_links <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"http://packages.example.com/snapshots/foo-1.0.tar.gz"</span><span class="token punctuation">,</span>    <span class="token string">"http://example2.com/p/bar-1.0.tar.gz"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、编译pytorch时可能用到的"><a href="#2、编译pytorch时可能用到的" class="headerlink" title="2、编译pytorch时可能用到的"></a>2、编译pytorch时可能用到的</h2><h3 id="切换cuda版本"><a href="#切换cuda版本" class="headerlink" title="切换cuda版本"></a>切换cuda版本</h3><p>查看当前版本</p><pre class="line-numbers language-shell"><code class="language-shell">nvcc --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在同时安装完cuda 8和cuda 9后，路径采用以下方法写进.bashrc中</p><pre class="line-numbers language-shell"><code class="language-shell">export PATH=\$PATH:/usr/local/cuda/binexport LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:/usr/local/cuda/lib64  export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/cuda/lib64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="1564578895257.png" alt="1564578895257"></p><p>从上图可以看到cuda-8和cuda-9是单独的文件夹，但是我们在bashrc中给cuda的PATH是在cuda这个文件夹中，所以系统会在这个文件夹中找相关的文件，所以实现版本切换就是将cuda-8.0或者cuda-9.0软链接到cuda上。</p><p>切换前首先删除cuda文件夹中的东西</p><pre class="line-numbers language-shell"><code class="language-shell">sudo rm -rf cuda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后进行软连接</p><pre class="line-numbers language-shell"><code class="language-shell">sudo ln -s /usr/local/cuda-9.0/ /usr/local/cuda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>确认版本是否切换正确</p><p><img src="1564579300075.png" alt="1564579300075"></p><p>切换到cuda-8同理</p><h2 id="3、编译过程"><a href="#3、编译过程" class="headerlink" title="3、编译过程"></a>3、编译过程</h2><p>首先为了环境的纯净性，还是先创建一个干净的anaconda虚拟环境，我创建了一个python3.6的环境</p><pre class="line-numbers language-shell"><code class="language-shell">conda create -n p36torch python=3.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后激活环境</p><pre class="line-numbers language-shell"><code class="language-shell">conda activate p36torch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后按照官网的安装方式安装，<a href="https://github.com/pytorch/pytorch" target="_blank" rel="noopener">可以参考官网</a></p><p>在conda中安装东西，为了下载速度良心建议还是把源换成清华源，换源方法：</p><pre class="line-numbers language-shell"><code class="language-shell">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/# 设置搜索时显示通道地址conda config --set show_channel_urls yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们如果直接用anaconda安装pytorch其实也是ok的，方式是按照官网，选择适合自己机器的配置，官方会给出安装的命令。<a href="https://pytorch.org/" target="_blank" rel="noopener">官网地址</a></p><p><img src="1564579938046.png" alt="1564579938046"></p><p>这种情况下后面的 -c pytorch的意思是从pytorch的官网下载，如果没有在终端中走代理是会很慢的，所以我们可以直接把-c pytorch去掉，这时候就会从清华的源下载pytorch了。如果实在想从官网下载，可以在终端中走代理，配置方法在楼主的这篇博客中有 <a href="https://yyingbiu.github.io/2019/07/08/Linux%E4%B8%8B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%92%8C%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95/">Linux下科学上网和在终端中使用代理的方法</a></p><p>然后使用的话就在conda命令前加一个proxychains4</p><h3 id="先安装相关依赖"><a href="#先安装相关依赖" class="headerlink" title="先安装相关依赖"></a>先安装相关依赖</h3><pre class="line-numbers language-shell"><code class="language-shell">conda install numpy ninja pyyaml mkl mkl-include setuptools cmake cffi typing# Add LAPACK support for the GPU if neededconda install -c pytorch magma-cuda90 # or [magma-cuda92 | magma-cuda100 ] depending on your cuda version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><pre class="line-numbers language-shell"><code class="language-shell">git clone --recursive https://github.com/pytorch/pytorchcd pytorch# if you are updating an existing checkoutgit submodule syncgit submodule update --init --recursive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装pytorch"><a href="#安装pytorch" class="headerlink" title="安装pytorch"></a>安装pytorch</h3><pre class="line-numbers language-shell"><code class="language-shell">export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}python setup.py install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里特别提一下，由于我在安装的时候先创建了一个新环境，所以在这里我的设定环境变量的命令就是这样子写的：</p><pre class="line-numbers language-shell"><code class="language-shell">export CMAKE_PREFIX_PATH=~/anaconda2/envs/p36torch/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于我在编译的时候遇到了一些问题，在这个项目的issue中发现还应该加上CONDA_PREFIX的路径所以有</p><pre class="line-numbers language-shell"><code class="language-shell">export CONDA_PREFIX=~/anaconda2/envs/p36torch/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://github.com/pytorch/pytorch/pull/15548" target="_blank" rel="noopener">相关讨论可见</a></p>]]></content>
      
      
      <categories>
          
          <category> 安装配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型微调</title>
      <link href="/2019/07/19/mo-xing-wei-diao/"/>
      <url>/2019/07/19/mo-xing-wei-diao/</url>
      
        <content type="html"><![CDATA[<h1 id="模型微调（fine-tune）"><a href="#模型微调（fine-tune）" class="headerlink" title="模型微调（fine-tune）"></a>模型微调（fine-tune）</h1><h2 id="模型微调"><a href="#模型微调" class="headerlink" title="模型微调"></a>模型微调</h2><p>Step 1 :假设我们的神经网络符合下面形式：</p><p>Y=W×X</p><p>Step 2 :现在我们要找到一个W, 使得当 输入X = 2 时，输出Y = 1，也就是希望W = 0.5</p><p>1=W×2</p><p>Step 3: 首先对W 要进行初始化， 初始化的值服从均值为0，方差为1的分布，假设W初始化为0.1</p><p>Y=0.1×X</p><p>Step 4 :当 输入X = 2 时, W = 0.1, 输出Y = 0.2, 这个时候实际值和目标值1的误差是0.8 </p><p>1&lt;—–0.2=0.1×2</p><p>Step 5 :0.8 的误差经过反向传播去更新权值W，假如这次更新为W = 0.2，输出为0.4，与目标值的误差为0.6:</p><p>1&lt;—–0.4=0.2×2</p><p>Step 6 : 可能经过十次或二十次反向传播，W 终于等于我们想要的0.5</p><p>Y=0.5×X</p><p>Step 7 : 如果在更新模型最开始有人告诉你，W的值应该在0.47附近：</p><p>Y=0.47×X</p><p>Step 8 : 那么从最开始训练，你与目标值的误差就只有0.06了，那么可能只要一步两步*，就能将w训练到0.5</p><p>1&lt;——0.94=0.47*2</p><p>总结: Step 7就是相当于给你一个预训练模型（Pre-trained model），Step 8 就是基于这个模型微调（Fine Tune）。相对于你从头开始训练(Training a model from scatch)，微调为你省去大量计算资源和计算时间，提高了计算效率,甚至提高准确率。</p><h2 id="预训练模型（Pre-trained-model）"><a href="#预训练模型（Pre-trained-model）" class="headerlink" title="预训练模型（Pre-trained model）"></a>预训练模型（Pre-trained model）</h2><p>预训练模型就是已经用数据集训练好了的模型。</p><p>现在我们常用的预训练模型就是他人用常用模型，比如VGG16/19，Resnet等模型，并用大型数据集来做训练集，比如Imagenet, COCO等训练好的模型参数。</p><p>正常情况下，我们常用的VGG16/19等网络已经是他人调试好的优秀网络，我们无需再修改其网络结构。</p><p>常用的一些模型如下图所示：</p><p><img src="1563524431752.png" alt="1563524431752"></p><h2 id="使用微调的原因"><a href="#使用微调的原因" class="headerlink" title="使用微调的原因"></a>使用微调的原因</h2><p>卷积神经网络的核心是：</p><p>1、浅层卷积层提取基础特征，比如边缘，轮廓等基础特征</p><p>2、深层卷积层提取抽象特征。比如整个脸型</p><p>3、全连接层根据特征组合进行评价分类</p><p>普通预训练模型的特点是：</p><p>已经用了大型数据集做训练，已经具备了提取浅层基础特征和深层抽象特征的能力。</p><p>如果不是使用微调而是自己从0开始训练的话：</p><p>1、需要大量的数据，计算时间和计算资源</p><p>2、存在模型不收敛，参数不够优化，准确率低，模型泛化能力低，容易过拟合等风险（因为如果是自己的数据集，可能数据量不会很大）</p><h2 id="什么情况下使用微调"><a href="#什么情况下使用微调" class="headerlink" title="什么情况下使用微调"></a>什么情况下使用微调</h2><p>1、使用的数据集和预训练模型的数据集相似，如果不太相似，比如你用的预训练的参数是自然景物的图片，你却要做人脸的识别，效果可能就没有那么好了，因为人脸的特征和自然景物的特征提取是不同的，所以相应的参数训练后也是不同的。</p><p>2、自己搭建或者使用的CNN模型正确率太低</p><p>3、数据集相似，但数据集数量太少</p><h2 id="不同数据集下使用微调"><a href="#不同数据集下使用微调" class="headerlink" title="不同数据集下使用微调"></a>不同数据集下使用微调</h2><p>数据集1  - 数据量少，但数据相似度非常高 - 在这种情况下，我们所做的只是修改最后几层或最终的softmax图层的输出类别。</p><p>数据集2 - 数据量少，数据相似度低 - 在这种情况下，我们可以冻结预训练模型的初始层（比如k层），并再次训练剩余的（n-k）层。由于新数据集的相似度较低，因此根据新数据集对较高层进行重新训练具有重要意义。</p><p>数据集3  - 数据量大，数据相似度低 - 在这种情况下，由于我们有一个大的数据集，我们的神经网络训练将会很有效。但是，由于我们的数据与用于训练我们的预训练模型的数据相比有很大不同。使用预训练模型进行的预测不会有效。因此，最好根据你的数据从头开始训练神经网络（Training from scatch）。</p><p>数据集4  - 数据量大，数据相似度高 - 这是理想情况。在这种情况下，预训练模型应该是最有效的。使用模型的最好方法是保留模型的体系结构和模型的初始权重。然后，我们可以使用在预先训练的模型中的权重来重新训练该模型。</p><h2 id="使用微调的常用做法"><a href="#使用微调的常用做法" class="headerlink" title="使用微调的常用做法"></a>使用微调的常用做法</h2><p>1.通常的做法是截断预先训练好的网络的最后一层（softmax层），并用与我们自己的问题相关的新的softmax层替换它。例如，ImageNet上预先训练好的网络带有1000个类别的softmax图层。如果我们的任务是对10个类别的分类，则网络的新softmax层将由10个类别组成，而不是1000个类别。然后，我们在网络上运行预先训练的权重。确保执行交叉验证，以便网络能够很好地推广。</p><p>2.使用较小的学习率来训练网络。由于我们预计预先训练的权重相对于随机初始化的权重已经相当不错，我们不想过快地扭曲它们太多。通常的做法是使初始学习率比用于从头开始训练（Training from scratch）的初始学习率小10倍。</p><p>3.如果数据集数量过少，我们进来只训练最后一层，如果数据集数量中等，冻结预训练网络的前几层的权重也是一种常见做法。这是因为前几个图层捕捉了与我们的新问题相关的通用特征，如曲线和边。我们希望保持这些权重不变。相反，我们会让网络专注于学习后续深层中特定于数据集的特征。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理算法概述</title>
      <link href="/2019/07/19/tu-xiang-chu-li-suan-fa-zong-jie/"/>
      <url>/2019/07/19/tu-xiang-chu-li-suan-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="图像分割概述"><a href="#图像分割概述" class="headerlink" title="图像分割概述"></a>图像分割概述</h2><p> 图像分割就是把图像细分为构成它的对象或子区域，这些区域是互不相交的，每个区域都满足特定区域的一致性。分割的程度主要取决于人们想要解决的问题，当感兴趣的区域或对象已经被区分出来，分割就算完成。图像分割是图像处理中的重要问题，也是计算机视觉研究中的一个经典难题。计算机视觉中的图像理解包括目标检测、特征提取和目标识别等，都依赖于分割的质量。</p><p>目前，图像分割算法一般是围绕亮度值的两个基本特性设计的：不连续性和相似性。亮度值的不连续性的应用途径主要是基于像素点特性（如灰度值）的不连续变化分割图像，如最常用的边缘检测。而利用亮度值的相似性可以形成一套机制，即依据事先指定的准则将图像分割为相似的区域。一些实例包括门限处理、区域分离、区域生长和聚类等。而采用模糊C均值聚类及其扩展算法进行图像分割的好处是避免了阈值的设定问题，聚类的过程不需要人工干预，只需输入预想的分类数目即可实现自动化的图像分割。</p><h2 id="1、灰度共生矩阵"><a href="#1、灰度共生矩阵" class="headerlink" title="1、灰度共生矩阵"></a>1、灰度共生矩阵</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>灰度共生矩阵(GLDM)的统计方法是20世纪70年代初由R.Haralick等人提出的，它是在假定图像中各像素间的空间分布关系包含了图像纹理信息的前提下，提出的具有广泛性的纹理分析方法。</p><p>灰度共生矩阵被定义为从灰度为i的像素点出发，离开某个固定位置的点上灰度值为的概率，所有估计的值可以表示成一个矩阵的形式，以此被称为灰度共生矩阵。对于纹理变化缓慢的图像，其灰度共生矩阵对角线上的数值较大；而对于纹理变化较快的图像，其灰度共生矩阵对角线上的数值较小，对角线两侧的值较大。由于灰度共生矩阵的数据量较大，一般不直接作为区分纹理的特征，而是基于它构建的一些统计量作为纹理分类特征。Haralick曾提出了14种基于灰度共生矩阵计算出来的统计量：即：能量、熵、对比度、均匀性、相关性、方差、和平均、和方差、和熵、差方差、差平均、差熵、相关信息测度以及最大相关系数。</p><p><img src="1566203212214.png" alt="灰度共生矩阵"></p><p>上图显示了如何求解灰度共生矩阵，以（1，1）点为例GLCM（1，1）值为1说明只有一对灰度为1的像素水平相邻。GLCM（1，2）值为2，是因为有两对灰度为1和2的像素水平相邻。</p><p>GLCM表其实就是所有像素可能的组合，比如，GLCM（1,1）就是I中像素值为1和1的组合，GLCM（4,5）就是I中像素4和像素5的组合，GLCM（i,j）的值呢就是I中像素为i,像素为j的有有多少和相邻的成对点。这个相邻有个规则：就是f(x,y),f(x+a,y+b)相邻，就是只有x相隔a的单位，y相隔b个单位，我们认为是相邻的。<br>上图所示为：a=1,b=0,也就是f(x,y)和f(x+1,y+0)相邻。<br>于是就有了：<br>a=1,b=0 时我们就说水平相邻：也就是0度的时候<br>a=1,b=1 时我们就说对角相邻，也就是45度的时候<br>a=-1，b=1时 即135度<br>其他角度类似。 </p><p>在a=1,b=0时：GLCM(1，1)=1；其实就是I中有几个1和1相邻（1个）（按上面的规则）GLCM(1，2)=2，几个1和2相邻（2个）。</p><h3 id="常用的统计模型"><a href="#常用的统计模型" class="headerlink" title="常用的统计模型"></a>常用的统计模型</h3><ol><li>角二阶矩（Angular Second Moment, ASM)</li></ol><p>角二阶矩又称能量，是图像灰度分布均匀程度和纹理粗细的一个度量，反映了图像灰度分布均匀程度和纹理粗细度。当图像纹理均一规则时，能量值较大；反之灰度共生矩阵的元素值相近，能量值较小。<br>$$<br>A S M=\sum_{i} \sum_{j} P(i, j)^{2}<br>$$</p><ol start="2"><li>熵（Entropy, ENT)</li></ol><p>熵度量了图像包含信息量的随机性，表现了图像的复杂程度。当共生矩阵中所有值均相等或者像素值表现出最大的随机性时，熵最大。<br>$$<br>E N T=-\sum_{i} \sum_{j} P(i, j) \log (P(i, j))<br>$$</p><ol start="3"><li>对比度</li></ol><p>对比度反应了图像的清晰度和纹理的沟纹深浅。纹理越清晰反差越大对比度也就越大。<br>$$<br>\operatorname{Con}=\sum_{i} \sum_{j}(i-j)^{2} P(i, j）<br>$$</p><ol start="4"><li>反差分矩阵（Inverse Differential Moment, IDM)</li></ol><p>反差分矩阵又称逆方差，反映了纹理的清晰程度和规则程度，纹理清晰、规律性较强、易于描述的，值较大。<br>$$<br>I D M=\sum_{i} \sum_{j} \frac{P(i, j)}{1+(i-j)^{2}}<br>$$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>glcm.h</p><pre class="line-numbers language-C++"><code class="language-C++">#ifndef BLIND_GLCM_H#define BLIND_GLCM_H#include<opencv2/opencv.hpp>#include "math.h"using namespace cv;using namespace std;// 灰度等级// Gray Level (Choose in 4/8/16)enum GrayLevel{    GRAY_4,    GRAY_8,    GRAY_16};// 灰度统计方向// Gray Value Statistical Direction// (Choose in 0°, 45°, 90°, 135°)enum GrayDirection{    DIR_0,    DIR_45,    DIR_90,    DIR_135};// 彩色图中的指定通道// Point out R, G, B Channel of a Imageenum RGBChannel{    CHANNEL_R,    CHANNEL_G,    CHANNEL_B};// 纹理特征值结构体// struct including Texture Eigenvaluesstruct TextureEValues{    // 能量    float energy;    // 对比度    float contrast;    // 相关度    float homogenity;    // 熵    float entropy;};class GLCM{public:    // 从彩色通道中提取一个通道    // Extract a channel from RGB Image    void getOneChannel(Mat src, Mat& dstChannel, RGBChannel channel = CHANNEL_R);    // 将灰度图中的所有像素值量级化，可以被量化为4/8/16个等级    // Magnitude all pixels of Gray Image, and Magnitude Level can be chosen in 4/8/16;    void GrayMagnitude(Mat src, Mat& dst, GrayLevel level = GRAY_8);    // 计算一个矩阵窗口中，按照某个方向统计的灰度共生矩阵    // Calculate the GLCM of one Mat Window according to one Statistical Direction.    void CalcuOneGLCM(Mat src, Mat &dst, int src_i, int src_j, int size, GrayLevel level = GRAY_8, GrayDirection direct = DIR_0);    // 矩阵的归一化，将矩阵所有元素与矩阵中所有元素之和作除运算，得到概率矩阵    //   Normalize the Martix, make all pixels of Mat divided by the sum of all pixels of Mat, then get Probability Matrix.    void NormalizeMat(Mat src, Mat& dst);    // 计算单个窗口矩阵的图像纹理特征值，包括能量、对比度、相关度、熵    // Calculate Texture Eigenvalues of One Window Mat, which is including Energy, Contrast, Homogenity, Entropy.    void CalcuOneTextureEValue(Mat src, TextureEValues& EValue, bool ToCheckMat = false);    // 计算全图的图像纹理特征值，包括能量、对比度、相关度、熵    // Calculate Texture Eigenvalues of One Window Mat, which is including Energy, Contrast, Homogenity, Entropy.    void CalcuTextureEValue(Mat src, TextureEValues& EValue,                            int size = 5, GrayLevel level = GRAY_8);    // 计算整幅图像的纹理特征    void CalcuTextureImages(Mat src, Mat& imgEnergy, Mat& imgContrast, Mat& imgHomogenity, Mat& imgEntropy,                            int size = 5, GrayLevel level = GRAY_8, bool ToAdjustImg = false);};#endif //BLIND_GLCM_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>glcm.cpp</p><pre class="line-numbers language-c++"><code class="language-c++">#include "glcm.h"void GLCM::getOneChannel(Mat src, Mat& dstChannel, RGBChannel channel){    // 若输入图像已经是灰度图，则直接输出    if(src.channels() == 1)        dstChannel = src;    vector<Mat> bgr;    // 分离图像    split(src, bgr);    switch(channel)    {        case CHANNEL_B: dstChannel = bgr[0]; break;        case CHANNEL_G: dstChannel = bgr[1]; break;        case CHANNEL_R: dstChannel = bgr[2]; break;        default:            cout<<"ERROR in getOneChannel(): No Such Channel."<<endl;            return ;    }}/*=================================================================== * 函数名：GrayMagnitude * 说明：将灰度图中的所有像素值量级化，可以被量化为4/8/16个等级 * 参数： *   Mat src:  源图像 *   Mat& dst:  目标图像 *   GrayLevel level:  灰度等级 * 返回值：void *------------------------------------------------------------------ * Function: GrayMagnitude * * Summary: *   Magnitude all pixels of Gray Image, and Magnitude Level can be * chosen in 4/8/16; * * Arguments: *   Mat src - source image *   Mat& dst - destination image *   GrayLevel level - Destination image's Gray Level (choose in 4/8/16) * * Returns: *   void=====================================================================*/void GLCM::GrayMagnitude(Mat src, Mat& dst, GrayLevel level){    Mat tmp;    src.copyTo(tmp);    if(tmp.channels() == 3)        cvtColor(tmp, tmp, CV_BGR2GRAY);    // 直方图均衡化    // Equalize Histogram    equalizeHist(tmp, tmp);    for(int j = 0; j < tmp.rows; j++)    {        const uchar* current = tmp.ptr<uchar>(j);        uchar* output = dst.ptr<uchar>(j);        for(int i = 0; i < tmp.cols; i++)        {            switch(level)            {                case GRAY_4:                    output[i] = cv::saturate_cast<uchar>(current[i] / 64);                    break;                case GRAY_8:                    output[i] = cv::saturate_cast<uchar>(current[i] / 32);                    break;                case GRAY_16:                    output[i] = cv::saturate_cast<uchar>(current[i] / 16);                    break;                default:                    cout<<"ERROR in GrayMagnitude(): No Such GrayLevel."<<endl;                    return ;            }        }    }}/*=================================================================== * 函数名：CalcuOneGLCM * 说明：计算一个矩阵窗口中，按照某个方向统计的灰度共生矩阵 * 参数： *   Mat src:  源图像 *   Mat& dst:  目标灰度共生矩阵，根据选择的灰度等级，尺寸为4*4, 8*8, 16*16 *   int src_i:  矩阵窗口中心点的行值 *   int src_j:  矩阵窗口中心点的列值 *   int size:  窗口尺寸（仅支持5*5, 7*7） *   GrayLevel level:  灰度等级 *   GrayDirection direct:  统计方向 * 返回值：void *------------------------------------------------------------------ * Function: CalcuOneGLCM * * Summary: *   Calculate the GLCM of one Mat Window according to one Statistical * Direction. * * Arguments: *   Mat src - source image *   Mat& dst - destination GLCM, whose size is 4*4, 8*8, 16*16 by chosen * Gray Level *   int src_i - row number of Mat Window's Center Point *   int src_j - col number of Mat Window's Center Point *   int size - size of Mat Window (only support 5*5, 7*7) *   GrayLevel level - Destination image's Gray Level (choose in 4/8/16) *   GrayDirection direct - Statistical Direction (Choose in 0, 45, 90, 135) * * Returns: *   void=====================================================================*/void GLCM::CalcuOneGLCM(Mat src, Mat& dst, int src_i, int src_j, int size, GrayLevel level, GrayDirection direct){    // 灰度共生矩阵    // GLCM    Mat glcm;    // 窗口矩阵    // Window Matrix    Mat srcCut;    // 原图像尺寸判断    // Judge the Size of Source Image    if(src.cols <= 0 || src.rows <= 0)    {        cout<<"ERROR in CalcuOneGLCM(): source Mat's size is smaller than 0."<<endl;        return ;    }    // 强制将尺寸转为奇数    // Force Changing Window Size into odd number    size = size / 2 * 2 + 1;    // 边缘部分创建窗口矩阵    // Create Mat Window for the Edges of source image    if(src_i + (size/2) + 1 > src.rows       || src_j + (size/2) + 1 > src.cols       || src_i < (size/2)       || src_j < (size/2))    {        size = 3;        if(src_i <= size/2)        {            if(src_j <= size/2)                srcCut = Mat(src, Range(0, 3), Range(0, 3));            else if(src_j + (size/2) + 1 > src.cols)                srcCut = Mat(src, Range(0, 3), Range(src.cols - 3, src.cols));            else                srcCut = Mat(src, Range(0, 3), Range(src_j - size/2, src_j + size/2 + 1));        }        else if(src_i >= src.rows - size/2)        {            if(src_j <= size/2)                srcCut = Mat(src, Range(src.rows - 3, src.rows), Range(0, 3));            else if(src_j + (size/2) + 1 > src.cols)                srcCut = Mat(src, Range(src.rows - 3, src.rows), Range(src.cols - 3, src.cols));            else                srcCut = Mat(src, Range(src.rows - 3, src.rows), Range(src_j - size/2, src_j + size/2 + 1));        }        else if(src_j <= size/2)        {            if(src_i <= size/2)                srcCut = Mat(src, Range(0, 3), Range(0, 3));            else if(src_i + (size/2) + 1 > src.rows)                srcCut = Mat(src, Range(src.rows - 3, src.rows), Range(0, 3));            else                srcCut = Mat(src, Range(src_i - size/2, src_i + size/2 + 1), Range(0, 3));        }        else if(src_j >= src.cols - size/2)        {            if(src_i <= size/2)                srcCut = Mat(src, Range(0, 3), Range(src.cols - 3, src.cols));            else if(src_i + (size/2) + 1 > src.rows)                srcCut = Mat(src, Range(src.rows - 3, src.rows), Range(src.cols - 3, src.cols));            else                srcCut = Mat(src, Range(src_i - size/2, src_i + size/2 + 1), Range(src.cols - 3, src.cols));        }        else            srcCut = Mat(src, Range(src_i - size/2, src_i + size/2 + 1), Range(src_j - size/2, src_j + size/2 + 1));    }    else        srcCut = Mat(src, Range(src_i - size/2, src_i + size/2 + 1), Range(src_j - size/2, src_j + size/2 + 1));    // 根据灰度等级初始化灰度共生矩阵    // Initialize GLCM according Gray Level    switch(level)    {        case GRAY_4:        {            glcm = Mat_<uchar>(4, 4);            for(int i = 0; i < 4; i++)                for(int j = 0; j < 4; j++)                    glcm.at<uchar>(j, i) = 0;            break;        }        case GRAY_8:        {            glcm = Mat_<uchar>(8, 8);            for(int i = 0; i < 8; i++)                for(int j = 0; j < 8; j++)                    glcm.at<uchar>(j, i) = 0;            break;        }        case GRAY_16:        {            glcm = Mat_<uchar>(16, 16);            for(int i = 0; i < 16; i++)                for(int j = 0; j < 16; j++)                    glcm.at<uchar>(j, i) = 0;            break;        }        default:            cout<<"ERROR in CalcuOneGLCM(): No Such Gray Level."<<endl;            break;    }    // 根据统计方向填充灰度共生矩阵    // Fill GLCM according Statistical Direction    switch(direct)    {        case DIR_0:            for(int i = 0; i < srcCut.rows; i++)                for(int j = 0; j < srcCut.cols - 1; j++)                    glcm.at<uchar>(srcCut.at<uchar>(j, i), srcCut.at<uchar>(j+1, i))++;            break;        case DIR_45:            for(int i = 0; i < srcCut.rows - 1; i++)                for(int j = 0; j < srcCut.cols - 1; j++)                    glcm.at<uchar>(srcCut.at<uchar>(j, i), srcCut.at<uchar>(j+1, i+1))++;            break;        case DIR_90:            for(int i = 0; i < srcCut.rows - 1; i++)                for(int j = 0; j < srcCut.cols; j++)                    glcm.at<uchar>(srcCut.at<uchar>(j, i), srcCut.at<uchar>(j, i+1))++;            break;        case DIR_135:            for(int i = 1; i < srcCut.rows; i++)                for(int j = 0; j < srcCut.cols - 1; j++)                    glcm.at<uchar>(srcCut.at<uchar>(j, i), srcCut.at<uchar>(j+1, i-1))++;            break;        default:            cout<<"ERROR in CalcuOneGLCM(): No such Direct."<<endl;            break;    }    Mat glcm_dst;    // 灰度共生矩阵归一化    // Normalize GLCM    NormalizeMat(glcm, glcm_dst);    glcm_dst.copyTo(dst);}/*=================================================================== * 函数名：NormalizeMat * 说明：矩阵的归一化，将矩阵所有元素与矩阵中所有元素之和作除运算，得到概率矩阵 * 参数： *   Mat src:  源图像 *   Mat& dst:  目标概率矩阵 * 返回值：void *------------------------------------------------------------------ * Function: NormalizeMat * * Summary: *   Normalize the Martix, make all pixels of Mat divided by the sum of * all pixels of Mat, then get Probability Matrix. * * Arguments: *   Mat src - source image *   Mat& dst - destination Probability Matrix * * Returns: *   void=====================================================================*/void GLCM::NormalizeMat(Mat src, Mat& dst){    Mat tmp;    src.convertTo(tmp, CV_32F);    float sum = 0;    for(int i = 0; i < tmp.rows; i++)        for(int j = 0; j < tmp.cols; j++)            sum += tmp.at<float>(j, i);    if(sum == 0)    sum = 1;    for(int i = 0; i < tmp.rows; i++)        for(int j = 0; j < tmp.cols; j++)            tmp.at<float>(j, i) /= sum;    tmp.copyTo(dst);}/*=================================================================== * 函数名：CalcuOneTextureEValue * 说明：计算单个窗口矩阵的图像纹理特征值，包括能量、对比度、相关度、熵 * 参数： *   Mat src:  源矩阵，窗口矩阵 *   TextureEValues& EValue:  纹理特征值变量 *   bool ToCheckMat:  检查输入矩阵是否为概率矩阵 * 返回值：void *------------------------------------------------------------------ * Function: CalcuOneTextureEValue * * Summary: *   Calculate Texture Eigenvalues of the Window Mat, which is including * Energy, Contrast, Homogenity, Entropy. * * Arguments: *   Mat src - source Matrix (Window Mat) *   TextureEValues& EValue - Texture Eigenvalues *   bool ToCheckMat - to check input Mat is Probability Mat or not * * Returns: *   void=====================================================================*/void GLCM::CalcuOneTextureEValue(Mat src, TextureEValues& EValue, bool ToCheckMat){    if(ToCheckMat)    {        float sum = 0;        for(int i = 0; i < src.rows; i++)            for(int j = 0; j < src.cols; j++)                sum += src.at<float>(j, i);        if(sum < 0.99 || sum > 1.01)        {            cout<<"ERROR in CalcuOneTextureEValue(): Sum of the Mat is not equal to 1.00."<<endl;            return ;        }    }    EValue.contrast = 0;    EValue.energy = 0;    EValue.entropy = 0;    EValue.homogenity = 0;    for(int i = 0; i < src.rows; i++)        for(int j = 0; j < src.cols; j++)        {            EValue.energy += powf(src.at<float>(j, i), 2);            EValue.contrast += (powf((i - j), 2) * src.at<float>(j, i) );            EValue.homogenity += (src.at<float>(j, i) / (1 + fabs((float)(i - j))) );            if(src.at<float>(j, i) != 0)                EValue.entropy -= (src.at<float>(j, i) * log10(src.at<float>(j, i)) );        }}/*=================================================================== * 函数名：CalcuTextureEValue * 说明：计算全图的图像纹理特征值，包括能量、对比度、相关度、熵 * 参数： *   Mat src:  源矩阵，窗口矩阵 *   TextureEValues& EValue:  输出目标，全图的纹理特征值变量 *   int size:  窗口尺寸（仅支持5*5, 7*7） *   GrayLevel level:  灰度等级 * 返回值：void *------------------------------------------------------------------ * Function: CalcuOneTextureEValue * * Summary: *   Calculate Texture Eigenvalues of One Window Mat, which is including * Energy, Contrast, Homogenity, Entropy. * * Arguments: *   Mat src - source Matrix (Window Mat) *   TextureEValues& EValue - Output Dst: Texture Eigenvalues of the Whole Image *   int size - size of Mat Window (only support 5*5, 7*7) *   GrayLevel level - Destination image's Gray Level (choose in 4/8/16) * * Returns: *   void=====================================================================*/void GLCM::CalcuTextureEValue(Mat src, TextureEValues& EValue, int size, GrayLevel level){    // 原图像的灰度图    // Gray Image of the Source Image    Mat imgGray;    // 窗口矩阵    // Window Matrix    Mat glcm_win;    // 归一化后的概率矩阵    // Probability Matrix after Normalizing    Mat glcm_norm;    // 纹理特征值缓存变量    // Texture Eigenvalues temp variable    TextureEValues EValue_temp;    // 初始化目标纹理特征值    // Init Dst Texture Eigenvalues    EValue.contrast = 0; EValue.energy = 0; EValue.entropy = 0; EValue.homogenity = 0;    // 检查输入图像是否为单通道图像，如果不是，则转换其格式    // Check if Input Image is Single Channel Image or not, IF it's Single Channel Image, then Convert its Format to Gray Image.    if(src.channels() != 1)        cvtColor(src, imgGray, CV_BGR2GRAY);    else        src.copyTo(imgGray);    for(int i = 0; i < imgGray.rows; i++)    {        for(int j = 0; j < imgGray.cols; j++)        {            // 计算所有统计方向的灰度共生矩阵与对应的特征值，并累加至缓存变量中            // Calculate All Statistical Direction's GLCM and Eigenvalues, then accumulate into temp variables            float energy, contrast, homogenity, entropy;            energy = contrast = homogenity = entropy = 0;            CalcuOneGLCM(imgGray, glcm_win, i, j, size, level, DIR_0);            NormalizeMat(glcm_win, glcm_norm);            CalcuOneTextureEValue(glcm_norm, EValue_temp, false);            energy += EValue_temp.energy; contrast += EValue_temp.contrast;            homogenity += EValue_temp.homogenity; entropy += EValue_temp.entropy;            CalcuOneGLCM(imgGray, glcm_win, i, j, size, level, DIR_45);            NormalizeMat(glcm_win, glcm_norm);            CalcuOneTextureEValue(glcm_norm, EValue_temp, false);            energy += EValue_temp.energy; contrast += EValue_temp.contrast;            homogenity += EValue_temp.homogenity; entropy += EValue_temp.entropy;            CalcuOneGLCM(imgGray, glcm_win, i, j, size, level, DIR_90);            NormalizeMat(glcm_win, glcm_norm);            CalcuOneTextureEValue(glcm_norm, EValue_temp, false);            energy += EValue_temp.energy; contrast += EValue_temp.contrast;            homogenity += EValue_temp.homogenity; entropy += EValue_temp.entropy;            CalcuOneGLCM(imgGray, glcm_win, i, j, size, level, DIR_135);            NormalizeMat(glcm_win, glcm_norm);            CalcuOneTextureEValue(glcm_norm, EValue_temp, false);            energy += EValue_temp.energy; contrast += EValue_temp.contrast;            homogenity += EValue_temp.homogenity; entropy += EValue_temp.entropy;            // 将所有方向计算得到的特征值平均化，得到的值即可消除统计方向影响            // average Eigenvalues of all Statistical Directions, then the average value has eliminated the effect of Statistical Directions            energy /= 4; contrast /= 4;            homogenity /= 4; entropy /= 4;            // 累加当前单个窗口的纹理特征值，作为整个图像的纹理特征值            // Accumulate Texture Eigenvalues of Current Window, then make the Sum as Texture Eigenvalues of the Whole Image            EValue.contrast += contrast;            EValue.energy += energy;            EValue.entropy += entropy;            EValue.homogenity += homogenity;        }    }}/*=================================================================== * 函数名：CalcuTextureImages * 说明：计算整幅图像的纹理特征，并将结果输出到相应矩阵中 * 参数： *   Mat src:  原图像 *   Mat& imgEnergy:  目标能量矩阵 *   Mat& imgContrast:  目标对比度矩阵 *   Mat& imgHomogenity:  目标相关度矩阵 *   Mat& imgEntropy:  目标熵矩阵 *   int size:  窗口尺寸（仅支持5*5, 7*7） *   GrayLevel level:  灰度等级 *   bool ToAdjustImg:  是否调整输出的纹理特征图像 * 返回值：void *------------------------------------------------------------------ * Function: CalcuTextureImages * * Summary: *   Calculate Texture Features of the whole Image, and output the result * into Martixs. * * Arguments: *   Mat src - source Image *   Mat& imgEnergy - Destination Mat, Energy Matrix *   Mat& imgContrast - Destination Mat, Contrast Matrix *   Mat& imgHomogenity - Destination Mat, Homogenity Matrix *   Mat& imgEntropy - Destination Mat, Entropy Matrix *   int size - size of Mat Window (only support 5*5, 7*7) *   GrayLevel level - Destination image's Gray Level (choose in 4/8/16) *   bool ToAdjustImg:  to Adjust output Texture Feature Images or not * * Returns: *   void=====================================================================*/void GLCM::CalcuTextureImages(Mat src, Mat& imgEnergy, Mat& imgContrast, Mat& imgHomogenity, Mat& imgEntropy,                              int size, GrayLevel level, bool ToAdjustImg){    // 窗口矩阵    // Window Matrix    Mat glcm_win;    // 归一化后的概率矩阵    // Probability Matrix after Normalizing    Mat glcm_norm;    // 纹理特征值缓存变量    // Texture Eigenvalues temp varialbe    TextureEValues EValue;    imgEnergy.create(src.size(), CV_32FC1);    imgContrast.create(src.size(), CV_32FC1);    imgHomogenity.create(src.size(), CV_32FC1);    imgEntropy.create(src.size(), CV_32FC1);    for(int i = 0; i < src.rows; i++)    {        float* energyData = imgEnergy.ptr<float>(i);        float* contrastData = imgContrast.ptr<float>(i);        float* homogenityData = imgHomogenity.ptr<float>(i);        float* entropyData = imgEntropy.ptr<float>(i);        for(int j = 0; j < src.cols; j++)        {            // 计算所有统计方向的灰度共生矩阵与对应的特征值，并累加至缓存变量中            // Calculate All Statistical Direction's GLCM and Eigenvalues, then accumulate into temp variables            float energy, contrast, homogenity, entropy;            energy = contrast = homogenity = entropy = 0;            CalcuOneGLCM(src, glcm_win, i, j, size, level, DIR_0);            NormalizeMat(glcm_win, glcm_norm);            CalcuOneTextureEValue(glcm_norm, EValue, false);            energy += EValue.energy; contrast += EValue.contrast;            homogenity += EValue.homogenity; entropy += EValue.entropy;            CalcuOneGLCM(src, glcm_win, i, j, size, level, DIR_45);            NormalizeMat(glcm_win, glcm_norm);            CalcuOneTextureEValue(glcm_norm, EValue, false);            energy += EValue.energy; contrast += EValue.contrast;            homogenity += EValue.homogenity; entropy += EValue.entropy;            CalcuOneGLCM(src, glcm_win, i, j, size, level, DIR_90);            NormalizeMat(glcm_win, glcm_norm);            CalcuOneTextureEValue(glcm_norm, EValue, false);            energy += EValue.energy; contrast += EValue.contrast;            homogenity += EValue.homogenity; entropy += EValue.entropy;            CalcuOneGLCM(src, glcm_win, i, j, size, level, DIR_135);            NormalizeMat(glcm_win, glcm_norm);            CalcuOneTextureEValue(glcm_norm, EValue, false);            energy += EValue.energy; contrast += EValue.contrast;            homogenity += EValue.homogenity; entropy += EValue.entropy;            // 将所有方向计算得到的特征值平均化，得到的值即可消除统计方向影响            // average Eigenvalues of all Statistical Directions, then the average value has eliminated the effect of Statistical Directions            energy /= 4; contrast /= 4;            homogenity /= 4; entropy /= 4;            energyData[j] = energy;            contrastData[j] = contrast;            homogenityData[j] = homogenity;            entropyData[j] = entropy;        }    }    // 调整输出特征图像，类型由CV_32FC1改为CV_8UC1，取值范围0--255    // Adjust output Texture Feature Images, Change its type from CV_32FC1 to CV_8UC1, Change its value range as 0--255    if(ToAdjustImg)    {        cv::normalize(imgEnergy, imgEnergy, 0, 255, NORM_MINMAX);        cv::normalize(imgContrast, imgContrast, 0, 255, NORM_MINMAX);        cv::normalize(imgEntropy, imgEntropy, 0, 255, NORM_MINMAX);        cv::normalize(imgHomogenity, imgHomogenity, 0, 255, NORM_MINMAX);        imgEnergy.convertTo(imgEnergy, CV_8UC1);        imgContrast.convertTo(imgContrast, CV_8UC1);        imgEntropy.convertTo(imgEntropy, CV_8UC1);        imgHomogenity.convertTo(imgHomogenity, CV_8UC1);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.cpp</p><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>#include"glcm.h"using namespace std;using namespace cv;int main() {    char key;    Mat img;    GLCM glcm;    TextureEValues EValues;// 程序运行时间统计变量// the Time Statistical Variable of Program Running Time    double time;    double start;// 纹理特征值矩阵// the Matrixs of Texture Features    Mat imgEnergy, imgContrast, imgHomogenity, imgEntropy;// 读取图像// Read a Image    img = imread("/home/litchi/PycharmProjects/blindsidewalk/1.png");    Mat dstChannel;    glcm.getOneChannel(img, dstChannel, CHANNEL_B);// 灰度量化，并统计运算时间// Magnitude Gray Image, and calculate program running time    start = static_cast<double>(getTickCount());    glcm.GrayMagnitude(dstChannel, dstChannel, GRAY_8);    time = ((double)getTickCount() - start) / getTickFrequency() * 1000;    cout << "Time of Magnitude Gray Image: " << time << "ms" <<endl<<endl;// 计算整幅图像的纹理特征值图像，并统计运算时间// Calculate Texture Features of the whole Image, and calculate program running time    start = static_cast<double>(getTickCount());    glcm.CalcuTextureImages(dstChannel, imgEnergy, imgContrast, imgHomogenity, imgEntropy, 5, GRAY_8, true);    time = ((double)getTickCount() - start) / getTickFrequency() * 1000;    cout << "Time of Generate the whole Image's Calculate Texture Features Image: " << time << "ms" << endl<<endl;    start = static_cast<double>(getTickCount());    glcm.CalcuTextureEValue(dstChannel, EValues, 5, GRAY_8);    time = ((double)getTickCount() - start) / getTickFrequency() * 1000;    cout << "Time of Calculate Texture Features of the whole Image: " << time << "ms" << endl<<endl;    cout<<"Image's Texture EValues:"<<endl;    cout<<"    Contrast: "<<EValues.contrast<<endl;    cout<<"    Energy: "<<EValues.energy<<endl;    cout<<"    EntropyData: "<<EValues.entropy<<endl;    cout<<"    Homogenity: "<<EValues.homogenity<<endl;    imshow("Energy", imgEnergy);    imshow("Contrast", imgContrast);    imshow("Homogenity", imgHomogenity);    imshow("Entropy", imgEntropy);    key = (char) cvWaitKey(0);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CMakeLists.txt</p><pre class="line-numbers language-cmake"><code class="language-cmake">cmake_minimum_required(VERSION 3.13)project(blind)set(CMAKE_CXX_STANDARD 14)set(OpenCV_DIR /usr/local/share/OpenCV)find_package(OpenCV REQUIRED)include_directories(${OpenCV_INCLUDE_DIRS})link_directories(${OpenCV_LIBS})add_executable(blind main.cpp glcm.h glcm.cpp)target_link_libraries(blind        ${OpenCV_LIBS}        )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、模糊C均值聚类（FCM-Fuzzy-C-Means"><a href="#2、模糊C均值聚类（FCM-Fuzzy-C-Means" class="headerlink" title="2、模糊C均值聚类（FCM Fuzzy C-Means)"></a>2、模糊C均值聚类（FCM Fuzzy C-Means)</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>FCM算法是一种基于划分的聚类算法，它的思想就是使得被划分到同一簇的对象之间相似度最大，而不同簇之间的相似度最小。k均值聚类的实现中，把每个样本划分到单一的类别中，亦即是每个样本只能属于一种类别，不能属于多种类别。这样的划分，称为硬划分。为了解决硬划分所带来的问题，因此有了称为软划分的聚类算法，这一类算法中，每个样本不再只能属于一种类别，<strong>而是对于每个样本，都有对应的隶属度数组，数组里的每一个元素代表该样本属于某种类别的程度</strong>。而该样本的隶属度数组中的总值等于1。</p><h3 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h3><p>假定数据集为X，如果把这些数据划分成c类的话，那么对应的就有c个类中心为C，每个样本j属于某一类i的隶属度为$u_{i j}$,那么定义一个FCM目标函数及其约束条件如下所示：<br>$$<br>J=\sum_{i=1}^{c} \sum_{j=1}^{n} u_{i j}^{m}\left|x_{j}-c_{i}\right|^{2}<br>$$</p><p>$$<br>\sum_{i=1}^{c} u_{i j}=1, j=1,2 \ldots, n<br>$$</p><p>看一下目标函数而知，由相应样本的隶属度与该样本到各个类中心的距离相乘组成的，m是一个隶属度的因子，个人理解为属于样本的轻缓程度，就像$x^{2}$与$x^{3}$这种一样。约束条件是一个样本属于所有类的隶属度之和要为1。观察目标函数可以发现，其中的变量有$u_{i j}$、$c_{i}$并且还有约束条件，那么如何求这个目标函数的极值呢？</p><p>这里首先采用拉格朗日乘数法将约束条件拿到目标函数中去，前面加上系数，并把约束条件的所有j展开，那么目标函数变成下列所示：<br>$$<br>J=\sum_{i=1}^{c} \sum_{j=1}^{n} u_{i j}^{m}\left|x_{j}-c_{i}\right|^{2}+\lambda_{1}\left(\sum_{i=1}^{c} u_{i 1}-1\right)+\ldots+\lambda_{j}\left(\sum_{i=1}^{c} u_{i j}-1\right)+\ldots+\lambda_{n}\left(\sum_{i=n}^{c} u_{i n}-1\right) )<br>$$<br>在约束条件下，可以求得目标函数取最小值时相应的隶属度矩阵和聚类中心。通常，该最小值用极小值代替，因此分别对各变量求偏导，并令偏导数为0，联立并解出更新后的模糊隶属度和聚类中心，如下公式<br>$$<br>u_{i j}=\frac{1}{\sum_{k}^{c}\left[d^{2}\left(x_{j^{\prime}}, v_{i}\right) / d^{2}\left(x_{j^{\prime}} v_{k}\right)\right]^{\frac{2}{m-1}}}<br>$$</p><p>$$<br>v_{i}=\frac{\sum_{j=1}^{n} u_{i j}^{m} x_{j}}{\sum_{j=1}^{n} u_{i j}^{m}}, \forall i, j, \quad i=1,2,3, \ldots, c \text { and } j=1,2,3, \ldots, n<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>语义分割综述</title>
      <link href="/2019/07/18/tu-xiang-fen-ge/"/>
      <url>/2019/07/18/tu-xiang-fen-ge/</url>
      
        <content type="html"><![CDATA[<h1 id="语义分割综述"><a href="#语义分割综述" class="headerlink" title="语义分割综述"></a>语义分割综述</h1><p>图像分割有传统一些传统算法，关于传统算法可以参考我的博文图像处理算法总结。</p><p>图像分割有类别(semantic) or 实例(instance)分割，其中有2D, 2.5D (depth est.) and 3D。如下图所示</p><p><img src="1563419882838.png" alt="各类分割"></p><h2 id="1、分割任务的卷积"><a href="#1、分割任务的卷积" class="headerlink" title="1、分割任务的卷积"></a>1、分割任务的卷积</h2><h3 id="普通卷积（Convolution）"><a href="#普通卷积（Convolution）" class="headerlink" title="普通卷积（Convolution）"></a>普通卷积（Convolution）</h3><p>![]1563431922907.png)</p><p>普通卷积的输出为：（输入-kernel+2pad)/stride+1</p><h3 id="反卷积-Deconvolution"><a href="#反卷积-Deconvolution" class="headerlink" title="反卷积(Deconvolution)"></a>反卷积(Deconvolution)</h3><p><img src="1563432454612.png" alt></p><p>蓝色的是输入feature map (较小),绿色的是输出(较大)<br>有stride 版本的反卷积是：<br>先”稀疏化” up-sample输入(蓝色),然后移动filter,正常卷积,得出结果。</p><p>所以计算公式为：</p><p>W_out = (W_in - 1) *stride - 2pad + kernel</p><h3 id="空洞卷积-Dilated-convolution"><a href="#空洞卷积-Dilated-convolution" class="headerlink" title="空洞卷积(Dilated convolution)"></a>空洞卷积(Dilated convolution)</h3><p>引入空洞卷积不得不提的是感受野，感受野就是卷积神经网络的每一层输出的特征图(feature map)上的像素点在原图像上映射的区域大小。空洞卷积主要为了解决图像分割中的一些问题而提出的，在FCN中通过pooling增大感受野缩小图像尺寸，然后通过upsampling还原图像尺寸，但是这个过程中造成了精度的损失，那么为了减小这种损失理所当然想到的是去掉pooling层，然而这样就导致特征图感受野太小，因此空洞卷积应运而生。</p><p>空洞卷积顾名思义就是卷积的一种，如下图所示这个就是空洞卷积，这里stride:1，padding:0。这里空洞卷积有两种理解，一是可以理解为将卷积核扩展，如图卷积核为 <img src="https://www.zhihu.com/equation?tex=3%5Ctimes3" alt="[公式]"> 但是这里将卷积核变为 <img src="https://www.zhihu.com/equation?tex=5%5Ctimes5" alt="[公式]"> 即在卷积核每行每列中间加0。二是理解为在特征图上每隔1行或一列取数与 <img src="https://www.zhihu.com/equation?tex=3%5Ctimes3" alt="[公式]"> 卷积核进行卷积。当然这里改变stride、padding空洞卷积就会和下图有区别。</p><p><img src="https://pic4.zhimg.com/v2-4959201e816888c6648f2e78cccfd253_b.gif" alt="空洞卷积"></p><p><strong>空洞卷积的感受野</strong></p><p>首先介绍cnn感受野计算公式：<br>$$<br>r_{n}=r_{n-1}+(k-1) * \prod_{I=1}^{n-1} s_{i}<br>$$<br>这里 $r_{n}$为本层感受野，$r_{n-1}$ 是上层感受野， $s_{i}$是第i层卷积或池化的步长，k为卷积核大小。</p><p><img src="1563433738797.png" alt></p><p>空洞卷积的感受野计算方法和上面相同所谓的空洞可以理解为扩大了卷积核的大小</p><p>所以空洞卷积的W_out=(W_in-kernel-dilated+2pad)/stride+1</p><h2 id="2、语义分割算法回顾"><a href="#2、语义分割算法回顾" class="headerlink" title="2、语义分割算法回顾"></a>2、语义分割算法回顾</h2><p><a href="https://people.eecs.berkeley.edu/~jonlong/long_shelhamer_fcn.pdf" target="_blank" rel="noopener">FCN论文</a></p><p><a href="https://arxiv.org/pdf/1511.00561.pdf" target="_blank" rel="noopener">SegNet论文</a></p><p><a href="https://arxiv.org/pdf/1511.07122.pdf" target="_blank" rel="noopener">Dilation论文</a></p><p><a href="https://arxiv.org/pdf/1505.04366.pdf" target="_blank" rel="noopener">DeconvNet论文</a></p><p><a href="https://arxiv.org/pdf/1606.02147.pdf" target="_blank" rel="noopener">ENet(速度快实时)</a> <a href="https://github.com/TimoSaemann/ENet" target="_blank" rel="noopener">caffe</a></p><p><a href="https://arxiv.org/pdf/1412.7062v3.pdf" target="_blank" rel="noopener">Deeplab V1论文</a> <a href="https://github.com/TheLegendAli/DeepLab-Context" target="_blank" rel="noopener">caffe</a>  <a href="https://arxiv.org/abs/1606.00915" target="_blank" rel="noopener">Deeplab V2论文</a>  <a href="https://github.com/DrSleep/tensorflow-deeplab-resnet" target="_blank" rel="noopener">tensorflow</a>  <a href="https://bitbucket.org/aquariusjay/deeplab-public-ver2" target="_blank" rel="noopener">caffe</a>  <a href="https://arxiv.org/abs/1706.05587" target="_blank" rel="noopener">Deeplab V3论文</a>  <a href="https://github.com/NanqingD/DeepLabV3-Tensorflow" target="_blank" rel="noopener">tensorflow</a></p><p><a href="https://arxiv.org/pdf/1506.04579.pdf" target="_blank" rel="noopener">ParseNet论文</a> <a href="https://github.com/weiliu89/caffe/tree/fcn" target="_blank" rel="noopener">caffe</a></p><p><a href="https://arxiv.org/pdf/1611.06612.pdf" target="_blank" rel="noopener">RefineNet论文</a></p><p> <a href="http://openaccess.thecvf.com/content_cvpr_2017/papers/Peng_Large_Kernel_Matters_CVPR_2017_paper.pdf" target="_blank" rel="noopener">Large Kernel Matters论文</a></p><p>语义分割大部分是采用fine tuning的方法，用已有的一些网络结构来提取特征，之后再进行其他的操作，关于fine tuning<a href="https://yyingbiu.github.io/2019/07/19/mo-xing-wei-diao/">可以参考博客</a>。进一步学习可以参考这个简单的pytorch实现的图片分类的实战代码</p><h2 id="3、分割任务的评价指标"><a href="#3、分割任务的评价指标" class="headerlink" title="3、分割任务的评价指标"></a>3、分割任务的评价指标</h2><p>假设K+1类，下标从0到k。 $p_{ij}$表示属于i类的样本被预测为j类。</p><p>Pixel Accuracy(PA) = (预测对的像素个数)/(总的像素个数)<br>$$<br>PA=\frac{\sum_{i=0}^{k} p_{i i}}{\sum_{i=0}^{k} \sum_{j=0}^{k} p_{i j}}<br>$$<br>Mean Pixel Accuracy(MPA)= 平均每类的准确率<br>$$<br>M P A=\frac{1}{k+1} \sum_{i=0}^{k} \frac{p_{i i}}{\sum_{j=0}^{k} p_{i j}}<br>$$<br>Mean IoU=平均每类的IOU<br>$$<br>M I o U=\frac{1}{k+1} \sum_{i=0}^{k} \frac{p_{i i}}{\sum_{j=0}^{k} p_{i j}+\sum_{j=0}^{k} p_{j i}-p_{i i}}<br>$$<br>Frequency weighted IoU=加权后每类的IOU<br>$$<br>FWIoU=\frac{1}{\sum_{i=0}^{k} \sum_{j=0}^{k} p_{i j}} \sum_{i=0}^{k} \frac{\sum_{j=0}^{k} p_{i j} p_{i i}}{\sum_{j=0}^{k} p_{i j}+\sum_{j=0}^{k} p_{j i}-p_{i i}}<br>$$</p><h2 id="4、经典的算法-Fully-convolutional-network（FCN"><a href="#4、经典的算法-Fully-convolutional-network（FCN" class="headerlink" title="4、经典的算法 Fully-convolutional network（FCN)"></a>4、经典的算法 Fully-convolutional network（FCN)</h2><p><a href="https://people.eecs.berkeley.edu/~jonlong/long_shelhamer_fcn.pdf" target="_blank" rel="noopener">FCN</a></p><p><img src="1563434936916.png" alt></p><p>训练问题:端到端学习</p><p>连接层问题:全连接改为全卷积,支持可变输入</p><p>特征图变小问题:利用反卷积向上放大特征图</p><p>特征融合问题:利用skip connection融合多层特征提高上采样精细度</p><p>FCN将网络全连接层用卷积取代，因此使任意图像大小的输入都变成可能，而且速度比Patch classification方法快很多（Patch classification顾名思义，图像是切成块喂给深度模型的，然后对像素进行分类。使用图像块的主要原因是因为全连接层需要固定大小的图像）</p><p>尽管移除了全连接层，但是CNN模型用于语义分割还存在一个问题，就是下采样操作（比如，pooling）。pooling操作可以扩大感受野因而能够很好地整合上下文信息（context中文称为语境或者上下文，通俗的理解就是综合了更多的信息来进行决策），对high-level的任务（比如分类），这是很有效的。但同时，由于pooling下采样操作，使得分辨率降低，因此削弱了位置信息，而语义分割中需要score map和原图对齐，因此需要丰富的位置信息。</p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语义分割 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测综述</title>
      <link href="/2019/07/18/mu-biao-jian-ce-zong-shu/"/>
      <url>/2019/07/18/mu-biao-jian-ce-zong-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="目标检测"><a href="#目标检测" class="headerlink" title="目标检测"></a>目标检测</h1><p>计算机视觉的四种基本任务是图像分类，图像定位，物体检测，物体分割。</p><p><img src="1563370071913.png" alt></p><p>其具体的任务如上图所示。</p><p>实际上大部分（甚至所有）的CV/NLP/Robotics任务都是两个基本机器学习问题：</p><p>Data classification (离散的，分类问题)：the output variable takes class labels</p><p>Data regression (连续的，回归问题)：the output variable takes continuous values.</p><h3 id="一、目标检测的评价指标"><a href="#一、目标检测的评价指标" class="headerlink" title="一、目标检测的评价指标"></a>一、目标检测的评价指标</h3><p><strong>1.  mPA</strong></p><p>这里首先介绍几个常见的模型评价术语，现在假设我们的分类目标只有两类，计为正例（positive）和负例（negtive）分别是：</p><p>​       1）True positives(TP):  被正确地划分为正例的个数，即实际为正例且被分类器划分为正例的实例数（样本数）；</p><p>　　2）False positives(FP): 被错误地划分为正例的个数，即实际为负例但被分类器划分为正例的实例数；</p><p>　　3）False negatives(FN):被错误地划分为负例的个数，即实际为正例但被分类器划分为负例的实例数；</p><p>　　4）True negatives(TN): 被正确地划分为负例的个数，即实际为负例且被分类器划分为负例的实例数。　</p><p>P代表precision即准确率，计算公式为 预测样本中实际正样本数 / 所有的正样本数 即  <strong>precision=TP/（TP+FP）</strong>；</p><p>R代表recall  即召回率，计算公式为 预测样本中实际正样本数 / 预测的样本数即   <strong>Recall=TP/(TP+FN)=TP/P</strong></p><p>一般来说，precision和recall是鱼与熊掌的关系，往往召回率越高，准确率越低</p><p>AP 即 Average Precision即平均精确度</p><p>mAP 即 Mean Average Precision即平均AP值，是对多个验证集个体求平均AP值，作为 object dection中衡量检测精度的指标。</p><p><img src="1563430523389.png" alt></p><p>P-R曲线即 以 precision 和 recall 作为 纵、横轴坐标 的二维曲线。通过选取不同阈值时对应的精度和召回率画出</p><p>总体趋势，精度越高，召回越低，当召回达到1时，对应概率分数最低的正样本，这个时候正样本数量除以所有大于等于该阈值的样本数量就是最低的精度值。</p><p>另外，P-R曲线围起来的面积就是AP值，通常来说一个越好的分类器，AP值越高</p><p>在目标检测中，每一类都可以根据 recall 和 precision绘制P-R曲线，AP就是该曲线下的面积，mAP就是所有类AP的平均值。</p><p><strong>2. IOU()交并比</strong></p><p>IOU 即交并比 即 Intersection-over-Union，是目标检测中使用的一个概念，是一种测量在特定数据集中检测相应物体准确度的一个标准。</p><p>IOU表示了产生的<strong>候选框（candidate bound）与原标记框（ground truth bound）的交叠率</strong>或者说重叠度，也就是它们的交集与并集的比值。相关度越高该值。最理想情况是完全重叠，即比值为1。</p><p><img src="1563430604760.png" alt="1563430604760"></p><p>计算公式如下：<br>$$<br>IoU=\frac{\operatorname{area}(C)\cap\operatorname{area }(G)}{\operatorname{area}(C)\cup \operatorname{area}(G)}<br>$$<br><strong>3. 速度</strong></p><p>除了检测准确度，目标检测算法的另外一个重要性能指标是速度，只有速度快，才能实现实时检测，这对一些应用场景极其重要。评估速度的常用指标是每秒帧率（Frame Per Second，FPS），即每秒内可以处理的图片数量。当然要对比FPS，你需要在同一硬件上进行。另外也可以使用处理一张图片所需时间来评估检测速度，时间越短，速度越快。</p><h3 id="二、经典方法"><a href="#二、经典方法" class="headerlink" title="二、经典方法"></a>二、经典方法</h3><p>Deformable parts model （Object Detection with Discriminatively Trained Part Based Models）</p><p><img src="1563370701537.png" alt></p><p>在这里，feature map用传统的方法计算，上图很明显计算的是灰度的梯度特征，把图变大几倍就是muti-scale。model的模板是给好的。右边是热力响应图。把不同尺度的融合在一起产生一个综合的。每一个成就窗口检测出来都会和模板中的所有类别比较一下，看对哪一类的响应最大，这样子的算法必定计算起来会很慢。这样子计算也会得到很多框，而将准确度不高的框删除用的方法就是NMS。</p><p><strong>hard mining的概念</strong></p><p>在deep learning时代处理这个比较经典的方法就在这篇论文中用到的：<a href="https://arxiv.org/pdf/1604.03540.pdf" target="_blank" rel="noopener">Training Region-based Object Detectors with Online Hard Example Mining</a>在一个mini-batch 里,能让classifier 混淆的sample (RoI outputs),标记成hard example, 用到下一轮的训练中。</p><h3 id="三、NMS（非极大抑制算法）"><a href="#三、NMS（非极大抑制算法）" class="headerlink" title="三、NMS（非极大抑制算法）"></a>三、NMS（非极大抑制算法）</h3><p>NMS(Non Maximum Suppression)，又名非极大值抑制，是目标检测框架中的后处理模块，主要用于删除高度冗余的bbox，先用图示直观看看NMS的工作机制：<br>从上述可视化的结果可以看出，在目标检测过程中，对于每个obj在检测的时候会产生多个bbox，NMS本质就是对每个obj的多个bbox去冗余，得到最终的检测结果．</p><p>NMS用于剔除图像中检出的冗余bbox，标准NMS的具体做法为：</p><p><strong>step-1</strong>：将所有检出的output_bbox按cls score划分（如pascal voc分20个类，也即将output_bbox按照其对应的cls score划分为21个集合，1个bg类，只不过bg类就没必要做NMS而已）；</p><p><strong>step-2</strong>：在每个集合内根据各个bbox的cls score做降序排列，得到一个降序的list_k；</p><p><strong>step-3</strong>：从list_k中top1 cls score开始，计算该bbox_x与list中其他bbox_y的IoU，若IoU大于阈值T，则剔除该bbox_y，最终保留bbox_x，从list_k中取出；</p><p><strong>step-4</strong>：选择list_k中top2 cls score(步骤3取出top 1 bbox_x后，原list_k中的top 2就相当于现list_k中的top 1了，但如果step-3中剔除的bbox_y刚好是原list_k中的top 2，就依次找top 3即可，理解这么个意思就行)，重复step-3中的迭代操作，直至list_k中所有bbox都完成筛选；</p><p><strong>step-5</strong>：对每个集合的list_k，重复step-3、4中的迭代操作，直至所有list_k都完成筛选；</p><p>可以结合下图理解：</p><p><img src="1563430966350.png" alt></p><p>想更好的理解可以参考这篇中的结合代码的讲解：</p><p><a href="https://zhuanlan.zhihu.com/p/49481833" target="_blank" rel="noopener">关于NMS的代码理解</a></p><h3 id="四、回顾CNN方法与深度学习要素"><a href="#四、回顾CNN方法与深度学习要素" class="headerlink" title="四、回顾CNN方法与深度学习要素"></a>四、回顾CNN方法与深度学习要素</h3><h4 id="CNN方法回顾"><a href="#CNN方法回顾" class="headerlink" title="CNN方法回顾"></a>CNN方法回顾</h4><p>一个CNN网络基本如下:</p><p><img src="1563383121134.png" alt></p><p>在监督学习中,损失(loss) 是一个重要的概念。在整个数据集中的 loss为：<br>$$<br>L(W)=\frac{1}{|D|} \sum_{i}^{|D|} f_{W}\left(X^{(i)}\right)+\lambda r(W)<br>$$<br>但是通常计算整个数据集是不现实的，所以采用的方法是取一个mini-batch。<br>$$<br>L(W) \approx(\frac{1}{N} \sum_{i}^{N} f_{W}\left(X^{(i)}\right)+\lambda r(W)<br>$$<br>其中N就代表的mini-batch，通常可以取2,4,8等，而后面的哪一项是正则化，为了提高模型的泛化能力，避免过拟合而加上的。</p><p>参数的更新是使用梯度下降的方法。<br>$$<br>\begin{array}{c}{V_{t+1}=\mu V_{t}-\alpha \nabla L\left(W_{t}\right)} \\ {W_{t+1}=W_{t}+V_{t+1}}\end{array}<br>$$</p><p>$\mu$防止波动太快，也叫momentum，$\alpha$就是learningrate，$\lambda$也叫weightdecay</p><p>在深度学习中loss也有很多，如下图所示：</p><p><img src="1563384355964.png" alt></p><p>在目标检测中用的多还是CrossEntropyLoss。关于各个loss的详细讲解可以参考博主另一篇文章机器学习的loss。</p><h4 id="深度学习三要素"><a href="#深度学习三要素" class="headerlink" title="深度学习三要素"></a>深度学习三要素</h4><ol><li>首先关注模型:用了什么结构?</li><li>在什么数据集上做的?实验效果如何?</li><li>算法<br>a. 训练过程:loss, sampling, 梯度<br>b. 测试过程:multi-scale, NMS</li></ol><h3 id="五、RCNN家族算法"><a href="#五、RCNN家族算法" class="headerlink" title="五、RCNN家族算法"></a>五、RCNN家族算法</h3><p>如何检测出下图中的物体类别和位置?</p><p><img src="1563384823268.png" alt></p><p>解决方案:<br>Step 1 现产生一些可能含有物体的目标框(region proposal / bounding box)<br>Step 2 对于给定的目标框做分类。</p><p><strong>对于Step 1如果生成目标框呢?</strong></p><ol><li>传统方法:selective search (来自论文Uijlings et al, “Selective Search for Object Recognition”, IJCV 2013)</li></ol><p><img src="1563385035180.png" alt></p><p>这是一种自下而上(bottom-up segmentation从像素级至上)的方法:<br>它是基于SLIC算法,先将图像分割成很多小的区域(superpixel), 然后根据小区域之间的相似程度,融合。最后结合    各个尺度上的结果,产生很多region proposals.</p><ol start="2"><li><p>深度学习方法，使用一个网络来生成（RPN网络）</p><p><img src="1563385223200.png" alt></p></li></ol><p>上图为在NIPS 2015上发表的Faster-RCNN中的RPN（Region proposal network）结构。</p><p>在feature map上的每一个点,预先设定好固定大小、和比例的”模板框” (template, anchor), 和真值(ground truth)做比较,得出loss.<br>损失函数的公式为<br>$$<br>\begin{array}{c}{L\left(\{p_{i}\right\},\left\{t_{i}\right\})=\frac{1}{N_{c l s}} \sum_{i} L_{c l s}\left(p_{i}, p_{i}^{<em>}\right) }{+\lambda \frac{1}{N_{r e g}} \sum_{i} p_{i}^{</em>} L_{r e g} (t_{i}, t_{i}^{<em>})}\end{array}<br>$$<br>在这个loss函数中，前面一项是计算分类的loss，后边是计算回归框的loss。<br>$p_i$是第i个anchor是否含有物体的概率，范围为0-1，$p_i^</em>$是真值。$t_i$是第i个anchor的预测位置=$[x_1,x_1,y_1,y_2]$<br>第二项乘以$p_{i}$是为了确保当前检测出来是有物体的，没有物体时，自然不会进行框的位置的回归。$t_{i}$的计算方式如下<br>$$<br>\begin{aligned} t_{x}=(x-x_{a}) / w_{a}, &amp; t_{y}=\left(y-y_{a}\right) / h_{a}, \quad t_{w}=\log \left(w / w_{a}\right), \quad t_{h}=\log \left(h / h_{a}\right) \\ t_{x}^{<em>}=\left(x^{</em>}-x_{a}\right) / w_{a}, &amp; t_{y}^{<em>}=\left(y^{</em>}-y_{a}\right) / h_{a}, \quad t_{w}^{<em>}=\log \left(w^{</em>} / w_{a}\right), \quad t_{h}^{<em>}=\log \left(h^{</em>} / h_{a}\right) \end{aligned}<br>$$<br>cls（分类）和reg（回归）的loss如下</p><p>$L_{lcs}$:cross-entropy loss<br>$L_{reg}$: smoothing l1 loss<br>$$<br>\begin{array}{l}{\qquad L_{\text { loc }}\left(t^{u}, v\right)=\sum_{i \in\{x, y, w, h\}} \operatorname{smooth}_{L_{1}}\left(t_{i}^{u}-v_{i}\right)} \\ {\text { in which }} \\ {\qquad \operatorname{smooth}_{L_{1}}(x)=\left\{\begin{array}{ll}{0.5 x^{2}} &amp; {\text { if }|x|&lt;1} \\ {|x|-0.5} &amp; {\text { otherwise }}\end{array}\right.}\end{array}<br>$$<br><strong>RCNN家族的方法如下：</strong><br>RCNN </p><p>Fast-RCNN<br>Faster-RCNN (这个工作是大部分流行方法的基石 )<br>FPN<br>RetinaNet<br>Mask-RCNN</p><h4 id="RCNN"><a href="#RCNN" class="headerlink" title="RCNN"></a>RCNN</h4><p>……</p><p><img src="1563387259965.png" alt></p><p><strong>Step 1</strong> </p><p>Use an off-the-shelf region/object/detection proposal algorithm (~2k proposals per image)</p><p><strong>Step 2</strong><br>Crop and warp each proposal image window to obtain a fixed-size network input</p><p><strong>Step 3</strong><br>Forward propagate the fixed-size network input to get a feature representation</p><p><strong>Step 4</strong><br>按照之前定义的loss 计算即可L_cls = p* Log p, l_reg = smooth_l1</p><p>RCNN (Region CNN) 的瓶颈：在第三步时，计算ConvNet(r_i)时，对于每一个区域都要计算feature,~2000的区域,计算量很大</p><h4 id="Fast-RCNN"><a href="#Fast-RCNN" class="headerlink" title="Fast RCNN"></a>Fast RCNN</h4><p><img src="1563387729118.png" alt></p><p>和RCNN比,有何区别？</p><p>区别1: FCN提取整个图片的feature</p><p>区别2: RoI pooling* 从feature map里截。取各个小区域的feature (节省了计算量).</p><p>RoI pooling 的出现,让我们能用任意大小的图像作为输入,总能产生固定大小的输出，RoI layer的BP计算详见Fast RCNN paper。随着技术的发展,RoI-pooling也有各种各样的变种，有兴趣可以下来搜一下。</p><p>Fast RCNN的瓶颈其实在于第一步：Use an off-the-shelf region/object/detection proposal algorithm (~2k proposals per image) Region proposals have very poor recall (ok for PASCAL VOC, major bottleneck for COCO) Also, they can be slow</p><h4 id="Faster-RCNN"><a href="#Faster-RCNN" class="headerlink" title="Faster RCNN"></a>Faster RCNN</h4><p><img src="1563388346336.png" alt></p><p>其他的都不变，就是将Fast RCNN讲的局限的地方变成由一个神经网络来生成，RCNN和Fast RCNN实际上都还是用的selective search的方法。所以Faster RCNN的pipeline如下图所示</p><p><img src="1563388712172.png" alt></p><h4 id="Feature-pyramid-network-FPN"><a href="#Feature-pyramid-network-FPN" class="headerlink" title="Feature pyramid network (FPN)"></a>Feature pyramid network (FPN)</h4><p><img src="1563388820088.png" alt></p><p>唯一与Faster RCNN的区别就是多尺度的提取了特征图</p><h4 id="RFCN-Region-based-fully-convolutional-networks"><a href="#RFCN-Region-based-fully-convolutional-networks" class="headerlink" title="RFCN (Region-based fully convolutional networks)"></a>RFCN (Region-based fully convolutional networks)</h4><p>提出的背景:之前的方法每个区域都需要一个子网 络来计算loss.</p><p><a href="https://github.com/daijifeng001/r-fcn" target="_blank" rel="noopener">开源代码地址</a></p><p>这个工作:</p><ol><li>Feature map是考虑到位置的(position-sensitive score map)。</li><li>节省了很多计算量:完全卷积结构,共用一个 input image</li><li>解决了检测问题其实是跟位置有关的。</li></ol><p><img src="1563389074947.png" alt></p><p>每个颜色代表不同的位置 选择区域。<br>The bank of k x k score maps correspond to a k x k spatial grid describing relative positions.</p><p>例如,有一个 region proposal, 我们要检测,人,这一类:</p><p><img src="1563389151459.png" alt></p><h4 id="Mask-RCNN"><a href="#Mask-RCNN" class="headerlink" title="Mask RCNN"></a>Mask RCNN</h4><p><img src="1563389261109.png" alt></p><p><img src="1563389322040.png" alt></p><p>上图是分割任务</p><h4 id="以上方法的联系"><a href="#以上方法的联系" class="headerlink" title="以上方法的联系"></a>以上方法的联系</h4><p><img src="1563389513097.png" alt></p><h3 id="六、物体检测领域前沿知识"><a href="#六、物体检测领域前沿知识" class="headerlink" title="六、物体检测领域前沿知识"></a>六、物体检测领域前沿知识</h3><p>以ECCV 2018为例子</p><p><a href="https://eccv2018.org/" target="_blank" rel="noopener">ECCV2018论文列表</a></p><p>值得关注的论文：</p><p><a href="https://arxiv.org/pdf/1807.11590.pdf" target="_blank" rel="noopener">Acquisition of Localization Confidence for Accurate Object Detection</a></p><p><a href="https://arxiv.org/abs/1803.06799" target="_blank" rel="noopener">Revisiting RCNN: On Awakening the Classification Power of Faster RCNN</a></p><p><a href="https://arxiv.org/pdf/1804.06215.pdf" target="_blank" rel="noopener">DetNet: A Backbone network for Object Detection</a></p><p><a href="https://arxiv.org/pdf/1803.07066.pdf" target="_blank" rel="noopener">Learning Region Features for Object Detection (submit to ECCV 2018)</a></p><p><a href="https://arxiv.org/pdf/1803.05858v1.pdf" target="_blank" rel="noopener">Pseudo Mask Augmented Object Detection</a></p><p><a href="https://arxiv.org/pdf/1712.02408.pdf" target="_blank" rel="noopener">Deep Regionlets for Object Detection</a></p><p><a href="https://arxiv.org/pdf/1808.01244v1.pdf" target="_blank" rel="noopener">CornerNet: Detecting Objects as Paired Keypoints</a></p><p>其中Acquisition of Localization Confidence for Accurate Object Detection这篇论文的idea非常有意思</p><h4 id="Acquisition-of-Localization-Confidence-for-Accurate-Object-Detection"><a href="#Acquisition-of-Localization-Confidence-for-Accurate-Object-Detection" class="headerlink" title="Acquisition of Localization Confidence for Accurate Object Detection"></a>Acquisition of Localization Confidence for Accurate Object Detection</h4><p><img src="1563416217049.png" alt></p><p>黄色是真值,红色和绿色是预测结果<br>根据NMS,和confidence score, 选择红的还是黄的？按照之前用的额NMS方法其实在这里用的是cls的confidence来进行比较选择应该删除掉的框，所以按照以前的NMS这里应该删除掉绿色的框。但是之后在算评价指标mPA的时候，使用IoU来进行计算，所以显然留下的框的IoU不高，会导致评价的时候结果不理想。所以这篇论文的motivation就是这个，训练出一个NetWork使之能预测出IoU的值，称之为localization confidence，这个应该为NMS阶段参考的排序。</p><p><img src="1563417010300.png" alt></p><p>Misaligned classification and localization accuracy：</p><p>How to solve it? Build a network to predict IoU! —&gt; IoU-guided NMS why? since the mAP is measured by IOU。</p><h4 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h4><p>下一阶段物体检测领域可以做的有：</p><p>1、联合训练（Faster RCNN最初的时候RPN和detection是分开train的，现在都是End-toEnd）</p><p>2、在网络中引入各种监督信号,以用来 检测各个尺度上的物体，网络的前几层适合用来检测小的物体，后面的网络是大的物体。</p><p>解决多尺度的问题在网络中加入监督信号有一个很典型的网络：Stacked-Hourglass Architecture（最初提出是为了估计2D pose）</p><p><img src="1563417333635.png" alt></p><p>从图中可以看出：是使用模块进行网络设计，先降采样,再升采样的全卷积结构，跳级结构辅助升采样，中继监督训练。关于这个结构的详细解读可以参考博客：<a href="http://blog.csdn.net/shenxiaolu1984/article/details/51428392" target="_blank" rel="noopener">Stacked Hourglass算法详解</a></p><p>在物体检测方面，还有一类是直接利用anchor 做detection的方法，也叫做one-stage detector，比如SSD，YOLO（实验室的项目，师兄就在各种魔改SSD部署在板子上，YOLO在做过貌似被放弃了233333）</p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 目标检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习阅读笔记</title>
      <link href="/2019/07/11/ji-qi-xue-xi-yue-du-bi-ji/"/>
      <url>/2019/07/11/ji-qi-xue-xi-yue-du-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-模型评估与选择"><a href="#第二章-模型评估与选择" class="headerlink" title="第二章 模型评估与选择"></a>第二章 模型评估与选择</h1><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><p>错误率（error rate）：分类错误的样本数占样本总数的比例E=a/m</p><p>精度（accuracy）：精度=1-错误率</p><p>训练误差（training error)或经验误差（empirical error):学习器在训练集上的误差</p><p>泛化误差（generalization error）：在新样本上的误差</p><h2 id="评估方法"><a href="#评估方法" class="headerlink" title="评估方法"></a>评估方法</h2><p>对D进行适当的处理，使其产生训练集S和测试集T</p><ol><li>留出法（hold-out）<br>将数据集D直接划分为互斥的两个集合一个为训练集合S一个为测试集合T<br>训练/测试集合的划分要尽可能保持数据的一致性<br>分层采样(stratified sampling):保留类别比例的采样<br>在使用留出发时：采用若干次随机划分、重复进行实验评估后取平均值作为留出法的评估结果<br>缺点：S与T大小的划分造成的问题，理论上S越大和D越接近，但T小评估结果不稳定准确。常见做法S为2/3或4/5</li><li>交叉验证法(cross validation)<br>将数据集D划分为k个大小相似的互斥子集，每个子集都尽可能保持数据分布的一致性。每次用k-1个子集的并集作为训练集。剩下的那个作为测试集，所以可以有k组训练/测试集，最后的结果是k次结果的平均值。<br>使用时：随机划分p次，计算p次k折交叉验证的平均值</li><li>自助法(bootstrappig)<br>给定数据集D，然后在D中选m个样本。抽到之后又放回D相当于每次都是从D中抽取一个，抽取m次。那么一个样本始终不被抽到的概率为（1-1/m）的m次方。取极限为1/e约等于0.368，则在D中有百分之36.8的样本未出现在采样数据集D飘中。改变了初始数据集的分布，会引入估计偏差。</li></ol><p>概率密度函数:在数学中，连续型随机变量的概率密度函数（在不至于混淆时可以简称为密度函数）是一个描述这个随机变量的输出值，在某个确定的取值点附近的可能性的函数。 而随机变量的取值落在某个区域之内的概率则为概率密度函数在这个区域上的积分。 当概率密度函数存在的时候，累积分布函数是概率密度函数的积分。</p><h2 id="性能度量"><a href="#性能度量" class="headerlink" title="性能度量"></a>性能度量</h2><h3 id="1-错误率和精度"><a href="#1-错误率和精度" class="headerlink" title="1.错误率和精度"></a>1.错误率和精度</h3><p>错误率和精度定义为：<br>$$<br>E(f ; D)=\frac{1}{m} \sum_{i=1}^{m} \mathbb{I}\left(f\left(\boldsymbol{x}_{i}\right) \neq y_{i}\right)<br>$$</p><p>$$<br>\begin{aligned} \operatorname{acc}(f ; D) &amp;=\frac{1}{m} \sum_{i=1}^{m} \mathbb{I}\left(f\left(\boldsymbol{x}_{i}\right)=y_{i}\right) \\ &amp;=1-E(f ; D) \end{aligned}<br>$$</p><p>$$<br>如果给出数据分布\mathcal{D}和概率密度函数p(\cdot),错误率和精度可以分别描述为<br>$$</p><p>$$<br>E(f ; \mathcal{D})=\int_{\boldsymbol{x} \sim \mathcal{D}} \mathbb{I}(f(\boldsymbol{x}) \neq y) p(\boldsymbol{x}) \mathrm{d} \boldsymbol{x}<br>$$</p><p>$$<br>\begin{aligned} \operatorname{acc}(f ; \mathcal{D}) &amp;=\int_{\boldsymbol{x} \sim \mathcal{D}} \mathbb{I}(f(\boldsymbol{x})=y) p(\boldsymbol{x}) \mathrm{d} \boldsymbol{x} \\ &amp;=1-E(f ; \mathcal{D}) \end{aligned}<br>$$</p><h3 id="2-查准率-precision-、查全率-recall-与F1"><a href="#2-查准率-precision-、查全率-recall-与F1" class="headerlink" title="2.查准率(precision)、查全率(recall)与F1"></a>2.查准率(precision)、查全率(recall)与F1</h3><p>分类结果混淆矩阵</p><p><img src="/home/litchi/hexo-beantech/source/_posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/1.png" alt></p><p>查准率与查全率分别定义为：<br>$$<br>P=\frac{T P}{T P+F P}<br>$$</p><p>$$<br>R=\frac{T P}{T P+F N}<br>$$</p><p>P-R曲线如下：</p><p><img src="/home/litchi/hexo-beantech/source/_posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/2.png" alt></p><p>如果一个学习器的P-R曲线完全被另一个包住，那么后者的性能强于前者，如A强于C，如果有交叉则不好判断，可用的方法是求面积，由于不太好估算，则可以根据平衡点(break-event point简称BEP)查准率等于查全率的值如图A优于B。由于BEP还是过于简单，有F1度量，其定义为：<br>$$<br>F 1=\frac{2 \times P \times R}{P+R}<br>$$<br>F1度量的一般形式为：<br>$$<br>F_{\beta}=\frac{\left(1+\beta^{2}\right) \times P \times R}{\left(\beta^{2} \times P\right)+R}<br>$$</p><p>$$<br>\beta&gt;0度量了查全率对查准率的相对重要性\beta=1退化为标准的F1度量<br>$$</p><p>$$<br>\beta&gt;1查全率有更大的影响,\beta&lt;1查准率有更大的影响<br>$$</p><p>当进行多次实验则有多个混淆矩阵，在n个混淆矩阵上综合考察查准率和查全率。一种直接的做法是直接计算出各个矩阵的查全率和查准率<br>$$<br>\left(P_{1}, R_{1}\right),\left(P_{2}, R_{2}\right), \ldots,\left(P_{n}, R_{n}\right)<br>$$<br>再计算平均值。这样计算的就是宏查全率(macro-R),宏查准率(macro-P),以及宏F1(macro-F1)：</p><p>$$<br>\operatorname{macro}-P=\frac{1}{n} \sum_{i=1}^{n} P_{i}<br>$$</p><p>$$<br>\operatorname{macro}-F 1=\frac{2 \times \operatorname{macr} 0-P \times \operatorname{macr} 0-R}{\operatorname{macro}-P+\operatorname{macr} 0-R}<br>$$</p><p>$$<br>\operatorname{macro}-R=\frac{1}{n} \sum_{i=1}^{n} R_{i}<br>$$</p><p>还可以对各混淆矩阵的对应元素进行平均，得到TP,FP,TN,FN的平均值，分别记为<br>$$<br>\overline{T P}, \overline{F P}, \overline{T N}, \overline{F N}<br>$$<br>再基于这些平均值计算出微查准率(micro-P),微查全率(micro-R),微F1(micro-F1)<br>$$<br>\operatorname{micro}-P=\frac{\overline{T P}}{\overline{T P}+\overline{F P}}<br>$$</p><p>$$<br>\operatorname{micro}-R=\frac{\overline{T P}}{\overline{T P}+\overline{F N}}<br>$$</p><p>$$<br>micro-F1 =\frac{2 \times \text { micro- } P \times \text { micro }-R}{\operatorname{micro}-P+\operatorname{micro}-R}<br>$$</p><h3 id="3-ROC与AUC"><a href="#3-ROC与AUC" class="headerlink" title="3.ROC与AUC"></a>3.ROC与AUC</h3><p>ROC曲线：根据学习器的预测结果对样例进行排序，按此顺序逐个把样品作为正例进行预测，每次计算出两个重要的值，分别以他们为横纵坐标作图。所以ROC曲线的纵轴是真正确率(TPR)，横轴是假正确率(FPR)。</p><p>在现实中，由于只能利用有限的测试样本来绘制ROC曲线，所以只能画出(b)图所示的近似曲线。AUC(Area Under ROC Curve)为ROC曲线的面积。面积大小可用来表示学习器的好坏。</p><p>假定ROC曲线是由坐标为：<br>$$<br>\left\{\left(x_{1}, y_{1}\right),\left(x_{2}, y_{2}\right), \ldots,\left(x_{m}, y_{m}\right)\right\}<br>$$<br>的点按序连接而形成，其中<br>$$<br>\left(x_{1}=0, x_{m}=1\right)<br>$$<br>则AUC可估算为：<br>$$<br>\mathrm{AUC}=\frac{1}{2} \sum_{i=1}^{m-1}\left(x_{i+1}-x_{i}\right) \cdot\left(y_{i}+y_{i+1}\right)<br>$$<br>排序loss为：<br>$$<br>\ell_{r a n k}=\frac{1}{m^{+} m^{-}} \sum_{x^{+} \in D^{+}} \sum_{x^{-} \in D^{-}}\left(\mathbb{I}\left(f\left(\boldsymbol{x}^{+}\right)&lt;f\left(\boldsymbol{x}^{-}\right)\right)+\frac{1}{2} \mathbb{I}\left(f\left(\boldsymbol{x}^{+}\right)=f\left(\boldsymbol{x}^{-}\right)\right)\right)<br>$$</p><p>对应的是ROC曲线之上的面积</p><h3 id="4-代价敏感错误率与代价曲线"><a href="#4-代价敏感错误率与代价曲线" class="headerlink" title="4.代价敏感错误率与代价曲线"></a>4.代价敏感错误率与代价曲线</h3>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>End-to-end Recovery of Human Shape and Pose</title>
      <link href="/2019/07/08/end-to-end-recovery-of-human-shape-and-pose/"/>
      <url>/2019/07/08/end-to-end-recovery-of-human-shape-and-pose/</url>
      
        <content type="html"><![CDATA[<h2 id="End-to-end-Recovery-of-Human-Shape-and-Pose"><a href="#End-to-end-Recovery-of-Human-Shape-and-Pose" class="headerlink" title="End-to-end Recovery of Human Shape and Pose"></a>End-to-end Recovery of Human Shape and Pose</h2><p><a href="https://download.csdn.net/download/qq_36113487/10752712" target="_blank" rel="noopener">论文的中文翻译下载</a><br><strong>文章主要干了什么：</strong><br>此文章提出了一个以端到端的方法实现从二维人体图像恢复出三维人体模型的框架。在此之前，绝大多数的方法或是只关心三维骨架的重建，或是采用两段式的方法，即先从二维图像推断出2D-joint location，再从2D-joint来预测三维模型或计算三维参数。<br><strong><em>两阶段法</em></strong>：<br>1、用2D pose检测，预测2D关节位置<br>2、通过回归分析和model fitting从2D关节去预测3D关节，其公共方法是利用一个学习的3D骨架库。<br>这些方法为了约束2D-to-3D的固有歧义，用了不同的先验：<br>1、假定四肢长度，或比例<br>2、学习一个姿势先验，获得了与姿势独立的关节角度限制。<br>特点：对于域的转变更鲁棒，过度依赖2D关节点侦测，丢掉了图片的信息。<br><strong><em>在实现端到端的从二维人体图像恢复出三维人体模型框架中遇到的难题</em></strong><br>1、缺少足够数量的带有ground truth 3D annotation的自然获取的实况图像，目前已有的自带3D结构注解的图像都是在特定的实验环境下获得的，并不足以反映真实世界可能出现的所有情况。<br>2、从二维到三维存在着固有的模棱两可性，因为缺少了深度信息，许多不同的三维模型都可以映射为同一个二维图像，而由二维图像映射到三维时，也不一定能够符合人体结构学。<br><strong><em>难题的解决</em></strong><br>1、解决方案思路出发点是使用两个数据集来进行训练<br>一个是带有2D annotation的实况二维图像集，另一个是人体的3D mesh模型集，这两个数据集是没有配对关系的。当获得一副图像，先预测该图像对应的3D mesh参数，然后使推断出来的3D mesh的3D Joint映射到2D时能够与原图的2D-joint契合。通过这样一个从2D到3D再到2D的过程，我们就可以使用海量的不带三维信息的二维图像来作为数据集进行训练。在预测模型参数方面，以前的多数方法是把这个问题当做分类问题来处理，这样做得到的误差是离散化的，所以在精度上有不足。这篇文章在参数预测上则采用了iterative regression with feedback的方法。<br>2、为了使生成的模型符合真实的人体结构，使用GAN的网络结构，把生成模型的参数输入到一个Discriminator中，Discriminator在训练中学习每个joint之间的角度限制，由Discriminator来判断模型是否真实。</p><p><strong>文章方法的优越之处</strong><br>1、直接从图像特征中推断出三维网格参数，而之前的方法是从2D中推断出来的要点。这就避免了两个阶段的训练同时也避免浪费有价值的信息。<br>2、输出的是三维网络而不是骨架<br>3、提高精度，减少运行时间<br>4、不需要有配对的2D-3D数据集，打开了从大量的2D数据中学习3D的可能性</p><p><strong>重要的相关知识：</strong><br>1、关于SMPL（A Skinned Multi-Person Linear Model）<br>2015年提出了这一模型，该模型可分离为shape和pose，只需要输入一个10-D的vector β（代表shape，即个人体高矮胖瘦、头身比等比例的10个参数。由PCA对数据集人体进行主成分分析得到）和一个3K-D的vector θ（代表pose，代表人体整体运动位姿和24个关节相对角度的75个参数。其中K为骨架节点数，3是每个关节具有的3个自由度），就可以输出对应的三维人体模型。<br>SMPL骨架的节点个数为14，标注了人体影响姿态的几个主要关节，即：</p><pre><code>smpl_names = [               &#39;Left_Hip&#39;, &#39;Right_Hip&#39;, &#39;Waist&#39;, &#39;Left_Knee&#39;, &#39;Right_Knee&#39;,               &#39;Upper_Waist&#39;, &#39;Left_Ankle&#39;, &#39;Right_Ankle&#39;, &#39;Chest&#39;,               &#39;Left_Toe&#39;, &#39;Right_Toe&#39;, &#39;Base_Neck&#39;, &#39;Left_Shoulder&#39;,               &#39;Right_Shoulder&#39;, &#39;Upper_Neck&#39;, &#39;Left_Arm&#39;, &#39;Right_Arm&#39;,               &#39;Left_Elbow&#39;, &#39;Right_Elbow&#39;, &#39;Left_Wrist&#39;, &#39;Right_Wrist&#39;,               &#39;Left_Finger&#39;, &#39;Right_Finger&#39;           ]</code></pre><p>加上camera的三个维度，则该模型最终总的输入就是10+3+3x14=85-D的数据。<br>关于SMPL（A Skinned Multi-Person Linear Model）的文档可以在官网上学习<br><a href="http://smpl.is.tue.mpg.de/" target="_blank" rel="noopener">SMPL官网</a><br><a href="https://blog.csdn.net/chenguowen21/article/details/82793994?utm_source=blogxgwz0" target="_blank" rel="noopener">SMPL模型</a></p><p><strong>看懂论文可以参考的相关文章</strong>：<br>1、<a href="https://blog.csdn.net/yeluohanchan/article/details/78714385" target="_blank" rel="noopener">基于3D关节点的人体动作识别综述</a><br>2、<a href="https://blog.csdn.net/weixin_40581617/article/details/82703564" target="_blank" rel="noopener">人体骨骼关键点检测综述</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Everybody Dance Now</title>
      <link href="/2019/07/08/everybody-dance-now/"/>
      <url>/2019/07/08/everybody-dance-now/</url>
      
        <content type="html"><![CDATA[<h1 id="一、功能概述"><a href="#一、功能概述" class="headerlink" title="一、功能概述"></a>一、功能概述</h1><p>论文效果视频：<a href="https://youtu.be/PCBTZh41Ris" target="_blank" rel="noopener">https://youtu.be/PCBTZh41Ris</a><br>给定一个源视频人物和另一个目标人物的视频，我们的目标是生成一个新目标人的视频，做出与源视频中的人物相同的动作。<br><img src="https://img-blog.csdnimg.cn/20181216213955798.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTEzNDg3,size_16,color_FFFFFF,t_70" alt="图 1:从源人物到目标人物的动作转换"><br>这一问题可以看作是每一帧上图像到图像的转换，同时保证时间和空间的流畅。用动作探测器作为源视频和目标视频中间的表示（火柴人模型，这个部分使用openpose完成 <a href="https://github.com/CMU-Perceptual-Computing-Lab/openpose.git)我们学习了一种从舞者动作画面到目标物体的映射，为了生成的视频的时间平滑性，我们在每个帧上调整前一时间步的预测。为了在我们的结果中增加面部真实感，我们包括一个专门的GAN训练，以产生目标人的面部。" target="_blank" rel="noopener">https://github.com/CMU-Perceptual-Computing-Lab/openpose.git)我们学习了一种从舞者动作画面到目标物体的映射，为了生成的视频的时间平滑性，我们在每个帧上调整前一时间步的预测。为了在我们的结果中增加面部真实感，我们包括一个专门的GAN训练，以产生目标人的面部。</a></p><h1 id="二、方法概述"><a href="#二、方法概述" class="headerlink" title="二、方法概述"></a>二、方法概述</h1><p>为了完成这项任务，我们将管道划分为三个阶段<br>（1）姿势检测，（2）全局姿势归一化（3）从标准化火柴人模型姿势棒图到目标主体的映射。<br>在姿势检测阶段，我们使用预训练状态的姿势检测器来创建来自源视频的一帧的火柴人模型。全局姿势标准化阶段考虑了源人物和目标人物形状与框架内位置之间的差异。最后，我们设计了一个系统来学习从标准化的姿势棒图到具有对抗训练的目标人的图像的映射。<br><img src="https://img-blog.csdnimg.cn/20181216214342840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTEzNDg3,size_16,color_FFFFFF,t_70" alt="图 2:完整训练系统"><br>如图2的训练设置中所示。给定来自原始目标视频的帧y，我们使用姿势检测器P来获得相应的火柴人模型x=P(y)。在训练期间，我们使用相应的(x,y)对来学习映射G，该映射G合成给定姿势的火柴人x的目标人物的图像。通过使用预训练的VGGNet模型进行具有鉴别器D和感知重建损失的对抗训练，我们优化生成的输出G（x）以类似于地面实况目标主体帧y。D试图区分“真实”图像对（即（姿势棒图x，地面实况图像y））和“假”图像对（即（姿势棒图x，模型输出G（x））。<br>转换设置显示在图2的转换设置中。与训练类似，姿势检测器P从源帧y‘中提取姿势信息，产生姿势棒图x’。但是，在视频中，源人物可能看起来更大或更小，并且站在与目标视频中的人物不同的位置。为了使源姿势更好地与目标的拍摄设置对齐，我们应用全局姿势归一化N orm来将源的原始姿势x‘变得为与目标视频x中的姿势更加一致。然后，我们将标准化的姿势棒图x传递到我们训练的模型G中，以获得我们的目标人物的图像G(x)，其对应于源y’的原始图像。</p><h1 id="三、详细的方法"><a href="#三、详细的方法" class="headerlink" title="三、详细的方法"></a>三、详细的方法</h1><h2 id="3-1姿势估计"><a href="#3-1姿势估计" class="headerlink" title="3.1姿势估计"></a>3.1姿势估计</h2><p>我们使用姿势估计器p（实际上为openpose）估计关节的坐标，然后将关节画成火柴人模型（姿势棒图）如图3所示。<br><img src="https://img-blog.csdnimg.cn/20181216214623113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTEzNDg3,size_16,color_FFFFFF,t_70" alt="图 3:姿势棒图与目标人框架之间的对应关系"></p><h2 id="3-2全局姿势标准化"><a href="#3-2全局姿势标准化" class="headerlink" title="3.2全局姿势标准化"></a>3.2全局姿势标准化</h2><p>在不同的视频中，目标人物可能具有不同的肢体比例；靠近或远离相机。因此，当在两个对象之间传送运动姿势时，可能需要变换源视频人物的姿势关键点，使关键点能根据目标人物的身体形状和比例产生，如图2的转换部分一样。我们通过分析每个目标的姿势的高度和脚踝位置来找到这种变换，并使用两个视频中最近和最远的脚踝位置之间的线性映射。收集这些统计数据后，我们根据相应的姿势检测计算每个帧的比例和平移。有关全局姿态归一化的更多详细信息，请参见论文中的第9节的附录。</p><h2 id="3-3图像到图像的改进"><a href="#3-3图像到图像的改进" class="headerlink" title="3.3图像到图像的改进"></a>3.3图像到图像的改进</h2><p>在GAN部分生成图片主要使用的pix2pixHD这篇论文的模型（论文 <a href="http://openaccess.thecvf.com/content_cvpr_2018/papers/Wang_High-Resolution_Image_Synthesis_CVPR_2018_paper.pdf" target="_blank" rel="noopener">http://openaccess.thecvf.com/content_cvpr_2018/papers/Wang_High-Resolution_Image_Synthesis_CVPR_2018_paper.pdf</a> 在这个基础上将pix2pixHD的对抗训练设置修改为（1）产生时间上相干的视频帧，（2）合成逼真的脸部图像。以下是原始目标和对他们的修改的描述。</p><h3 id="3-3-1-pix2pixHD"><a href="#3-3-1-pix2pixHD" class="headerlink" title="3.3.1 pix2pixHD"></a>3.3.1 pix2pixHD</h3><h4 id="1-pix2pix"><a href="#1-pix2pix" class="headerlink" title="(1)pix2pix"></a>(1)pix2pix</h4><p><img src="https://img-blog.csdnimg.cn/20181216214926472.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTEzNDg3,size_16,color_FFFFFF,t_70" alt="图 4:pix2pix过程"><br>给定语义标签图和对应的真实照片集 (si,xi)，该模型中的生成器用于从语义标签图生成出真实图像，而判别器用于区分真实图像和生成的图像，该条件GANs对应的优化问题如下：<br>                  <img src="https://img-blog.csdnimg.cn/20181216215038739.jpg" alt="在这里插入图片描述"><br>其中：<br><img src="https://img-blog.csdnimg.cn/20181216215158361.jpg" alt="在这里插入图片描述"></p><h4 id="2-Coarse-to-fine-生成器"><a href="#2-Coarse-to-fine-生成器" class="headerlink" title="(2)Coarse-to-fine 生成器"></a>(2)Coarse-to-fine 生成器</h4><p>由粗到精的G网络,整个G网络其实是由两个子网络构成：G1（棕色框里面的）和G2（两个黑色框里面的）。G1网络负责生成1024<em>512的图片，而G2（G1的信息会输入到G2中）则生成2048</em>1024的图片。G1网络由一个用来下采样的前端网络，一系列的ressidual block 以及一个用来上采样的后端网络构成。G2网络也差不多。训练的时候，先训练G1网络，然后训练G2网络，最后联合一起训练G1和G2网络。<br><img src="https://img-blog.csdnimg.cn/20181216215408253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTEzNDg3,size_16,color_FFFFFF,t_70" alt="图 5:生成器网络结构"></p><h4 id="3-Multi-scale-判别器"><a href="#3-Multi-scale-判别器" class="headerlink" title="(3)Multi-scale 判别器"></a>(3)Multi-scale 判别器</h4><p>要在高分辨率下区分真实的与合成的图像，就要求判别器有很大的感受野，这需要更深的网络或者更大的卷积核才能实现，而这两种选择都会增加网络容量从而使网络更容易产生过拟合问题，并且训练所需的存储空间也会增大。这里用 3 个判别器 {D1,D2,D3} 来处理不同尺度的图像，它们具有相同的网络结构：<br><img src="https://img-blog.csdnimg.cn/20181216215552350.png" alt="在这里插入图片描述"></p><h4 id="4-鉴别器特征匹配损失"><a href="#4-鉴别器特征匹配损失" class="headerlink" title="(4)鉴别器特征匹配损失"></a>(4)鉴别器特征匹配损失</h4><p>由于生成器要产生不同尺度的图像，为使训练更加稳定，这里引入特征匹配损失：<br><img src="https://img-blog.csdnimg.cn/20181216215651834.jpg" alt="在这里插入图片描述"><br>其中 D（i）k表示判别器 Dk 提取的第 i 层特征，T 为总的层数，Ni 为该层总元素的个数。于是，总的目标函数如下：<br><img src="https://img-blog.csdnimg.cn/20181216215855424.png" alt="在这里插入图片描述"></p><h4 id="5-综合来看pix2pixHD这个框架可以描述为："><a href="#5-综合来看pix2pixHD这个框架可以描述为：" class="headerlink" title="(5)综合来看pix2pixHD这个框架可以描述为："></a>(5)综合来看pix2pixHD这个框架可以描述为：</h4><p><img src="https://img-blog.csdnimg.cn/20181216220009630.png" alt="在这里插入图片描述"><br>其中对抗性损失为：<br><img src="https://img-blog.csdnimg.cn/20181216220042299.png" alt="在这里插入图片描述"><br>Lfm为pix2pixHD中出现的鉴别器特征匹配损失<br>Lvgg为感知重建损失，它比较了网络不同层的预训练VGGNet特征</p><h3 id="3-3-2时间平滑"><a href="#3-3-2时间平滑" class="headerlink" title="3.3.2时间平滑"></a>3.3.2时间平滑</h3><p>为了创建视频序列，我们修改单个图像生成设置来强制相邻帧之间的时间相干性<br><img src="https://img-blog.csdnimg.cn/20181216220322609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTEzNDg3,size_16,color_FFFFFF,t_70" alt="图 6:时间平滑设置"><br>假序列(xt−1, xt ,G(xt−1),G(xt ))真序列(xt−1, xt ,yt−1,yt )所以时间序列的优化目标为<br><img src="https://img-blog.csdnimg.cn/20181216220731560.png" alt="在这里插入图片描述"></p><h3 id="3-3-3脸部GAN"><a href="#3-3-3脸部GAN" class="headerlink" title="3.3.3脸部GAN"></a>3.3.3脸部GAN</h3><p><img src="https://img-blog.csdnimg.cn/20181216220924952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTEzNDg3,size_16,color_FFFFFF,t_70" alt="图 7:脸部GAN设置"><br>使用主生成器G生成场景的完整图像之后，我们输入以面部G(x)为中心的图像的较小部分和这个部分对应的姿势棒图。r为residual,最后的输出是残差r和原来生成的面部相加。<br>面部的目标为：<br><img src="https://img-blog.csdnimg.cn/20181216221140727.png" alt="在这里插入图片描述"></p><h3 id="3-3-4整体目标"><a href="#3-3-4整体目标" class="headerlink" title="3.3.4整体目标"></a>3.3.4整体目标</h3><p>我们采用分阶段进行训练，其中完整图像GAN与专用面部GAN分开优化。首先，我们训练主生成器和鉴别器（G，D），在此期间完全目标是：<br><img src="https://img-blog.csdnimg.cn/20181216221340344.png" alt="在这里插入图片描述"><br>在此阶段之后，完整的图像生成器和鉴别器权重被冻结，我们以完全的目标优化面部GAN<br><img src="https://img-blog.csdnimg.cn/20181216221434816.png" alt="在这里插入图片描述"></p><h1 id="四、数据的需求"><a href="#四、数据的需求" class="headerlink" title="四、数据的需求"></a>四、数据的需求</h1><p>以略微不同的方式收集源视频和目标视频。要在拍摄的许多姿势中学习目标人物的外观，我们必须要保证目标人物的视频能够捕获足够的运动范围和具有最小的模糊清晰的帧。为了确保画面的质量，我们以120帧/秒的速度拍摄我们的目标人物约20分钟的实时镜头，这可以通过一些现代手机相机实现。由于我们的姿势表示不会对衣服的信息进行编码，因此我们的目标人物要穿皱纹最小的紧身衣服。<br>源视频由于我们只是需要人物的姿势，因为没有目标视频那么多要求，网上的很多舞蹈视频都可以满足要求。<br>我们发现预平滑姿势关键点对减少输出中的抖动非常有帮助。对于具有高帧率（120 fps）的视频，我们随着时间的退役高斯平滑关键点。我们对帧率较低的视频使用中值平滑。</p>]]></content>
      
      
      <categories>
          
          <category> 论文阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研历程经验与大学建议</title>
      <link href="/2019/07/08/bao-yan-li-cheng-jing-yan-yu-da-xue-jian-yi/"/>
      <url>/2019/07/08/bao-yan-li-cheng-jing-yan-yu-da-xue-jian-yi/</url>
      
        <content type="html"><![CDATA[<p><strong>基本情况</strong>：本人是某211大学的计算机科学与技术专业的学生。本学校的计算机的学科评价为B，自认为本校的计算机专业对学生的锻炼还是足的，由于本人是中途转专业的，所以基本上大二就在忙补课了，参加的比赛不多。科研是大三才有意识去做的。<br><strong><em>情况总结</em></strong>：成绩3/136；六级455；中级软件设计师；数学竞赛国赛省二等奖；曾获得国奖；数学竞赛三等奖；负责一个校级科研项目。<br><strong>夏令营期间</strong>：本人是一位四川软妹，所以保研初期就想着回我美丽的家乡，毕竟喜欢打打麻将什么的。所以夏令营瞄准了四川大学；电子科技大学；西南财经大学。比较喜欢广州还投了华南理工大学。由于电子科技大学没有计算机的夏令营，其基础与前沿学院也有计算机科学与技术专业，我投的是这个学院的。由于这个学院是新成立的，正在发展中，入营很简单，生源也不太好。双非挺多的，但是参加计算机竞争的还是比较激烈，985和211的基本上是来竞争计算机名额的，因为基本上就2个导师。西南财经大学我申请的是数学与经济学院的数理金融学。这个夏令营的生源还是不错的。全是211以上。<br><strong>夏令营面试</strong><br>四川大学：英语加专业知识。每一个房间的情况不同，我那个面试房间的用英语回答专业问题。我的问题是what is relational database。这个问题可能用中文都回答不出来。惨的一匹。所以本人认为自己凉的不要不要的。加上第一个面试也非常紧张。因为我第一个问题回答的不好，老师第二个问题是 introduce yourself in english。本人之前背过，准备的挺好的，我英语口语还行，所以最后英语的分数还是不错。然后是专业知识，我们房间没有问基础的专业知识，问的是你大学期间做过什么项目。这个问题就是逻辑清晰的回答，项目主要做了什么，用了什么工具（编程语言，框架，数据库等），叙述主要的算法。可以谈谈算法的优劣比较等。叙述的越清楚，应该得分越高，证明你在项目中不是打了一个酱油。虽然我觉得我发挥的不好，但是还是拿到了合格（可以直接录取）</p><p>四川大学实验室面试：我去的是川大的计算智能实验室的某老师。主要是做ppt展示你自己，在大学期间做过的事情。（自信很重要）然后全实验室的学长学姐们等会提问。主要针对你ppt中与简历中出现的相关内容。所以自己不清楚的东西还是不要随便往上写了。最后拿到了计算机学硕名额。</p><p>西南财经大学：西南财经的夏令营待遇很好，领导们请我们在一个蛮高档的地方吃了两次饭。请了已经毕业的学长学姐回来，然后某成功人士学长还请我们喝饮料。我们去超市买东西，副院长拿出他的卡让我们刷。感叹一个有钱的学校！西南财经大学有一个笔试，考概率论，其实考的还是很基础，所以只要好好复习就没有问题。西南财经的面试是一个政治面试一个专业面试。政治面试就是问你政治身份，支持不支持法轮功等。专业面试是让你在一个盒子里面的抽2个纸条，这两个纸条上分别有两个专业问题，然后回答你选择一个回答。问题都是数学知识，我选择的是期望的性质，还是比较简单。因为复习了概率论,如果抽到高数 现代相关内容很可能凉凉。当然老师可能会发散的问你一些其他问题，所以数学知识还是都复习一下比较保险。英语是让你读一段文章，然后你这主要讲的什么，读部分就是看你的发音等情况，解释就是看理解能力了，这通常是包涵一个经济学原理，由于本人经济学啥都不会这部分反正凉凉。最后是笔试70%，面试30%。拿到了拟录取。由于我真的动过读这个的打算，所以也联系了一位大牛导师，他也答应做我导师。在最后9月份考虑再三还是打算继续搞计算机吧。放弃了这边。</p><p>电子科技大学：这个夏令营是导师亲自面试，所以就只有这一轮，导师愿意要你就ojbk。我心仪的导师在头天晚上考了笔试。题目全英文，考的内容我实在无能为力，属于看不懂也不知道怎么答系列。有考数学随机过程等，随着心的感觉答完了。最后一题是问你研究生的打算。面试是实验室的老师都在，但是主要问题还是导师boss问。首先还是英文的自我介绍。问了一些基本情况，然后也是问了做的项目。然后问了关于python的很细节的问题。然后问了如果这边录取了要考虑其他学校么。（导师在9月26号左右吧被一个985的第一给鸽了，那学生最后觉得他上这个有点屈才了。导师对学生很诚信，不合格的就拒绝了，没有留备胎。所以她最后给那个学生发邮件说：诚信是一个人最重要的品质。虽然不道德，莫名想笑。）然后说了她要求的毕业要求，由于这个导师学术界大牛，要求很严格，学硕毕业sci二区一篇，其他区一篇。换成ccf的话A一篇，B一篇。当然都是一作。导师的实验室啥的还是在清水河那边。最后还是拿到了学硕名额，但我由衷的觉得我实在很菜，这个毕业要求我还是跑路了。怂了怂了。插一句，这个夏令营住的挺好，三星级酒店，他们食堂也是好吃的不要不要的，我觉得夏令营办的是不错，营服也是最好看的。</p><p>华南理工大学：这个大学的面试我感觉是我面的最好的一个。还是分教室，但是这个面试是面完了你就必须走，不存在面试之前问问其他人问了啥的情况。纪律是真的好。每个教室的面试情况不一样。我们教室还是最开始做英文自我介绍，经过这么多轮面试我是真的已经滚瓜烂熟了。所以说完了之后面试的老师们还夸我英语口语真好。然后还是问做的项目，我说我对人工智能模式识别感兴趣，问了我相关算法，比如人工智能的禁忌搜索，爬山，模拟退火等。还有剪枝，最大最小搜索等。模式识别就是KNN，ID3，贝叶斯分类等。然后问有没有读博士的打算，研究生计划等这种家常问题。最后这个夏令营也是拿到了优秀营员。面试成绩还是第12名。感觉发挥的是比较好。</p><p><strong>预推免</strong>：这部分我都没有怎么参加。我在暑假期间就想着在夏令营学校中选一个就好了。但是经过将近一周的反复考虑，我放下了在成都上大学的执念，决定争取一下好一点的学校，这个时候已经是9月10多号了，真的是无奈。大多数预推免都结束报名了。没啥选择了，就近原则联系了华科的导师，导师很有效率，让我过去面谈。</p><p>华中科技大学：我最先找的是一个年轻女导师，感觉厉害，势头很好。她说她现在只做区块链了。然后还有学硕名额。要是我觉得这个方向没问题，28号直接报名就好了。我回去考虑了一下。这个方向啊，之前没有接触过，前景方面。。。。。。总之放弃了这个。之后找了一个做机器学习的导师，也是简单聊了一下，了解了情况，导师还秀了一下，好多人给他发邮件，什么其他985的学生，他都没有回复了。然后说学硕名额是没有了。愿意读专硕就28号报名。华科计算机学院的学硕貌似都给985和本校。211的就专硕吧。想要计算学硕211的可以去国光联系老师。华科专硕毕业不需要论文。学硕CCF C就行。博士的话需要CCF A。</p><p>浙江大学：这个面试我真的是，表现的很不好。首先英语没有让介绍自己。直接问的一些家常问题。你觉得你本科学校怎么样啊这之类的。然后专业问题。这个面试我是真的服气，真的问的很基础的专业知识，放飞了一个暑假的我，感觉到凉凉凉。首先软件工程的六个阶段是什么。我们软件工程这门课都没有考试，写了一个软件完事的。真不知道怎么回答。然后问了一个操作系统的，进程和线程的理解和他们的不同之处，这个好答。然后问了一个数据库的，关系数据库和非关系数据库的区别，这个回答的还行吧。然后暴击的是计算机网络的，我们计算机网络老师之奇葩，导致我计算机网络这门课相当于没学，加上没复习。老师问ipv4和ipv6的区别，ipv6为什么不能普及。然后问的项目的事，由于我专业知识答的太差了。排名比较后边，但还是进了拟录取。<br>面试完和导师见面，由于他急着去上课，聊了没有多久。</p><p><strong>大学建议</strong>：成绩是很重要的。保研中如果你的其他条件没有很突出，那么你的本科学校的层次和成绩就起决定作用。然后是英语。英语六级一定要在大三上的四六级考试之前过。六级能考550+以上绝对很加分。成绩不理想可以考虑考一下雅思或者托福，这个的优势是每个月都可以考，出成绩快，不像四六级一年就两次，成绩还出的慢。但是缺点是需要花费的时间精力多。考试费贵。<br><strong><em>有用的竞赛</em></strong>：大二的9月份可以参加全国大学生数学竞赛。大三9月份可以参加数学建模国赛。大三的寒假可以参加数学建模美赛。这些都是认可度很高的比赛。ACM非常有用，能在夏令营之前拿到牌子最好，假如不能训练了能力在机试中也是会超过从来没有经验的人。<br><strong><em>科研项目</em></strong>:其实也不是一定要你出什么成果。主要是你要有相关的经验经历。让你在面试的时候有东西可以说。所以不管是学院的也好，学校的也好，早点申请立项，找导师指导，开始做一些工作。申请大创，挑战杯等。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能五子棋java实现</title>
      <link href="/2019/07/08/ren-gong-zhi-neng-wu-zi-qi-java-shi-xian/"/>
      <url>/2019/07/08/ren-gong-zhi-neng-wu-zi-qi-java-shi-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、算法思想"><a href="#一、算法思想" class="headerlink" title="一、算法思想"></a>一、算法思想</h2><p>1、搜索树<br>甲乙两人下棋，甲有很多种落子方式，乙也有多种应对走法，如果把所有的走法列出来，自然就构成了一棵树，即为搜索树，也称博弈树。树的根结点为先手的第一步走法，下面的走法构成了树的子结点，直至棋局结束。显然，如果棋盘足够大，子结点数会以几何级数上升，而我们的任务是从这些子结点中寻找一个对己方最有利的结点，从而得到棋局的最佳走法。<br>估值函数<br>估值函数通常是为了评价棋型的状态，根据实现定义的一个棋局估值表，对双方的棋局形态进行计算，根据得到的估值来判断应该采用的走法。棋局估值表是根据当前的棋局形势，定义一个分值来反映其优势程度，来对整个棋局形势进行评价。<br>    3、极大极小搜索<br>极大极小搜索算法就是在博弈树在寻找最优解的一个过程，这主要是一个对各个子结点进行比较取舍的过程，定义一个估值函数F(n)来分别计算各个终结点的分值，通过双方的分值来对棋局形势进行分析判断。还是以甲乙两人下棋为例，甲为max，乙为min。当甲走棋时，自然在博弈树中寻找最大点的走法，轮到乙时，则寻找最小点的走法，如此反复，这就是一个极大极小搜索过程，以此来寻找对机器的最佳走法。<br>4、剪枝算法<br>αβ剪枝算法简单来说，就是在搜索过程中减少一定的冗余现象，如已经找到极大值，执行该走法就可以获胜，则无须再往下进行搜索比较，此过程即为剪枝。对于极大的MAX结点，称为α剪枝；反之为β剪枝。具体规则可以简单描述如下：<br>α剪枝：对于极大值层结点的α值如果不小于它的任一祖先极小值层结点的β值，即α(后续层)≥β(祖先层)，则可中止该极大值层中这个MAX节点以下的搜索过程，这个MAX节点最终的倒推值就确定为这个α值。<br>β剪枝：对于极小值结点层的β值如果不大于它任一祖先极大值层结点的α值，即α(祖先层)≥β(后续层)，则可中止对该极小值层中这个MIN节点以下结点的搜索，这个MIN节点最终的倒推值就确定为这个β值。</p><h2 id="二、详细设计"><a href="#二、详细设计" class="headerlink" title="二、详细设计"></a>二、详细设计</h2><p><strong>2.1总体设计</strong><br>在算法设计中，比较重要的是评价函数的求法，因为评价函数是在中级或者高级难度的游戏模式中，计算机选择落棋位置的重要依据。<br>在五子棋游戏中，棋型很重要，其中有连五（表示已经有五子连线），活四（四子连线并且两边都没有被堵住），眠四（四子连线有一边被堵住），活三（三子连线两边都没有被堵上），眠三（三子连线，有一边被堵上），活二，眠二依次类推，其中还有一些其他的情况如：EUUOUU，OUUOUUO等，其中E表示有冲突（边界或者对方的棋子），U表示已经连线的棋子，O表示空白的位置，我们对这些很有可能连线的棋型，按照连成五子的概率大小不同定义不同的分值。因为我们求评价函数的作用是选择一个合适的地方落子，所以求评价值是针对空位置。假如我要求某位置黑子的评价值，就是试验性的将这个位置放上黑子，在横向，纵向，两个斜线方向分别以这个位置（x，y）为中心，向两边分别截取4位（因为第五位和此位置无关）一共截取9位，再看棋型，得到分数，再将这四个方向的分数相加。就为此位置的评价值。具体的截取方法，匹配方法与计算的方法我在详细设计部分会很清楚的表达。这部分用方法public int calculateScore(final int x,final int y,int color)实现，x，y为横坐标，纵坐标，color为棋子的颜色。返回求得的评价值。<br>中级难度的下法为，遍历棋盘，找到己方评价函数最高的位置A，再找到对方评价值最高的位置B，假如自己方的分数高于或者等于对方的分数，就将棋子落在A，反之落在位置B。<br>高级的下法为<br>整个程序设计的类，属性，方法如下：<br>1、类fivechess：<br>public class fivechess extends JFrame implements ActionListener<br>成员：<br>JButton back=new JButton(“悔棋”);<br>    JButton start=new JButton(“开始”);<br>    JButton game=new JButton(“中级难度”);<br>    JButton game2=new JButton(“高级难度”);<br>    GameBoard gb=new GameBoard();<br>    JPanel pb=new JPanel();<br>JPanel pg=new JPanel();<br>方法：<br>public fivechess()//构造函数<br>public void actionPerformed(ActionEvent e)//实现按钮事件<br>2、类GameBoard：<br>public class GameBoard extends JPanel implements MouseListener<br>成员：<br>        public int row=14;//棋盘行数<br>        public int col=14;//棋盘列数<br>        public int length=30;//每个格子的大小<br>        public int edgedis=30;//边距<br>        public int[][] ChessBoard=new int[row+1][col+1];//棋子代表的二维数组，<br>         int chessNum=0;//已经下了的棋子数目<br>         boolean IsBlack=true;//判断哪方下子(黑子先行)<br>         int lastx=-1,lasty=-1;   //最后下子的位置<br>         int llastx=-1,llasty=-1; //倒数第二次下的位置，方便悔棋<br>         boolean Win=false;//是否胜利的标志<br>         static final int radius=15;<br>        //棋盘的位置的分值(固定为15x15的棋盘）<br>方法：<br>public GameBoard()//构造函数<br>public void paintComponent(Graphics g)//画棋局<br>public void mousePressed(MouseEvent e)//鼠标事件<br>public void computerplayer()//中级下法<br>public void computerplayerhigher()//高级下法<br>public int maxMinWithAlphaBetaCut(int chessBoard[][], int whiteOrBlack, int depth, int x,int y, int alpha, int beta)//剪枝算法<br>public int calculateScore(final int x,final int y,int color)//算分值<br>public boolean isExit(int x,int y)//此位置有没有棋子<br>public boolean IsWin()//判断是否已经有五子连线的情况<br>public int ChessCount(int xChange,int yChange,int color)//计算棋子在xChange和yChange方向上连接的数量（1，0）横向，（0，1）纵向，（1，1）主对角线，（-1，-1）副对角线<br><strong>2.2 算法设计</strong><br>这部分只介绍重要的算法，在此程序中重要的算法有三个，评价值的计算，中级难度下法<br><strong><em>1.评价值计算</em></strong><br>在横向，纵向，两个斜线方向分别以这个位置（x，y）为中心，向两边分别截取4位（因为第五位和此位置无关）一共截取9位，再看棋型，得到分数，再将这四个方向的分数相加。就为此位置的评价值。<br>首先需要定义棋型，我将棋型用字符串来表示存储在string类型的数组type中，将相应的得分存储在int类型的数组score中。其中E表示有冲突（边界或者对方的棋子），U表示已经连线的棋子，O表示空白的位置。用下标对应<br><img src="https://img-blog.csdn.net/20181016122939156?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTEzNDg3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdn.net/20181016122815863?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTEzNDg3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>每种棋型的类型，以及棋型的评分合理与否很大程度上反应了智能程度，所以在设置上要多留心，也可以在后续的测试中留意分值的设置是否合理。首先我们需要在棋盘中截取棋型，以指定的坐标（x，y）为中心，在横向，竖向，正斜个，反斜上向两边扩展，定义一temp[4]数组其为string类型，分别用来存放在横向，竖向，正斜，反斜方向截取的棋型。在横向上的截取是保持y坐标不变，设扩展的位数为bite。在x轴左向扩展时坐标的变化为(x-bite,y)所以要确保x-bite&gt;=0,由于棋盘是以0开始的，所以当x小于4时能扩展的位数为bite=4-Math.abs(x-4)。<br>在往右向扩展时坐标的变化为(x+bite,y)所以要确保x+bite&lt;=14，当在bite小于等于4而x+bite&gt;14时就停止扩展。当在扩展到的位置遇到自己方的棋子有temp[0]=temp[0]+”U”当在扩展位置遇到对方的棋子或者遇到边界则有temp[0]=temp[0]+”C”扩展到的位置的为空位置则有temp[0]=temp[0]+”O”。同理在其他方向也按照这个原则进行扩展生成自己的棋型temp[]。<br>各个方向扩展的坐标变化如下：<br><img src="https://img-blog.csdn.net/20181016122843439?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTEzNDg3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>竖向向上(x,y-bite)    竖向向下(x,y+bite)<br>正斜向上(x-bite,y-bite)    正斜向下(x+bite,y+bite)<br>反斜向上(x+bite,y-bite)    反斜向下(x-bite,y+bite)<br>需要注意边界问题。代码实现如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">///////////////////////////在x轴方向上取////////////////////////////////</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token keyword">int</span> bite<span class="token operator">=</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>bite<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bite<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">+</span>i<span class="token operator">></span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//////////////////在y方向截取////////////////////////////</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token keyword">int</span> bite<span class="token operator">=</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>bite<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bite<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">+</span>i<span class="token operator">></span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//////////////////////在左下，右上方向上//////////////////////////////</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span><span class="token number">14</span><span class="token operator">-</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token number">14</span><span class="token operator">-</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      b<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                b<span class="token operator">=</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token operator">-</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                b<span class="token operator">=</span><span class="token number">14</span><span class="token operator">-</span>y<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>b<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>b<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    b<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span><span class="token number">14</span><span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token number">14</span><span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                          b<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    b<span class="token operator">=</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    b<span class="token operator">=</span><span class="token number">14</span><span class="token operator">-</span>x<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>b<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>b<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                            temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        b<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                            temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//////////////////////在左上，右下方向上////////////////////////////////</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> bite<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             bite<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    bite<span class="token operator">=</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    bite<span class="token operator">=</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>bite<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bite<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">+</span>i<span class="token operator">></span><span class="token number">14</span><span class="token operator">||</span>x<span class="token operator">+</span>i<span class="token operator">></span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>截取完之后我们需要计算得分，因为截取到的长度是长于定义的棋型的，所以只要在截取到棋型构成的字符串里面，有已经定义的棋型的子串，那么就算匹配上，该位置的得分加上该棋型对应的分数。匹配引入包：<br>import java.util.regex.Matcher;<br>import java.util.regex.Pattern;<br>调用方法来求得<br>Pattern p=Pattern.compile(type[j]);<br>                    Matcher m=p.matcher(temp[i]);<br>                    if(m.find())<br>因为棋型在type数组里面存储顺序是按分数递减存储的，所以最开始找到的棋型为最好的，在这四个方向上找到最好的就停止寻找，继续找下一个方向的。直到得到四个方向的分数并且相加，就为最终的结果。<br>代码实现为：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">int</span> result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">38</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    Pattern p<span class="token operator">=</span>Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>type<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Matcher m<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        result<span class="token operator">+=</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.3.2中级下法<br>中级难度的下法为，遍历棋盘，找到己方评价函数最高的位置A，再找到对方评价值最高的位置B，假如自己方的分数高于或者等于对方的分数，就将棋子落在A，反之落在位置B。<br>代码实现如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">computerplayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/////////////默认黑棋先行///////////////////////////</span>            <span class="token keyword">int</span> MaxScoreBlack<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> MaxScorewhite<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> TempScore<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> maxXB<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>maxYB<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>maxXW<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>maxYW<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> color<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            llastx<span class="token operator">=</span>lastx<span class="token punctuation">;</span>            llasty<span class="token operator">=</span>lasty<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">///////////////////////算白棋总分，当对方的棋局威胁不大时，自己方就进攻选择得分最高的棋局////////////////</span>            TempScore<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    TempScore<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculateScore</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>TempScore<span class="token operator">></span>MaxScorewhite<span class="token punctuation">)</span><span class="token punctuation">{</span>                        MaxScorewhite<span class="token operator">=</span>TempScore<span class="token punctuation">;</span>                        maxXW<span class="token operator">=</span>i<span class="token punctuation">;</span>                        maxYW<span class="token operator">=</span>j<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>             <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/////////////////////////算黑棋总分///////////////////////////////</span>            color<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            TempScore<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    TempScore<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculateScore</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>TempScore<span class="token operator">></span>MaxScoreBlack<span class="token punctuation">)</span><span class="token punctuation">{</span>                        MaxScoreBlack<span class="token operator">=</span>TempScore<span class="token punctuation">;</span>                        maxXB<span class="token operator">=</span>i<span class="token punctuation">;</span>                        maxYB<span class="token operator">=</span>j<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>             <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>MaxScorewhite<span class="token operator">>=</span>MaxScoreBlack<span class="token punctuation">)</span><span class="token punctuation">{</span>               lastx<span class="token operator">=</span>maxXW<span class="token punctuation">;</span>                lasty<span class="token operator">=</span>maxYW<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>               lastx<span class="token operator">=</span>maxXB<span class="token punctuation">;</span>                lasty<span class="token operator">=</span>maxYB<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>MaxScorewhite<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>MaxScoreBlack<span class="token punctuation">)</span><span class="token punctuation">;</span>            ChessBoard<span class="token punctuation">[</span>lastx<span class="token punctuation">]</span><span class="token punctuation">[</span>lasty<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>                        IsBlack<span class="token operator">=</span><span class="token operator">!</span>IsBlack<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//换白棋</span>            chessNum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、代码源码"><a href="#3、代码源码" class="headerlink" title="3、代码源码"></a>3、代码源码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>BorderLayout<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Color<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Container<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Graphics<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Graphics2D<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>RadialGradientPaint<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>RenderingHints<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>MouseEvent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>MouseListener<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>geom<span class="token punctuation">.</span>Ellipse2D<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span>BufferedImage<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span>ImageIO<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JButton<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JFrame<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JOptionPane<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>JPanel<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">fivechess</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">{</span>    JButton back<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"悔棋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JButton start<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JButton game<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"中级难度"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JButton game2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"高级难度"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    GameBoard gb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GameBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JPanel pb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JPanel pg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">fivechess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        pb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        pb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>back<span class="token punctuation">)</span><span class="token punctuation">;</span>        pb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>        pb<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>game2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>pb<span class="token punctuation">,</span>BorderLayout<span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>pg<span class="token punctuation">)</span><span class="token punctuation">;</span>        gb<span class="token punctuation">.</span><span class="token function">setOpaque</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>gb<span class="token punctuation">)</span><span class="token punctuation">;</span>        back<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        start<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        game<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        game2<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">526</span><span class="token punctuation">,</span><span class="token number">549</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        fivechess f<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">fivechess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"五子棋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameBoard</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span> <span class="token keyword">implements</span> <span class="token class-name">MouseListener</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> BufferedImage bgImage<span class="token operator">=</span>null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//背景图片</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//棋盘行数</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//棋盘列数</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每个格子的大小</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> edgedis<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边距</span>        <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ChessBoard<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//棋子代表的二维数组，其中0代表没有落子1代表黑子2代表白子</span>        <span class="token comment" spellcheck="true">//棋局判断，其中为有可能出现五子连线的类型，并判分，分数d额合理不合理影响了智能程度,*代表了有想相同颜色的棋子，O为空#代表被堵住了</span>        <span class="token comment" spellcheck="true">//一共32种棋型</span>        <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> type<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"UUUUU"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//胜利</span>                   <span class="token string">"OUUUUO"</span><span class="token punctuation">,</span><span class="token string">"UOUUUU"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//活四</span>                   <span class="token string">"OUUUUC"</span><span class="token punctuation">,</span><span class="token string">"CUUUUO"</span><span class="token punctuation">,</span><span class="token string">"CUOUUU"</span><span class="token punctuation">,</span><span class="token string">"CUUUOU"</span><span class="token punctuation">,</span><span class="token string">"CUUOUU"</span><span class="token punctuation">,</span><span class="token string">"UUOUUC"</span><span class="token punctuation">,</span><span class="token string">"UUOUUC"</span><span class="token punctuation">,</span><span class="token string">"UUUOUC"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//眠四</span>                   <span class="token string">"OOUUUOO"</span><span class="token punctuation">,</span><span class="token string">"OUUUO"</span><span class="token punctuation">,</span>                   <span class="token string">"COUUUOO"</span><span class="token punctuation">,</span><span class="token string">"COOUUUO"</span><span class="token punctuation">,</span><span class="token string">"COUUUOO"</span><span class="token punctuation">,</span><span class="token string">"OUUUOOC"</span><span class="token punctuation">,</span><span class="token string">"OOUUUOC"</span><span class="token punctuation">,</span><span class="token string">"OUUUOOC"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//活三和上一个评分差别不大</span>                   <span class="token string">"OUOUUO"</span><span class="token punctuation">,</span><span class="token string">"OUUOUO"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//活三</span>                   <span class="token string">"CUUUOO"</span><span class="token punctuation">,</span><span class="token string">"OOUUUC"</span><span class="token punctuation">,</span>                   <span class="token string">"OUOUUC"</span><span class="token punctuation">,</span><span class="token string">"CUUOUO"</span><span class="token punctuation">,</span><span class="token string">"OUUOUC"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//眠三</span>                   <span class="token string">"OOOUUOOO"</span><span class="token punctuation">,</span><span class="token string">"OOUUOO"</span><span class="token punctuation">,</span><span class="token string">"OUUO"</span><span class="token punctuation">,</span><span class="token string">"OOUOUOO"</span><span class="token punctuation">,</span><span class="token string">"OUOOUO"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//活二</span>                   <span class="token string">"OOOUUC"</span><span class="token punctuation">,</span><span class="token string">"CUUOOO"</span><span class="token punctuation">,</span><span class="token string">"OOUOUC"</span><span class="token punctuation">,</span><span class="token string">"CUOUOO"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//眠二</span>                   <span class="token string">"OOOOUOOOO"</span><span class="token punctuation">,</span><span class="token string">"OOUOO"</span><span class="token punctuation">,</span><span class="token string">"OUO"</span><span class="token comment" spellcheck="true">//都为空白</span>                   <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> score<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10000000</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//胜利</span>                 <span class="token number">900000</span><span class="token punctuation">,</span><span class="token number">850000</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//活四</span>                 <span class="token number">8000</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//眠四</span>                 <span class="token number">7500</span><span class="token punctuation">,</span> <span class="token number">7500</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//活三</span>                 <span class="token number">7200</span><span class="token punctuation">,</span><span class="token number">7200</span><span class="token punctuation">,</span><span class="token number">7200</span><span class="token punctuation">,</span><span class="token number">7200</span><span class="token punctuation">,</span><span class="token number">7200</span><span class="token punctuation">,</span><span class="token number">7200</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//活三</span>                 <span class="token number">5000</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span>                 <span class="token number">3000</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//眠三</span>                 <span class="token number">2500</span><span class="token punctuation">,</span><span class="token number">2500</span><span class="token punctuation">,</span><span class="token number">2500</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//眠三</span>                 <span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span>                 <span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span>                 <span class="token number">80</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>                 <span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> chessNum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//已经下了的棋子数目</span>         <span class="token keyword">boolean</span> IsBlack<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断哪方下子(黑子先行)</span>         <span class="token keyword">int</span> lastx<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>lasty<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//最后下子的位置</span>         <span class="token keyword">int</span> llastx<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>llasty<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//倒数第二次下的位置，方便悔棋</span>         <span class="token keyword">boolean</span> Win<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否胜利的标志</span>         Vector allx<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Vector ally<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// int[][][]Player=new int[row+1][col+1][2];//最后【】【】【0】表示有没有棋子，【】【】【1】表示评分</span>         <span class="token comment" spellcheck="true">//int[][][]Computer=new int[row+1][col+1][2];</span>        <span class="token comment" spellcheck="true">//设置棋子半径</span>         <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> radius<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//棋盘的位置的分值(固定为15x15的棋盘）</span>        <span class="token comment" spellcheck="true">//构造函数</span>        <span class="token keyword">public</span> <span class="token function">GameBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                bgImage<span class="token operator">=</span>ImageIO<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/wuziqi.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//初始化棋盘</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    ChessBoard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*public void copyChess(){            for(int i=0;i&lt;15;i++){                for(int j=0;j&lt;15;j++){                    if(ChessBoard[i][j]==1){                        Player[i][j][0]=1;                    }                    else if(ChessBoard[i][j]==2){                        Computer[i][j][0]=1;                    }                }            }        }        */</span>        <span class="token comment" spellcheck="true">//绘制棋盘</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paintComponent</span><span class="token punctuation">(</span>Graphics g<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">paintComponent</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//g.drawImage(bgImage, 0, 0, row*length+2*edgedis, col*length+2*edgedis, null);</span>            g<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>bgImage<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">526</span><span class="token punctuation">,</span> <span class="token number">549</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//绘制线条</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>row<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//横线</span>                g<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>edgedis<span class="token punctuation">,</span> edgedis<span class="token operator">+</span>i<span class="token operator">*</span>length<span class="token punctuation">,</span> col<span class="token operator">*</span>length<span class="token operator">+</span>edgedis<span class="token punctuation">,</span> edgedis<span class="token operator">+</span>i<span class="token operator">*</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>col<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//竖线</span>                g<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>edgedis<span class="token operator">+</span>j<span class="token operator">*</span>length<span class="token punctuation">,</span> edgedis<span class="token punctuation">,</span> edgedis<span class="token operator">+</span>j<span class="token operator">*</span>length<span class="token punctuation">,</span> row<span class="token operator">*</span>length<span class="token operator">+</span>edgedis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//绘制棋子</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//存在落子</span>                        <span class="token comment" spellcheck="true">//获取网格交叉点的坐标(在屏幕上的)</span>                        <span class="token keyword">int</span> x<span class="token operator">=</span>i<span class="token operator">*</span>length<span class="token operator">+</span>edgedis<span class="token punctuation">;</span>                        <span class="token keyword">int</span> y<span class="token operator">=</span>j<span class="token operator">*</span>length<span class="token operator">+</span>edgedis<span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果落黑子</span>                            g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                            RadialGradientPaint paint<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RadialGradientPaint</span><span class="token punctuation">(</span>x<span class="token operator">-</span>radius<span class="token operator">+</span><span class="token number">25</span><span class="token punctuation">,</span>y<span class="token operator">-</span>radius<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0f</span><span class="token punctuation">,</span><span class="token number">1f</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">,</span>Color<span class="token punctuation">.</span>BLACK<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">(</span><span class="token punctuation">(</span>Graphics2D<span class="token punctuation">)</span> g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPaint</span><span class="token punctuation">(</span>paint<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">(</span><span class="token punctuation">(</span>Graphics2D<span class="token punctuation">)</span> g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRenderingHint</span><span class="token punctuation">(</span>RenderingHints<span class="token punctuation">.</span>KEY_ANTIALIASING<span class="token punctuation">,</span> RenderingHints<span class="token punctuation">.</span>VALUE_ANTIALIAS_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">(</span><span class="token punctuation">(</span>Graphics2D<span class="token punctuation">)</span> g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRenderingHint</span><span class="token punctuation">(</span>RenderingHints<span class="token punctuation">.</span>KEY_ALPHA_INTERPOLATION<span class="token punctuation">,</span> RenderingHints<span class="token punctuation">.</span>VALUE_ALPHA_INTERPOLATION_DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果落白子</span>                            g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>                            RadialGradientPaint paint<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RadialGradientPaint</span><span class="token punctuation">(</span>x<span class="token operator">-</span>radius<span class="token operator">+</span><span class="token number">25</span><span class="token punctuation">,</span>y<span class="token operator">-</span>radius<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0f</span><span class="token punctuation">,</span><span class="token number">1f</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">,</span>Color<span class="token punctuation">.</span>BLACK<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">(</span><span class="token punctuation">(</span>Graphics2D<span class="token punctuation">)</span> g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPaint</span><span class="token punctuation">(</span>paint<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">(</span><span class="token punctuation">(</span>Graphics2D<span class="token punctuation">)</span> g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRenderingHint</span><span class="token punctuation">(</span>RenderingHints<span class="token punctuation">.</span>KEY_ANTIALIASING<span class="token punctuation">,</span> RenderingHints<span class="token punctuation">.</span>VALUE_ANTIALIAS_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">(</span><span class="token punctuation">(</span>Graphics2D<span class="token punctuation">)</span> g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRenderingHint</span><span class="token punctuation">(</span>RenderingHints<span class="token punctuation">.</span>KEY_ALPHA_INTERPOLATION<span class="token punctuation">,</span> RenderingHints<span class="token punctuation">.</span>VALUE_ALPHA_INTERPOLATION_DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span>                        Ellipse2D e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ellipse2D<span class="token punctuation">.</span>Float</span><span class="token punctuation">(</span>x<span class="token operator">-</span>radius<span class="token punctuation">,</span> y<span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">(</span><span class="token punctuation">(</span>Graphics2D<span class="token punctuation">)</span> g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>lastx<span class="token operator">&amp;&amp;</span>j<span class="token operator">==</span>lasty<span class="token punctuation">)</span><span class="token punctuation">{</span>                            g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>                            g<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>x<span class="token operator">-</span>radius<span class="token punctuation">,</span> y<span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span>MouseEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub </span>            String info<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>            String ChessColor<span class="token operator">=</span>IsBlack<span class="token operator">?</span><span class="token string">"黑子"</span><span class="token operator">:</span><span class="token string">"白子"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Win<span class="token punctuation">)</span><span class="token punctuation">{</span>                info<span class="token operator">=</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"游戏结束！%s已经取得游戏胜利，请重新开始游戏！"</span><span class="token punctuation">,</span> ChessColor<span class="token punctuation">)</span><span class="token punctuation">;</span>                JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chessNum<span class="token operator">==</span><span class="token punctuation">(</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                info<span class="token operator">=</span><span class="token string">"棋盘已满！"</span><span class="token punctuation">;</span>                JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不执行任何操作</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//获得鼠标落点在二维数组的索引</span>            lastx<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>edgedis<span class="token operator">+</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span>length<span class="token punctuation">;</span>            lasty<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>edgedis<span class="token operator">+</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span>length<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//落点不在棋盘内不能落子</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lastx<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>lastx<span class="token operator">></span>row<span class="token operator">||</span>lasty<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>lasty<span class="token operator">></span>col<span class="token punctuation">)</span><span class="token punctuation">{</span>                info<span class="token operator">=</span><span class="token string">"落子处超出棋盘范围！"</span><span class="token punctuation">;</span>                JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//落点已经存在棋子不能落子</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isExit</span><span class="token punctuation">(</span>lastx<span class="token punctuation">,</span>lasty<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                info<span class="token operator">=</span><span class="token string">"该处已有落子！"</span><span class="token punctuation">;</span>                JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//绘制落子</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>IsBlack<span class="token punctuation">)</span>                ChessBoard<span class="token punctuation">[</span>lastx<span class="token punctuation">]</span><span class="token punctuation">[</span>lasty<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> ChessBoard<span class="token punctuation">[</span>lastx<span class="token punctuation">]</span><span class="token punctuation">[</span>lasty<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            allx<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lastx<span class="token punctuation">)</span><span class="token punctuation">;</span>            ally<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lasty<span class="token punctuation">)</span><span class="token punctuation">;</span>            chessNum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Win<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                info<span class="token operator">=</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"恭喜，%s赢了！"</span><span class="token punctuation">,</span> ChessColor<span class="token punctuation">)</span><span class="token punctuation">;</span>                JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">computerplayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断胜负</span>            ChessColor<span class="token operator">=</span>IsBlack<span class="token operator">?</span><span class="token string">"黑子"</span><span class="token operator">:</span><span class="token string">"白子"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Win<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                info<span class="token operator">=</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"恭喜，%s赢了！"</span><span class="token punctuation">,</span> ChessColor<span class="token punctuation">)</span><span class="token punctuation">;</span>                JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            IsBlack<span class="token operator">=</span><span class="token operator">!</span>IsBlack<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//换黑棋</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">computerplayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/////////////默认黑棋先行///////////////////////////</span>            <span class="token keyword">int</span> MaxScoreBlack<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> MaxScorewhite<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> TempScore<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> maxXB<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>maxYB<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>maxXW<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>maxYW<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> color<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            llastx<span class="token operator">=</span>lastx<span class="token punctuation">;</span>            llasty<span class="token operator">=</span>lasty<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">///////////////////////算白棋总分，当对方的棋局威胁不大时，自己方就进攻选择得分最高的棋局////////////////</span>            TempScore<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    TempScore<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculateScore</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>TempScore<span class="token operator">></span>MaxScorewhite<span class="token punctuation">)</span><span class="token punctuation">{</span>                        MaxScorewhite<span class="token operator">=</span>TempScore<span class="token punctuation">;</span>                        maxXW<span class="token operator">=</span>i<span class="token punctuation">;</span>                        maxYW<span class="token operator">=</span>j<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>             <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/////////////////////////算黑棋总分///////////////////////////////</span>            color<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            TempScore<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    TempScore<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculateScore</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>TempScore<span class="token operator">></span>MaxScoreBlack<span class="token punctuation">)</span><span class="token punctuation">{</span>                        MaxScoreBlack<span class="token operator">=</span>TempScore<span class="token punctuation">;</span>                        maxXB<span class="token operator">=</span>i<span class="token punctuation">;</span>                        maxYB<span class="token operator">=</span>j<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>             <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>MaxScorewhite<span class="token operator">>=</span>MaxScoreBlack<span class="token punctuation">)</span><span class="token punctuation">{</span>               lastx<span class="token operator">=</span>maxXW<span class="token punctuation">;</span>                lasty<span class="token operator">=</span>maxYW<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>               lastx<span class="token operator">=</span>maxXB<span class="token punctuation">;</span>                lasty<span class="token operator">=</span>maxYB<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>MaxScorewhite<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>MaxScoreBlack<span class="token punctuation">)</span><span class="token punctuation">;</span>            ChessBoard<span class="token punctuation">[</span>lastx<span class="token punctuation">]</span><span class="token punctuation">[</span>lasty<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            allx<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lastx<span class="token punctuation">)</span><span class="token punctuation">;</span>            ally<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lasty<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println(ChessBoard[maxX][maxY]);</span>            IsBlack<span class="token operator">=</span><span class="token operator">!</span>IsBlack<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//换白棋</span>            chessNum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculateScore</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">final</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//输入坐标，若有活4，连5直接返回-1，下此位置，否则返回评分</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>color<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">///////////////////////////在x轴方向上取////////////////////////////////</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token keyword">int</span> bite<span class="token operator">=</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>bite<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bite<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">+</span>i<span class="token operator">></span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//////////////////在y方向截取////////////////////////////</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token keyword">int</span> bite<span class="token operator">=</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>bite<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bite<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">+</span>i<span class="token operator">></span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//////////////////////在左下，右上方向上//////////////////////////////</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span><span class="token number">14</span><span class="token operator">-</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token number">14</span><span class="token operator">-</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//两者都小取小的 </span>                 b<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                b<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">></span><span class="token number">10</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                b<span class="token operator">=</span><span class="token number">14</span><span class="token operator">-</span>y<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>b<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>b<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    b<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                          b<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    b<span class="token operator">=</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    b<span class="token operator">=</span><span class="token number">14</span><span class="token operator">-</span>x<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">/*while(b!=0){                        if(ChessBoard[x+b][y-b]==0){                            temp[2]=temp[2]+"O";                        }                        else if(ChessBoard[x+b][y-b]==color){                            temp[2]=temp[2]+"U";                        }                        else {                            temp[2]=temp[2]+"C";                        }                        b--;                    }*/</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                            temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                            temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//////////////////////在左上，右下方向上////////////////////////////////</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> bite<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             bite<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    bite<span class="token operator">=</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">-</span><span class="token number">4</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    bite<span class="token operator">=</span><span class="token number">4</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//System.out.println(bite);</span>                <span class="token comment" spellcheck="true">//System.out.println(x);</span>                <span class="token comment" spellcheck="true">//System.out.println(y);</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>bite<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>bite<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bite<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">+</span>i<span class="token operator">></span><span class="token number">14</span><span class="token operator">||</span>x<span class="token operator">+</span>i<span class="token operator">></span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"O"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">==</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"U"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"C"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">//////////////////////////////求出棋型之后计算分数////////////////////////////</span>            <span class="token keyword">int</span> result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">38</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    Pattern p<span class="token operator">=</span>Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>type<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Matcher m<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        result<span class="token operator">+=</span>score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//因为棋型在type数组里面存储顺序是按分数递减存储的，所以最开始找到的棋型为最好的</span>                        <span class="token comment" spellcheck="true">//在这四个方向上找到最好的就停止寻找，继续找下一个方向的。直到得到四个方向的分数</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只是实验下在此处会有什么情况，算出分值之后就回复原样</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//悔棋操所</span>            ChessBoard<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>allx<span class="token punctuation">.</span><span class="token function">lastElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ally<span class="token punctuation">.</span><span class="token function">lastElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            allx<span class="token punctuation">.</span><span class="token function">removeElementAt</span><span class="token punctuation">(</span>allx<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ally<span class="token punctuation">.</span><span class="token function">removeElementAt</span><span class="token punctuation">(</span>ally<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ChessBoard<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>allx<span class="token punctuation">.</span><span class="token function">lastElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ally<span class="token punctuation">.</span><span class="token function">lastElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            allx<span class="token punctuation">.</span><span class="token function">removeElementAt</span><span class="token punctuation">(</span>allx<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ally<span class="token punctuation">.</span><span class="token function">removeElementAt</span><span class="token punctuation">(</span>ally<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startagain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Win<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        IsBlack<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ChessBoard<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span>MouseEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span>MouseEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseExited</span><span class="token punctuation">(</span>MouseEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseReleased</span><span class="token punctuation">(</span>MouseEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token punctuation">}</span>          <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isExit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">IsWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> color<span class="token operator">=</span>ChessBoard<span class="token punctuation">[</span>lastx<span class="token punctuation">]</span><span class="token punctuation">[</span>lasty<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断横向上的相同颜色的棋子数量</span>            count<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ChessCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断纵向上的相同颜色棋子的数量</span>            count<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ChessCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断主对角线上/的相同颜色棋子的数量</span>            count<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ChessCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断副对角线上\的相同颜色棋子的数量</span>            count<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ChessCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//计算棋子在xChange和yChange方向上连接的数量</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">ChessCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> xChange<span class="token punctuation">,</span><span class="token keyword">int</span> yChange<span class="token punctuation">,</span><span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//棋子计数器</span>            <span class="token keyword">int</span> tempx<span class="token operator">=</span>xChange<span class="token punctuation">;</span>            <span class="token keyword">int</span> tempy<span class="token operator">=</span>yChange<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//xChange取值范围(1,0,1,1)和yChange取值范围(0,1,1,-1)分别代表（横向，纵向，/，\）</span>            <span class="token comment" spellcheck="true">//先计算正方向上的数量</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>lastx <span class="token operator">+</span> xChange <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lastx <span class="token operator">+</span> xChange <span class="token operator">&lt;=</span> row <span class="token operator">&amp;&amp;</span> lasty <span class="token operator">+</span> yChange <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lasty <span class="token operator">+</span> yChange <span class="token operator">&lt;=</span> col <span class="token operator">&amp;&amp;</span> color <span class="token operator">==</span> ChessBoard<span class="token punctuation">[</span>lastx <span class="token operator">+</span> xChange<span class="token punctuation">]</span><span class="token punctuation">[</span>lasty <span class="token operator">+</span> yChange<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xChange <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    xChange<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>yChange <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>yChange <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                         yChange<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                         yChange<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//回到最开始的方向</span>            xChange <span class="token operator">=</span> tempx<span class="token punctuation">;</span>            yChange <span class="token operator">=</span> tempy<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//接着计算反方向上的数量</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>lastx <span class="token operator">-</span> xChange <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lastx <span class="token operator">-</span> xChange <span class="token operator">&lt;=</span> row <span class="token operator">&amp;&amp;</span> lasty <span class="token operator">-</span> yChange <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lasty <span class="token operator">-</span> yChange <span class="token operator">&lt;=</span> col <span class="token operator">&amp;&amp;</span> color <span class="token operator">==</span> ChessBoard<span class="token punctuation">[</span>lastx <span class="token operator">-</span> xChange<span class="token punctuation">]</span><span class="token punctuation">[</span>lasty <span class="token operator">-</span> yChange<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xChange <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    xChange<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>yChange <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>yChange <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                         yChange<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                         yChange<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO 自动生成的方法存根</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>back<span class="token punctuation">)</span><span class="token punctuation">{</span>                gb<span class="token punctuation">.</span><span class="token function">regret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>start<span class="token punctuation">)</span><span class="token punctuation">{</span>                gb<span class="token punctuation">.</span><span class="token function">startagain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>game<span class="token punctuation">)</span><span class="token punctuation">{</span>                gb<span class="token punctuation">.</span><span class="token function">startagain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>game2<span class="token punctuation">)</span><span class="token punctuation">{</span>                gb<span class="token punctuation">.</span><span class="token function">startagain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、源码下载"><a href="#四、源码下载" class="headerlink" title="四、源码下载"></a>四、源码下载</h2><p><a href="https://download.csdn.net/download/qq_36113487/11300293" target="_blank" rel="noopener">五子棋的java实现</a></p>]]></content>
      
      
      <categories>
          
          <category> 本科阶段作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统下配置opencv-3.2+openpose+caffe</title>
      <link href="/2019/07/08/linux-cao-zuo-xi-tong-xia-pei-zhi-opencv-3-2-openpose-caffe/"/>
      <url>/2019/07/08/linux-cao-zuo-xi-tong-xia-pei-zhi-opencv-3-2-openpose-caffe/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux操作系统下配置opencv-3-2-openpose-caffe"><a href="#Linux操作系统下配置opencv-3-2-openpose-caffe" class="headerlink" title="Linux操作系统下配置opencv-3.2+openpose+caffe"></a>Linux操作系统下配置opencv-3.2+openpose+caffe</h1><p>首先需要安装cuda8.0可以先配置一下这个,源码用cmake编译可以用cmake-gui是一个非常好用的工具安装代码如下:</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get install cmakesudo apt-get install cmake-qt-gui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装配置opencv3-2"><a href="#安装配置opencv3-2" class="headerlink" title="安装配置opencv3.2"></a>安装配置opencv3.2</h2><p> (1)安装相关依赖</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get install build-essentialsudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-devsudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(2)下载源码到目录并编译安装<br>在这里我是在自己的home目录下创建了一个project目录来放所有的源码</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir projectcd projectgit clone https://github.com/opencv/opencv.gitgit clone https://github.com/opencv/opencv_contrib.gitcd opencvmkdir buildcd buildcmake -D CMAKE_BUILD_TYPE=RELEASE \      -D CMAKE_INSTALL_PREFIX=/usr/local \      -D INSTALL_C_EXAMPLES=ON \      -D INSTALL_PYTHON_EXAMPLES=OFF \      -D WITH_TBB=ON \      -D WITH_V4L=ON \      -D WITH_QT=ON \      -D WITH_OPENGL=ON \      -D OPENCV_EXTRA_MODULES_PATH=~/project/opencv_contrib/modules \      -D BUILD_EXAMPLES=ON ..make -j 8sudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果cmake命令行编译有错误可以在build文件夹下用cmake-gui查看所有的所有的参数以及路径有没有写对,注意OPENCV_EXTRA_MODULES_PATH必须写对路径<br>验证是否装好</p><pre class="line-numbers language-shell"><code class="language-shell">pkg-config --modversion opencv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="编译安装openpose"><a href="#编译安装openpose" class="headerlink" title="编译安装openpose"></a>编译安装openpose</h2><p>openpose需要protobuf由于caffe需要的是2版本的所以就系统的2.6.1就可以满足要求<br>proto 2和proto 3还是有很大的差别的所以这个一定要用2的,不然一定会失败 2和3的区别具体可以参考 <a href="https://solicomo.com/network-dev/protobuf-proto3-vs-proto2.html" target="_blank" rel="noopener">Protobuf 的 proto3 与 proto2 的区别</a><br>关于protoc的相关命令</p><pre class="line-numbers language-shell"><code class="language-shell"> whereis protoc #哪些路径下安装了protoc which protoc #可以查看默认选用protoc的路径 protoc --version # 查看当前protoc版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(1)安装相关依赖</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get install libprotobuf-dev protobuf-compilersudo apt-get install  libleveldb-dev libsnappy-dev libhdf5-serial-devsudo apt-get install --no-install-recommends libboost-all-devsudo apt-get install libatlas-base-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(2)下载源码</p><pre class="line-numbers language-shell"><code class="language-shell">cd ~/projectgit clone https://github.com/CMU-Perceptual-Computing-Lab/openpose.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于在cmake openpose的时候也会下载caffe和模型文件所以可以选择先将模型文件下载下来放在指定的目录下以及编译caffe<br>(2)下载编译caffe</p><pre class="line-numbers language-shell"><code class="language-shell">cd ~/project/openpose/3rdpartygit clone https://github.com/CMU-Perceptual-Computing-Lab/caffecd caffemkdir buildcd buildcmake ..make -j 8make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样如果cmake不成功使用cmake-gui查看参数路径是否正确,也可以确认安装路径等<br>(3)编译安装openpose</p><pre class="line-numbers language-shell"><code class="language-shell">cd ../../../mkdir buildcd buildcmake ..make -j 8sudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不成功使用使用cmake-gui检查参数是否正确<br>注意需要正确的将caffe和自己编译的opencv位置写对,并检查protoc是否2.6.1<br>可以运行一下demo看看是否安装成功<br>./build/examples/openpose/openpose.bin –video examples/media/video.avi<br>注意:如果opencv用的是conda 或者 pip或者apt-get install安装的运行时视频处理可能有问题,所以建议用自己编译的比较好,caffe如果用官网版本的在读模型文件的时候会报错,一定要编译安装openpose给的caffe.在运行时demo时报错还有可能是因为GPU内存不够了,所以用nvidia-smi查看GPU使用情况.确保内存够用</p>]]></content>
      
      
      <categories>
          
          <category> 安装配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++程序中使用openpose预测关节点坐标的简易实现</title>
      <link href="/2019/07/08/c-cheng-xu-zhong-shi-yong-openpose-yu-ce-guan-jie-dian-zuo-biao-de-jian-yi-shi-xian/"/>
      <url>/2019/07/08/c-cheng-xu-zhong-shi-yong-openpose-yu-ce-guan-jie-dian-zuo-biao-de-jian-yi-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="C-程序中使用openpose预测关节点坐标的简易实现"><a href="#C-程序中使用openpose预测关节点坐标的简易实现" class="headerlink" title="C++程序中使用openpose预测关节点坐标的简易实现"></a>C++程序中使用openpose预测关节点坐标的简易实现</h1><p>虽然在openpose的官网上已经给出了很多可用的demo,但是如果我们在自己的C++项目中想要使用openpose来预测三维关键点官网给出的例子不是很适用,所以我现在给出了C++程序中使用openpose预测关节点坐标的简易实现,包括CMakeLists.txt的书写.<br>当然我的程序还是要求先配置好openpose和opencv<br>这里有一篇很好的博客对于如何使用openpose官方demo做了非常详细的介绍,是使用openpose官方demo非常好的工具:<a href="http://blog.caoxudong.info/blog/2018/06/13/openpose_usage_params" target="_blank" rel="noopener">OpenPose命令行参数记录</a></p><h3 id="1-预测关节点坐标的简单封装op-h"><a href="#1-预测关节点坐标的简单封装op-h" class="headerlink" title="(1)预测关节点坐标的简单封装op.h"></a>(1)预测关节点坐标的简单封装op.h</h3><pre class="line-numbers language-c++"><code class="language-c++">#ifndef CAFFETEST_OP_H#define CAFFETEST_OP_H#include "caffe/caffe.hpp" //OpenPose dependencies#include <openpose/core/headers.hpp>#include <openpose/filestream/headers.hpp>#include <openpose/gui/headers.hpp>#include <openpose/pose/headers.hpp>#include <openpose/utilities/headers.hpp>using namespace std;#define FLAGS_logging_level 3#define FLAGS_output_resolution "-1x-1"#define FLAGS_net_resolution "-1x368"#define FLAGS_model_pose "BODY_25"#define FLAGS_alpha_pose 0.6#define FLAGS_scale_gap 0.3#define FLAGS_scale_number 1#define FLAGS_render_threshold 0.05#define FLAGS_num_gpu_start 0#define FLAGS_disable_blending false#define FLAGS_model_folder "/home/litchi/project/openpose/models/"class OpenPose{public:    std::unique_ptr<op::PoseExtractorCaffe> poseExtractorCaffe;    std::unique_ptr<op::PoseCpuRenderer> poseRenderer;    std::unique_ptr<op::FrameDisplayer> frameDisplayer;    std::unique_ptr<op::ScaleAndSizeExtractor> scaleAndSizeExtractor;    OpenPose(){        caffe::Caffe::set_mode(caffe::Caffe::GPU);        caffe::Caffe::SetDevice(0);        op::log("OpenPose Library Tutorial - Example 1.", op::Priority::High);        // ------------------------- INITIALIZATION -------------------------        // Step 1 - Set logging level        // - 0 will output all the logging messages        // - 255 will output nothing        op::ConfigureLog::setPriorityThreshold((op::Priority)FLAGS_logging_level);        op::log("", op::Priority::Low, __LINE__, __FUNCTION__, __FILE__);        // Step 2 - Read Google flags (user defined configuration)        // outputSize        const auto outputSize = op::flagsToPoint(FLAGS_output_resolution, "-1x-1");        // netInputSize        const auto netInputSize = op::flagsToPoint(FLAGS_net_resolution, "-1x368");        // poseModel        const auto poseModel = op::flagsToPoseModel(FLAGS_model_pose);        // Check no contradictory flags enabled        if (FLAGS_alpha_pose < 0. || FLAGS_alpha_pose > 1.)            op::error("Alpha value for blending must be in the range [0,1].", __LINE__, __FUNCTION__, __FILE__);        if (FLAGS_scale_gap <= 0. && FLAGS_scale_number > 1)            op::error("Incompatible flag configuration: scale_gap must be greater than 0 or scale_number = 1.",                      __LINE__, __FUNCTION__, __FILE__);        // Logging        op::log("", op::Priority::Low, __LINE__, __FUNCTION__, __FILE__);        // Step 3 - Initialize all required classes        scaleAndSizeExtractor = std::unique_ptr<op::ScaleAndSizeExtractor>(new op::ScaleAndSizeExtractor(netInputSize, outputSize, FLAGS_scale_number, FLAGS_scale_gap));        poseExtractorCaffe = std::unique_ptr<op::PoseExtractorCaffe>(new op::PoseExtractorCaffe{poseModel, FLAGS_model_folder, FLAGS_num_gpu_start});        poseRenderer = std::unique_ptr<op::PoseCpuRenderer>(new op::PoseCpuRenderer{poseModel, (float)FLAGS_render_threshold, !FLAGS_disable_blending,                                                                                    (float)FLAGS_alpha_pose});        frameDisplayer = std::unique_ptr<op::FrameDisplayer>(new op::FrameDisplayer{"OpenPose Tutorial - Example 1", outputSize});        // Step 4 - Initialize resources on desired thread (in this case single thread, i.e. we init resources here)        poseExtractorCaffe->initializationOnThread();        poseRenderer->initializationOnThread();    }    string forward(const cv::Mat& inputImage, bool display = false){        op::OpOutputToCvMat opOutputToCvMat;        op::CvMatToOpInput cvMatToOpInput;        op::CvMatToOpOutput cvMatToOpOutput;        if(inputImage.empty())            op::error("Could not open or find the image: ", __LINE__, __FUNCTION__, __FILE__);        const op::Point<int> imageSize{inputImage.cols, inputImage.rows};        // Step 2 - Get desired scale sizes        std::vector<double> scaleInputToNetInputs;        std::vector<op::Point<int>> netInputSizes;        double scaleInputToOutput;        op::Point<int> outputResolution;        std::tie(scaleInputToNetInputs, netInputSizes, scaleInputToOutput, outputResolution)                = scaleAndSizeExtractor->extract(imageSize);        // Step 3 - Format input image to OpenPose input and output formats        const auto netInputArray = cvMatToOpInput.createArray(inputImage, scaleInputToNetInputs, netInputSizes);        // Step 4 - Estimate poseKeypoints        poseExtractorCaffe->forwardPass(netInputArray, imageSize, scaleInputToNetInputs);        const auto poseKeypoints = poseExtractorCaffe->getPoseKeypoints();        if(display){            auto outputArray = cvMatToOpOutput.createArray(inputImage, scaleInputToOutput, outputResolution);            // Step 5 - Render poseKeypoints            poseRenderer->renderPose(outputArray, poseKeypoints, scaleInputToOutput);            // Step 6 - OpenPose output format to cv::Mat            auto outputImage = opOutputToCvMat.formatToCvMat(outputArray);            // ------------------------- SHOWING RESULT AND CLOSING -------------------------            // Step 1 - Show results            frameDisplayer->displayFrame(outputImage, 0); // Alternative: cv::imshow(outputImage) + cv::waitKey(0)            // Step 2 - Logging information message            op::log("Example 1 successfully finished.", op::Priority::High);            // Return successful message        }        return poseKeypoints.toString();    }};#endif //CAFFETEST_OP_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一部分需要注意的是</p><p>#define FLAGS_model_folder “/home/litchi/project/openpose/models/“ 这里需要换成自己的机器中openpose/model的位置</p><p>#define FLAGS_model_pose “BODY_25” 这里可以选择输出的数据类型,比如”COCO”等</p><h3 id="对这个封装的调用"><a href="#对这个封装的调用" class="headerlink" title="对这个封装的调用"></a>对这个封装的调用</h3><pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>#include<opencv2/opencv.hpp>#include "op.h"using namespace std;int main() {    string videopath="/home/litchi/data/20193.mp4";    cv::VideoCapture capture;    cv::Mat frame;    frame= capture.open(videopath);    if(!capture.isOpened())    {        cout<<"cant open"<<endl;        return -1;    }    OpenPose op;    while(capture.read(frame)){        string point = op.forward(frame);        std::cout<<point;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在videopath中写上路径即可这样就是简易的预测了图片中任务的关节点的坐标,输出的数据注意第三项是x,y估计的准确度.</p><h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><pre class="line-numbers language-cmake"><code class="language-cmake">cmake_minimum_required(VERSION 3.13)project(easyopenpose)set(CMAKE_CXX_STANDARD 14)set(INC_DIR /usr/include        /usr/local/cuda/include #cuda的include位置 修改为自己的机器的正确的地方        /home/litchi/project/openpose/3rdparty/caffe/include #机器中正确的caffe位置        /home/litchi/project/openpose/3rdparty/caffe/src #机器中正确的caffe位置        )set(LINK_DIR /usr/lib        /usr/lib/x86_64-linux-gnu/        /usr/local/cuda/lib64 #cuda的lib位置 修改为正确的地方        /home/litchi/project/openpose/3rdparty/caffe/build/lib #caffe的lib位置 修改为正确的地方        )set(OpenCV_DIR /usr/local/share/OpenCV) #opencv的位置find_package(OpenCV REQUIRED)find_package(OpenPose REQUIRED)include_directories(${INC_DIR}${OpenCV_INCLUDE_DIRS}${OpenPose_INCLUDE_DIRS}${EIGEN3_INCLUDE_DIR})link_directories(${LINK_DIR}${OpenCV_LIBS}${OpenPose_LIBS})add_executable(easyopenpose main.cpp op.h)target_link_libraries(easyopenpose        caffe        boost_system        glog        jsoncpp        ${OpenPose_LIBS}        ${OpenCV_LIBS}        )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CMakeLists.txt的书写只需要根据楼主给出的注释修改路径就可以用了<br>验证结果是否正确可以视频文件用官方demo运行比较结果<br>根据我测试的数据,楼主这份代码和官方demo运行结果完美fit<br>源码可以在楼主上传的资源中下载</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源库理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow模型转化为caffe模型并调用预测</title>
      <link href="/2019/07/08/tensorflow-mo-xing-zhuan-hua-wei-caffe-mo-xing-bing-diao-yong-yu-ce/"/>
      <url>/2019/07/08/tensorflow-mo-xing-zhuan-hua-wei-caffe-mo-xing-bing-diao-yong-yu-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="tensorflow模型转化为caffe模型并调用预测"><a href="#tensorflow模型转化为caffe模型并调用预测" class="headerlink" title="tensorflow模型转化为caffe模型并调用预测"></a>tensorflow模型转化为caffe模型并调用预测</h1><p>本文一共分为三个部分首先根据tensorflow的网络结构代码写caffe的deploy.prototxt,再用python代码写XXXX.caffemodel文件,最后调用caffe模型进行预测.</p><h2 id="根据tensorflow的网络结构代码写caffe的deploy-prototxt"><a href="#根据tensorflow的网络结构代码写caffe的deploy-prototxt" class="headerlink" title="根据tensorflow的网络结构代码写caffe的deploy.prototxt"></a>根据tensorflow的网络结构代码写caffe的deploy.prototxt</h2><p>写完之后可以将代码输入到这里(工具)检测写法是否正确:<br><a href="http://ethereon.github.io/netscope/#/editor" target="_blank" rel="noopener">验证工具</a><br>书写规则如下,我给的每一种类型的其参数是必须写的参数,如果想知道每一层更详细的参数,可以参考:<a href="https://download.csdn.net/download/qq_36113487/11138733" target="_blank" rel="noopener">caffe网络结构详解下载</a><br>Name是每一层的名字,top是经过这一层数据传向的层,bottom这一层的上一层数据<br>(1)输入层Input:</p><pre><code>layer {  name: &quot;input&quot;  type: &quot;Input&quot;  top: &quot;data&quot;  input_param {    shape {      dim: 1      dim: 32      dim: 1      dim: 1    }  }}</code></pre><p>一定要指定shape层,第一个dim为batchsize也就是一次性可以处理多少个数据,第二个dim为channel,如果处理的是图像也就是图片的通道数.如果处理的是向量,这个就是向量的长度,第三个dim为图像的高度,第四个dim为图像的宽度.如果是向量则第三第四都为1.<br>(2)全连接层InnerProduct</p><pre><code>layer{    name:&quot;linear&quot;    type:&quot;InnerProduct&quot;    bottom:&quot;data&quot;    top:&quot;linear&quot;    inner_product_param {      num_output: 1024   }}</code></pre><p>num_output是下一层向量数目<br>(3)BatchNorm层</p><pre><code>layer {   bottom: &quot;linear&quot;   top: &quot;bn1&quot;   name: &quot;bn1&quot;   type: &quot;BatchNorm&quot;   batch_norm_param {      use_global_stats: true   }}</code></pre><p>这个参数在测试阶段为true,在训练阶段为false<br>(4)Scale层</p><pre><code>layer {   bottom: &quot;bn1&quot;   top: &quot;bn1&quot;   name: &quot;scale1&quot;   type: &quot;Scale&quot;   scale_param {      bias_term: true   }}</code></pre><p>在转换模型的时候,tensorflow的一个 normalization layer相当于caffe的一个连续 batchNorm + Scale:<br>Convert batch normalization layer in tensorflow to caffe: 1 batchnorm layer in tf is equivalent to a successive of two layer : batchNorm + Scale:<br>(5)RELU</p><pre><code>layer {   bottom: &quot;bn1&quot;   top: &quot;ReLU1&quot;   name: &quot;ReLU1&quot;   type: &quot;ReLU&quot;}</code></pre><p>(6)Eltwise</p><pre><code>layer {   bottom: &quot;sum_up&quot;   bottom: &quot;ReLU5&quot;   top: &quot;sum_up2&quot;   name: &quot;sum_up2&quot;   type:&quot;Eltwise&quot;}</code></pre><p>在残差网络中需要用这个层相加.</p><h2 id="用python代码写模型参数文件"><a href="#用python代码写模型参数文件" class="headerlink" title="用python代码写模型参数文件"></a>用python代码写模型参数文件</h2><p>(1)读tensorflow的模型</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfsys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"/path_to_caffe/python"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token keyword">import</span> caffe<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npsess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span>config<span class="token operator">=</span>tf<span class="token punctuation">.</span>ConfigProto<span class="token punctuation">(</span>allow_soft_placement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>python <span class="token keyword">import</span> pywrap_tensorflowcheckpoint_path <span class="token operator">=</span> <span class="token string">"./checkpoint-4874200"</span>reader <span class="token operator">=</span> pywrap_tensorflow<span class="token punctuation">.</span>NewCheckpointReader<span class="token punctuation">(</span>checkpoint_path<span class="token punctuation">)</span>var_to_shape_map <span class="token operator">=</span> reader<span class="token punctuation">.</span>get_variable_to_shape_map<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(在tensorflow较高版本中,模型文件三个 分别为xxx.meta xxxx.index xxx.0000-data-0001)<br>(2)创建caffe网络</p><pre class="line-numbers language-python"><code class="language-python">cf_prototxt <span class="token operator">=</span> <span class="token string">"./2dto3d_deploy.prototxt"</span>net <span class="token operator">=</span> caffe<span class="token punctuation">.</span>Net<span class="token punctuation">(</span>cf_prototxt<span class="token punctuation">,</span> caffe<span class="token punctuation">.</span>TEST<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>(3)将参数读取写入<br>全解连接层的w和b</p><pre class="line-numbers language-python"><code class="language-python">linear_w<span class="token operator">=</span>np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>reader<span class="token punctuation">.</span>get_tensor<span class="token punctuation">(</span><span class="token string">'linear_model/w1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tmp<span class="token operator">=</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>linear_w<span class="token punctuation">)</span>linear_w1<span class="token operator">=</span>linear_w<span class="token operator">*</span><span class="token number">1</span><span class="token operator">*</span><span class="token punctuation">(</span>tmp<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>tmp <span class="token operator">+</span> linear_w<span class="token operator">*</span><span class="token punctuation">(</span>tmp<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>net<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'linear'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">=</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>linear_w1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#在这里后两步是因为w做了w1 = tf.clip_by_norm(w1,1)</span><span class="token comment" spellcheck="true">#这个操作具体可以参考:https://blog.csdn.net/wn87947/article/details/82345537</span>linear_b<span class="token operator">=</span>np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>reader<span class="token punctuation">.</span>get_tensor<span class="token punctuation">(</span><span class="token string">'linear_model/b1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>net<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'linear'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">=</span>linear_b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BN层由于tensoflow和caffe有差异<br>在转化的时候记住caffe的bn+scale层等于tensorflow的bn层次<br>具体的转化有以下规则:</p><pre class="line-numbers language-python"><code class="language-python">net<span class="token punctuation">.</span>params<span class="token punctuation">[</span>bn_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> tf_movingmean<span class="token comment" spellcheck="true">#epsilon 0.001 is the default value used by tf.contrib.layers.batch_norm!!</span>net<span class="token punctuation">.</span>params<span class="token punctuation">[</span>bn_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> tf_movingvariance <span class="token operator">+</span> <span class="token number">0.001</span>net<span class="token punctuation">.</span>params<span class="token punctuation">[</span>bn_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># important, set it to be 1</span>net<span class="token punctuation">.</span>params<span class="token punctuation">[</span>scale_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> tf_gammanet<span class="token punctuation">.</span>params<span class="token punctuation">[</span>scale_name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> tf_beta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关的具体讨论可以参考:<a href="https://github.com/ethereon/caffe-tensorflow/issues/59" target="_blank" rel="noopener">bn层转化</a><br>下面给出bn层转化的一个试例</p><pre class="line-numbers language-python"><code class="language-python">bn1_tf_movingmean<span class="token operator">=</span>np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>reader<span class="token punctuation">.</span>get_tensor<span class="token punctuation">(</span><span class="token string">'linear_model/batch_normalization/moving_mean'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bn1_tf_movingvariance<span class="token operator">=</span>np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>reader<span class="token punctuation">.</span>get_tensor<span class="token punctuation">(</span><span class="token string">'linear_model/batch_normalization/moving_variance'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bn1_tf_gamma<span class="token operator">=</span>np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>reader<span class="token punctuation">.</span>get_tensor<span class="token punctuation">(</span><span class="token string">'linear_model/batch_normalization/gamma'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bn1_tf_beta<span class="token operator">=</span>np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>reader<span class="token punctuation">.</span>get_tensor<span class="token punctuation">(</span><span class="token string">'linear_model/batch_normalization/beta'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>net<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'bn1'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> bn1_tf_movingmean<span class="token comment" spellcheck="true"># epsilon 0.001 is the default value used by tf.contrib.layers.batch_norm!!</span>net<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'bn1'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> bn1_tf_movingvariance<span class="token operator">+</span> <span class="token number">0.001</span>net<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'bn1'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># important, set it to be 1</span>net<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'scale1'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> bn1_tf_gammanet<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'scale1'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> bn1_tf_beta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3)最后写入文件</p><pre class="line-numbers language-python"><code class="language-python">net<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'a.caffemodel'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="调用caffe模型预测验证"><a href="#调用caffe模型预测验证" class="headerlink" title="调用caffe模型预测验证"></a>调用caffe模型预测验证</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"/path_to_caffe/python"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token keyword">import</span> caffe<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.59036</span><span class="token punctuation">,</span><span class="token number">2.64035</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.84236</span><span class="token punctuation">,</span><span class="token number">2.63166</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.60718</span><span class="token punctuation">,</span><span class="token number">4.62976</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.53916</span><span class="token punctuation">,</span><span class="token number">5.21137</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.26383</span><span class="token punctuation">,</span><span class="token number">2.65532</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.29271</span><span class="token punctuation">,</span><span class="token number">4.93954</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.38703</span><span class="token punctuation">,</span><span class="token number">5.27324</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.58944</span><span class="token punctuation">,</span><span class="token number">0.633358</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.59042</span><span class="token punctuation">,</span><span class="token number">1.12005</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.53584</span><span class="token punctuation">,</span><span class="token number">0.696239</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.08071</span><span class="token punctuation">,</span><span class="token number">0.598781</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.603272</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.938632</span><span class="token punctuation">,</span><span class="token number">0.0140431</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2.17247</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.89872</span><span class="token punctuation">,</span><span class="token number">0.648127</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2.23398</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.798227</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2.80334</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.86967</span><span class="token punctuation">]</span>p2d<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>a<span class="token punctuation">)</span>y<span class="token operator">=</span>np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>p2d<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>caffe<span class="token punctuation">.</span>set_mode_gpu<span class="token punctuation">(</span><span class="token punctuation">)</span>model_def <span class="token operator">=</span> <span class="token string">'./2dto3d_deploy.prototxt'</span>model_pretrained <span class="token operator">=</span><span class="token string">'./a.caffemodel'</span>net <span class="token operator">=</span> caffe<span class="token punctuation">.</span>Net<span class="token punctuation">(</span>model_def<span class="token punctuation">,</span>model_pretrained<span class="token punctuation">,</span>caffe<span class="token punctuation">.</span>TEST<span class="token punctuation">)</span>net<span class="token punctuation">.</span>blobs<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token operator">=</span>yout <span class="token operator">=</span> net<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#前像传播预测</span><span class="token keyword">print</span> <span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上测试数据的正确预测结果为:<br>{‘linear6’: array([[-1.1093297 ,  0.13423912, -0.71337676, -0.3413014 ,  0.60594785,<br>        -0.503688  , -0.44055757,  0.61926687, -0.3807128 ,  1.1093313 ,<br>        -0.13424   ,  0.7133761 ,  0.57371044,  0.56901824, -0.12641048,<br>         0.05005788,  0.47413373,  0.14192167, -0.3304365 , -0.7288994 ,<br>         0.4668903 ,  0.06698397, -0.6077603 ,  0.33841628,  0.02581951,<br>        -0.36136347, -0.09946679,  0.07204475, -0.29733503,  0.13283135,<br>         0.85128194, -1.0867463 ,  0.6229229 ,  1.1905218 , -3.798849  ,<br>         0.13268307,  1.8069856 , -3.7732291 , -0.5529848 , -0.9289112 ,<br>        -0.9280683 ,  0.14142033, -1.392531  , -2.9245243 , -0.55180794,<br>        -1.8918784 , -2.9869053 , -1.0472283 ]], dtype=float32)}</p><h2 id="附件下载"><a href="#附件下载" class="headerlink" title="附件下载"></a>附件下载</h2><p>   最后我给出了一个示例转换的所有文件<a href="https://download.csdn.net/download/qq_36113487/11138733" target="_blank" rel="noopener">附件下载地址</a><br>   其中有如下内容:<br>(1) linear_model.py 为网络结构的定义文件可以参考这个文件的代码按照规则写出<br>(2) 2dto3d_deploy.prototxt<br>(3)checkpoint*文件是tensorflow模型文件<br>(4)caffe_script.py为写模型参数文件运行之后生产a.caffemodel<br>(5)predict.py根据2dto3d_deploy.prototxt和a.caffemodel进行预测看结果是否正确已经给出一组测试数据<br>(6)caffe网络模型深入理解各层详解.pdf</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
            <tag> caffe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下科学上网和在终端中使用代理的方法</title>
      <link href="/2019/07/08/linux-xia-ke-xue-shang-wang-he-zai-zhong-duan-zhong-shi-yong-dai-li-de-fang-fa/"/>
      <url>/2019/07/08/linux-xia-ke-xue-shang-wang-he-zai-zhong-duan-zhong-shi-yong-dai-li-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux下科学上网和在终端中使用代理的方法"><a href="#Linux下科学上网和在终端中使用代理的方法" class="headerlink" title="Linux下科学上网和在终端中使用代理的方法"></a>Linux下科学上网和在终端中使用代理的方法</h1><h2 id="1、SSGLOBAL-SETTINGS"><a href="#1、SSGLOBAL-SETTINGS" class="headerlink" title="1、SSGLOBAL SETTINGS"></a>1、SSGLOBAL SETTINGS</h2><pre class="line-numbers language-shell"><code class="language-shell">$ git clone https://github.com/shadowsocksrr/shadowsocksr.git$ cd shadowsocksr# modify config.json in shadowsocksr (this is your vpn server infos. port. IP. eg.)# To start:$ cd shadowsocks$ nohup python local.py -c ../config.json &<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>=这里设置好后其实已经可以在电脑中科学上网了如果使用浏览器的话，需要在浏览器中配置一下，在第三部分会讲。由于大概在6月4日左右，大批ip被墙，所以这里建议协议可以使用auth_chain_a。在config.json中的设置大概如下</p><pre class="line-numbers language-shell"><code class="language-shell">{    "server": " ",//服务器IP    "server_ipv6": "::",    "server_port":  ,//服务器端口号    "local_address": "127.0.0.1",    "local_port": 1080, //本地端口号    "password": " ",//密码    "method": "none",    "protocol": "auth_chain_a",    "protocol_param": "",    "obfs": "http_simple",    "obfs_param": "bing.com",    "speed_limit_per_con": 0,    "speed_limit_per_user": 0,    "additional_ports" : {}, // only works under multi-user mode    "additional_ports_only" : false, // only works under multi-user mode    "timeout": 120,    "udp_timeout": 60,    "dns_ipv6": false,    "connect_verbose_info": 0,    "redirect": "",    "fast_open": false}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、PROXYCHAINS-SETTINGS"><a href="#2、PROXYCHAINS-SETTINGS" class="headerlink" title="2、PROXYCHAINS SETTINGS"></a>2、PROXYCHAINS SETTINGS</h2><pre class="line-numbers language-shell"><code class="language-shell">$ git clone https://github.com/rofl0r/proxychains-ng.git$ cd proxychains-ng$ ./configure$ make && sudo make install# modify proxychains.conf$ vim src/proxychains.conf# change socks4 127.0.0.1 9095 to# socks5 127.0.0.1 1080 // 1080就为上一步配置的端口号$ cd ~$ mkdir .proxychains$ cd .proxychains$ ln -s ~/proxychains-ng/src/proxychains.conf ./<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过一下命令来测试是否在终端中能走代理</p><pre class="line-numbers language-shell"><code class="language-shell">proxychains4 wget www.google.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3、配置谷歌浏览器"><a href="#3、配置谷歌浏览器" class="headerlink" title="3、配置谷歌浏览器"></a>3、配置谷歌浏览器</h2><h3 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h3><p>无论是用户体验、强大的功能还是丰富的扩展程序都是我用过的浏览器中最好的，所以强烈推荐。目前已经可以在不翻墙的情况下去下载 Chrome（桌面版）了，账号数据同步方面也不需要翻墙了。<a href="https://www.google.cn/chrome/" target="_blank" rel="noopener">谷歌浏览器下载地址</a></p><h3 id="SwitchyOmega"><a href="#SwitchyOmega" class="headerlink" title="SwitchyOmega"></a>SwitchyOmega</h3><p>Google Chrome 浏览器上的一个代理扩展程序，可以轻松快捷地管理和切换多个代理设置。下面也会详细介绍自动切换模式。点击 <a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="noopener">Github-SwitchyOmega</a>，下载页面有详细的安装教程，仔细看一下就好（就是下载好文件随便放在一个文件夹中，然后打开谷歌浏览器的设置，找到扩展程序，或者直接在浏览器中输入chrome://extensions/，将下载好的文件拖到这个页面就ok）</p><h3 id="配置-Shadowsocks-情景模式"><a href="#配置-Shadowsocks-情景模式" class="headerlink" title="配置 Shadowsocks 情景模式"></a>配置 Shadowsocks 情景模式</h3><p>  1、打开 Chrome， 点击右上角的圆形图标，再点击选项。<br>                                  <img src="https://img-blog.csdnimg.cn/20190708204210700.png" alt="在这里插入图片描述"><br>  2、点击左侧的新建情景模式，输入情景模式名称 Shadowsocks【自己任意设置名称】，类型选择第一个代理服务器。创建完成后做如下配置：<br>  <img src="https://img-blog.csdnimg.cn/20190708204335384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTEzNDg3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  你也可以自己设置不代理的地址列表。如上图。保存后你就可以通过这个情景模式科学上网了。</p><h3 id="配置自动切换模式"><a href="#配置自动切换模式" class="headerlink" title="配置自动切换模式"></a>配置自动切换模式</h3><p>   配置好 Shadowsocks 情景模式后虽然可以使用 Chrome 浏览器科学上网了，但是这样的话无论你访问什么网站都会走代理，有时候访问国内的一些网站反而会很慢，这时候自动切换模式就解决了这个问题。下面介绍一下如何配置自动切换模式。<br>   1、点击左侧的 自动切换，或者自己新建情景模式，类型选择第二个 自动切换模式。然后做如下配置：<img src="https://img-blog.csdnimg.cn/20190708204605804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTEzNDg3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> （1）切换规则是在访问条件设置的域名时候使用后面设置的情景模式。比如图中 <em>.google.com 和 </em>.github.com 使用 Shadowsocks 情景模式【刚刚创建的那个情景模式】。也可以点击  添加条件 来添加自己的规则。<br>（2）将图中 规则列表规则 前面的框打√，再将后面的 情景模式 设置为 Shadowsocks，意思是规则列表中的内容，我们使用 Shadowsocks 情景模式。然后 规则列表设置 中：<br>规则列表格式： AutoProxy；<br>规则列表网址：<a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener"> https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a><br>（3）这样设置完成 规则列表规则 后就不需要在切换规则中一个一个添加条件了。<br>切换规则 最后一行的 默认情景模式 代表不在规则列表中网址我们使用 直接连接 情景模式，也就是说不走代理。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.cylong.com/blog/2017/04/09/chrome-SwitchyOmega/" target="_blank" rel="noopener">http://www.cylong.com/blog/2017/04/09/chrome-SwitchyOmega/</a></p>]]></content>
      
      
      <categories>
          
          <category> 安装配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Hexo] Theme BeanTech</title>
      <link href="/2017/03/18/hexo-theme-beantech/"/>
      <url>/2017/03/18/hexo-theme-beantech/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ported Theme of <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Hux Blog</a>, Thank <a href="https://github.com/Huxpro" target="_blank" rel="noopener">Huxpro</a> for designing such a flawless theme.</p><p>This BeanTech theme created by <a href="http://beantech.org" target="_blank" rel="noopener">YuHsuan</a> modified from the original Porter <a href="http://kaijun.rocks/hexo-theme-huxblog/" target="_blank" rel="noopener">Kaijun</a></p></blockquote><h1 id="Live-Demo"><a href="#Live-Demo" class="headerlink" title="Live Demo"></a><a href="http://beantech.org" target="_blank" rel="noopener">Live Demo</a></h1><hr><p><img src="http://beantech.org/img/beantech-desktop.png" alt="BeanTech Desktop"></p><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><hr><p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p><p>Let’s begin!!!</p><h2 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h2><hr><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech<span class="token function">cd</span> hexo-beantech<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Modify"><a href="#Modify" class="headerlink" title="Modify"></a>Modify</h2><hr><p>Modify <code>_config.yml</code> file with your own info.<br>Especially the section:</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>Replace to your own repo!</p><pre class="line-numbers language-yml"><code class="language-yml">deploy:  type: git  repo: https://github.com/<yourAccount>/<repo>  branch: <your-branch><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Sidebar-settings"><a href="#Sidebar-settings" class="headerlink" title="Sidebar settings"></a>Sidebar settings</h3><p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p><pre class="line-numbers language-yml"><code class="language-yml">sidebar: true    # whether or not using Sidebar.sidebar-about-description: "<your description>"sidebar-avatar: img/<your avatar path><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>and activate your personal widget you like</p><pre class="line-numbers language-yml"><code class="language-yml">widgets:         # here are widget you can use, you can comment out- featured-tags- short-about- recent-posts- friends-blog- archive- category<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p><h3 id="Signature-Setup"><a href="#Signature-Setup" class="headerlink" title="Signature Setup"></a>Signature Setup</h3><p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p><pre class="line-numbers language-yml"><code class="language-yml">signature: true   # show signaturesignature-img: img/signature/<your-signature-ID><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Go-to-top-icon-Setup"><a href="#Go-to-top-icon-Setup" class="headerlink" title="Go to top icon Setup"></a>Go to top icon Setup</h3><p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p><h3 id="Post-tag"><a href="#Post-tag" class="headerlink" title="Post tag"></a>Post tag</h3><p>You can decide to show post tags or not.</p><pre class="line-numbers language-yml"><code class="language-yml">home_posts_tag: true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="home_posts_tag-true.png" alt="home_posts_tag-true"></p><pre class="line-numbers language-yml"><code class="language-yml">home_posts_tag: false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="home_posts_tag-false.png" alt="home_posts_tag-false"></p><h3 id="Markdown-render"><a href="#Markdown-render" class="headerlink" title="Markdown render"></a>Markdown render</h3><p>My markdown render engine plugin is <a href="https://github.com/celsomiranda/hexo-renderer-markdown-it" target="_blank" rel="noopener">hexo-renderer-markdown-it</a>.</p><pre class="line-numbers language-yml"><code class="language-yml"># Markdown-it config## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wikimarkdown:  render:    html: true    xhtmlOut: false    breaks: true    linkify: true    typographer: true    quotes: '“”‘’'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token string">"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        anchors<span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token punctuation">{</span>          visible<span class="token punctuation">:</span> <span class="token string">'hover'</span><span class="token punctuation">,</span>          placement<span class="token punctuation">:</span> <span class="token string">'left'</span><span class="token punctuation">,</span>          icon<span class="token punctuation">:</span> ℬ <span class="token comment" spellcheck="true">// this is the header anchor "unicode" icon</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Hexo-Basics"><a href="#Hexo-Basics" class="headerlink" title="Hexo Basics"></a>Hexo Basics</h2><hr><p>Some hexo command:</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new post <span class="token string">"&lt;post name>"</span> <span class="token comment" spellcheck="true"># you can change post to another layout if you want</span>hexo clean <span class="token operator">&amp;&amp;</span> hexo generate <span class="token comment" spellcheck="true"># generate the static file</span>hexo server <span class="token comment" spellcheck="true"># run hexo in local environment</span>hexo deploy <span class="token comment" spellcheck="true"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Have-fun"><a href="#Have-fun" class="headerlink" title="Have fun ^_^"></a>Have fun ^_^</h1><hr><!-- Place this tag in your head or just before your close body tag. --><script async defer src="https://buttons.github.io/buttons.js"></script><!-- Place this tag where you want the button to render. --><p>Please <a class="github-button" href="https://github.com/YenYuHsuan/hexo-theme-beantech" data-icon="octicon-star" aria-label="Star YenYuHsuan/hexo-theme-beantech on GitHub" target="_blank" rel="noopener">Star</a> this Project if you like it! <a class="github-button" href="https://github.com/YenYuHsuan" aria-label="Follow @YenYuHsuan on GitHub" target="_blank" rel="noopener">Follow</a> would also be appreciated!<br>Peace!</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安装配置 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
